<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Providers\RouteServiceProvider;
use App\Models\User;
use App\Models\Assignment;
use Illuminate\Foundation\Auth\RegistersUsers;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use DB;
use App\Models\Announcement;
use App\Models\EmployeeProfile;
use App\Models\StoreCompanydirector;
use App\Models\ClientProfile;
use App\Models\TimeSheet;
use App\Models\Issue;
use App\Models\Event;
use App\Models\Notification;
use Illuminate\Support\Facades\File;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use App\Models\UserInfo;
use App\Models\DataModel;
use App\Models\OutOfExpense;
use Carbon\Carbon;
use RealRashid\SweetAlert\Facades\Alert;
use App\Models\PolicyFile;
use App\Models\KeyDownload;
use App\Models\Document;
use App\Models\EmployeeStatus;
use App\Models\TemplateFile;
use App\Models\ChartedDocument;
use App\Models\Folder;
use App\Models\Customer;
use App\Models\Files;
use App\Models\UserOtp;
use App\Models\UploadedFile;
use App\Models\RegUploadedFile;
use App\Models\RegCharteredDoc;
use App\Models\RegCOI;
use App\Models\RegPAN;
use App\Models\RegTAN;
use App\Models\RegINC;
use App\Models\RegSpiceDoc;
use App\Models\RegCustomDoc;

use App\Models\MisUploadedFile;
use App\Models\MisCharteredDoc;
use App\Models\MisCOI;
use App\Models\MisPAN;
use App\Models\MisTAN;
use App\Models\MisINC;
use App\Models\MisSpiceDoc;
use App\Models\MisCustomDoc;
use App\Models\OrganizationChart;

use App\Models\StoreBankDoc;

use App\Models\CustomDoc;
use App\Models\RegistrationDoc;
use App\Models\MiscellaneousDoc;

use App\Models\AdminEventCal;
use App\Models\CompanyProfiles;
use App\Models\DirectorStore;
use App\Models\CustomDirectorStore;
use Illuminate\Support\Facades\Response;
use Illuminate\Auth\AuthenticationException;
use App\Models\StoreIpFile;
use App\Models\StoreEmployeeprofile;
use App\Models\StoreEmployeeDetail;
use App\Models\StoreEmployeePayroll;
use App\Models\StoreContract;
use App\Models\StoreAudit;
use App\Models\MOA;
use App\Models\PFDOC;
use App\Models\ESIDOC;
use App\Models\PTDOC;
use App\Models\TLDOC;
use App\Models\URDOC;
use App\Models\StoreFixedAsset;
use App\Models\BoardNotice;
use App\Models\BoardAttendencesheet;
use App\Models\BoardResolutions;
use App\Models\BoardMinuteBook;
use App\Models\MeetNotice;
use App\Models\MeetMinBook;
use App\Models\MeetAttendencesheet;
use App\Models\MeetResolutions;
use App\Models\OrderNotice;
use App\Models\OrderMinuteBook;
use App\Models\OrderAttendencesheet; 
use App\Models\OrderResolutions;
use App\Models\InnerRun;
use App\Models\InnerINC9;
use App\Models\InnerSpice;
use App\Models\InnerINC33;

use App\Models\InnerINC34;
use App\Models\InnerINC35;

use App\Models\InnerINC22;

use App\Models\InnerINC20A;

use App\Models\AnnAoC4AFS;
use App\Models\AnnAoC4CFS;

use App\Models\AnnMGT7;

use App\Models\AnnMGT7A;

use App\Models\BankAccStatement;

use App\Models\Director1AadharKYC;
use App\Models\Director1AddressProof;
use App\Models\Director1ContactDetails;
use App\Models\Director1PANKYC;
use App\Models\Director1Photo;
use App\Models\Director1Signimg;
use App\Models\Director2AadharKYC;
use App\Models\Director2AddressProof;
use App\Models\Director2ContactDetails;
use App\Models\Director2PANKYC;
use App\Models\Director2Photo;
use App\Models\Director2Signimg;
use App\Models\IncorporationArtofAssoc;
use App\Models\IncorporationCertifofincorp;
use App\Models\IncorporationLLPAgreement;
use App\Models\IncorporationMemoofAssoc;
use App\Models\IncorporationPartnerdeed;
use App\Models\IncorporationSharecertif;
use App\Models\IncorporationTrustDeed;
use App\Models\RegistrationsEmpStateInscertif;
use App\Models\RegistrationsGSTINcertif;
use App\Models\RegistrationsLabourWelfFundcertif;
use App\Models\RegistrationsMSMEcertif;
use App\Models\RegistrationsPANcertif;
use App\Models\RegistrationsPFundcertif;
use App\Models\RegistrationsPOSHPolicy;
use App\Models\RegistrationsProfTaxcertif;
use App\Models\RegistrationsTANcertif;
use App\Models\RegistrationsTrademark;
use App\Models\CreditCardStatementsAddCreditCardState;
use App\Models\FixedDepositStatementsFixDepAccState;
use App\Models\MutualFundStatementsAddCreditCardState;
use App\Models\AuditorAppointmentAcptletterappt;
use App\Models\AuditorAppointmentBordResforaptofAudt;
use App\Models\AuditorAppointmentCrtficatRule4consntAudapt;
use App\Models\AuditorAppointmentInttoaud;
use App\Models\AuditorAppointmentLetterofapt;
use App\Models\AuditorAppointmentSpecalResl;
use App\Models\AuditorExitsADT2;
use App\Models\AuditorExitsADT3;
use App\Models\AuditorExitsResignDetofgroundsseekremaud;
use App\Models\AuditorExitsResignletteraud;
use App\Models\AuditorExitsSpecialResol;
use App\Models\DepositUndertakingsFormDPT3;
use App\Models\DirectorAppointmentsDir3;
use App\Models\DirectorAppointmentsDir6;
use App\Models\DirectorAppointmentsDir12;
use App\Models\DirectorResignationDir11;
use App\Models\DirectorResignationDir12;
use App\Models\StatutoryRegistersForeignReg;
use App\Models\StatutoryRegistersRegofCharges;
use App\Models\StatutoryRegistersRegofContDirectinterested;
use App\Models\StatutoryRegistersRegofDeposits;
use App\Models\StatutoryRegistersRegofDirKMP;
use App\Models\StatutoryRegistersRegofInvestnotheldCompany;
use App\Models\StatutoryRegistersRegofLoanGuarantSec;
use App\Models\StatutoryRegistersRegofMemb;
use App\Models\StatutoryRegistersRegofOtherSecHold;

use App\Models\Member;

use App\Models\CommonTable;
use App\Models\UserRole;

use App\Models\DataRoom;

use MailerSend\MailerSend;
use MailerSend\Helpers\Builder\Recipient;
use MailerSend\Helpers\Builder\EmailParams;
use MailerSend\Helpers\Builder\SmsParams;


use App\Models\Tasks;
use App\Models\StoreGST;
use App\Models\StoreCompanyEmployee;
use App\Models\TaskEvents;
use App\Models\Feedback;

use ZipArchive;



use Illuminate\Support\Facades\Log;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        $user = Auth::user(); // Get the currently authenticated user
        // Check if the user is the master admin
        if ($user->id == 1) {
            return $this->masterAdmin(); // Call the master admin function
        }

        // // Log the activity
        // DB::table('user_logs')->insert([
        //     'user_id' => auth()->id(),
        //     'logged_in_at' => now(), // or the specific timestamp of the action
        // ]);


        $employees = User::where('role', 'Employee')->get();
        $clients = User::where('role', 'Client')->get();
        $results = DB::table('assignments as a')
    ->join('users as u', 'u.id', '=', 'a.client_id')
    ->join('users as us', 'us.id', '=', 'a.employee_id')
    ->select('a.*', 'u.*', 'us.*') // Adjust the columns as needed
    ->get();
    $policy = PolicyFile::latest()->get();
    
   $role  = UserRole::get();
 $currentDate = Carbon::now();

   
    $roles = UserRole::pluck('role')->toArray(); // Get an array of all roles

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table
// dd($userRole);
// Check if the user's role exists in the roles array
$user = auth()->user();

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table

// Find the UserRole record where the role matches the user's role
$userRoleRecord = UserRole::where('role', $userRole)->first();

if ($userRoleRecord) {
    // Fetch data based on the matched UserRole record's id
    $roleId = $userRoleRecord->id;
    // dd($userRoleRecord);

    // Now, you can use the $roleId to fetch data related to this role
     $clientdata = ClientProfile::where('client_id', $user->id)->first();
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();

    $today = Carbon::now()->toDateString(); // Get the current date in YYYY-MM-DD format

    $events = DB::table('events as e')
        ->join('users as u', 'u.id', '=', 'e.client_id')
        ->where('e.client_id', $user->id)
        ->whereDate('e.start', '>=', $today)
        ->select('title', DB::raw('MAX(start) as start'), DB::raw('MAX(description) as description'))
        ->groupBy('title')
        ->get();

    $tasks = Tasks::where('status', '!=', 'deleted')->where('user_id', $user->id)->whereDate('taskDeadline', Carbon::today())->get();
                    // ->whereDate('taskDeadline', Carbon::today())->get();

        // $eventsData = TaskEvents::whereDate('eventDate', Carbon::today())->get();
         $eventsData = TaskEvents::where('user_id', $user->id)->whereDate('eventDate', Carbon::today())->get();



         $tasksall = Tasks::where('status', '!=', 'deleted')->where('user_id', $user->id)->get();
                // ->whereDate('taskDeadline', Carbon::today())->get();

        // $eventsData = TaskEvents::whereDate('eventDate', Carbon::today())->get();
        $eventsDataall = TaskEvents::where('user_id', $user->id)->get();



        // dd($eventsData);
        $upcomingevent = TaskEvents::whereDate('eventDate', '>=', Carbon::today())
        ->where('user_id', $user->id)
                    ->orderBy('eventDate', 'asc')
                    ->get();
                    // dd($upcomingevent);

                    $gstnocount = StoreGST::where('user_id', $user->id)->count();
$employeescount = StoreCompanyEmployee::where('user_id', $user->id)->count();
$directorcount = StoreCompanydirector::where('user_id', $user->id)->where('is_delete', 0)->count();
$progressPercentage = 0;

    // Check user attributes for 40%
    if (
        ($user->profile_picture != NULL) &&
        ($user->name_of_the_business != NULL) &&
        ($user->legal_entity != NULL) &&
        ($user->industry != NULL) &&
        ($user->state != NULL) &&
        ($user->backupemail != NULL) &&
        ($user->employees != NULL) &&
        ($user->phone != NULL)
    ) {
        $progressPercentage += 40; // Add 40%
    }
    
    // Check additional user attributes for 30%
    if (
        ($user->joining_date != NULL) &&
        ($user->PAN != NULL) &&
        ($user->CIN != NULL) &&
        ($user->authorized_capital != NULL) &&
        ($user->paid_up_capital != NULL)
    ) {
        $progressPercentage += 30; // Add 30%
    }
    
    // Check GST number count for 10%
    if ($gstnocount > 0) {
        $progressPercentage += 10; // Add 10%
    }
    
   

    if ($employeescount > 0) {
        $progressPercentage += 10; // Add 10%
    }
    if ($directorcount > 0) {
        $progressPercentage += 10; // Add 10%
    }

    return view('user.dashboard.index', [
        'user' => $user,
        'policy' => $policy,
        'clientdata' => $clientdata,
        'cli_announcements' => $cli_announcements,
        'events' => $events,
        'tasks' => $tasks,
        'userRoleRecord' => $userRoleRecord,
        'currentDate' => $currentDate,
        'eventsData' => $eventsData,
        'progressPercentage' => $progressPercentage,
        'tasksall' => $tasksall,
        'eventsDataall' => $eventsDataall,
        'upcomingevent' => $upcomingevent
    ]);

} else {
    // Handle cases where the role doesn't match any record in UserRole
    return redirect('/unauthorized'); // Example: redirect to an unauthorized page
}
    
    }
    
    
public function saveFeedback(Request $request)
{
    $user = auth()->user();
    $userId = Auth::id();

    $request->validate([
        'textarea' => 'required|string|max:1000', 
    ]);

    // Initialize file-related variables as null
    $filePath = null;
    $fileName = null;
    $fileType = null;

    if ($request->hasFile('file')) {
        $file = $request->file('file');
        $fileName = time() . '_' . $file->getClientOriginalName();
        $filePath = $file->storeAs('uploads/Feedbacks', $fileName);
        $fileType = $file->getClientMimeType();
    }

    $feedback = new Feedback();
    $feedback->user_id = $userId;
    $feedback->role = $user->role;
    $feedback->feedback_message = $request->textarea;
    $feedback->real_file_name = $fileName;
    $feedback->file_type = $fileType;
    $feedback->file_path = $filePath;
    $feedback->status = 0;

    if ($feedback->save()) {
        return response()->json(['success' => 'Feedback submitted successfully. We will get back to you!']);
    } else {
        return response()->json(['error' => 'Something went wrong!']);
    }
}


    
    
   
    
    
    
    
    public function addTask(Request $request){
     
     $validatedData = $request->validate([
        'taskName' => 'required|string|max:255',
        'taskDeadline' => "required",
        'assignto' => 'required|string|max:255',
        'eventnote' => 'required|string|max:500',
    ]);
$user = auth()->user();
        $userId = Auth::id();
    $task = new Tasks();
    $task->user_id =  $userId;
    $task->taskName = $validatedData['taskName'];
    $task->taskDeadline = $validatedData['taskDeadline'];
    $task->assignto = $validatedData['assignto'];
    $task->eventnote = $validatedData['eventnote'];
    $task->status="pending";

    if ($task->save()) {
        // $tasksData = Tasks::all();
        $tasksData = Tasks::where('status', '!=', 'deleted')
                            ->whereDate('taskDeadline', Carbon::today())->get();

        return response()->json(['tasks' => $tasksData,'success' => 'Task created successfully'],200);
        //   return redirect()->back()->with('success', 'Task created successfully');
    } else {
        return response()->json(['error' => 'Something went wrong'],422);
        // return redirect()->back()->with('error', 'Somewthing went wrong');
    }
}
public function editTask(Request $request) {
    $validatedData = $request->validate([
        'task_id' => 'required|integer',
        'taskName' => 'required|string|max:255',
        'taskDeadline' => 'required|date',
        'assignto' => 'required|string|max:255',
        'eventnote' => 'nullable|string'
    ]);

    // Fetch the task by ID and update its values
    $task = Tasks::find($request->task_id);
    if ($task) {
        $task->taskName = $request->taskName;
        $task->taskDeadline = $request->taskDeadline;
        $task->assignto = $request->assignto;
        $task->eventnote = $request->eventnote;
        $task->save();

        return response()->json(['success' => 'Task updated successfully.']);
    } else {
        return response()->json(['error' => 'Task not found.'], 404);
    }
}
public function deleteTask($id)
{
    $task = Tasks::find($id);

    if ($task) {
        $task->delete();
        return response()->json(['success' => 'Task deleted successfully.']);
    }

    return response()->json(['error' => 'Task not found.'], 404);
}


public function deleteeventTask($id){
    $task = TaskEvents::find($id);

    if ($task) {
        $task->delete();
        return response()->json(['success' => 'Task deleted successfully.']);
    }

    return response()->json(['error' => 'Task not found.'], 404);
}

// public function getTaskData(){
//     $tasks = Tasks::all();
//     // dd($tasks);
//     return response()->json(['tasks' => $tasks],200);
// }

public function updateTask(Request $request){
 
    // Get the task ID from the AJAX request
    // $taskId=2;
    $taskId = $request->input('task_id');
    // print_r($taskId);
    // dd($request);
    
    // dd($taskId);
    
    $validatedData = $request->validate([
        'taskName' => 'required|string|max:255',
        'taskDeadline' => "required",
        'assignto' => 'required|string|max:255',
        'eventnote' => 'required',
    ]);

    $task = new Tasks();
    $task->taskName = $validatedData['taskName'];
    $task->taskDeadline = $validatedData['taskDeadline'];
    $task->assignto = $validatedData['assignto'];
    $task->eventnote = $validatedData['eventnote'];

    // Update the status in the database
    
    
    $updated = Tasks::where('id', $taskId)
            ->update([
                'taskName' => $task->taskName,
                'taskDeadline' => $task->taskDeadline,
                'assignto' => $task->assignto,
                'eventnote' => $task->eventnote
            ]);

            // Check if the update was successful
            if ($updated) {
                // echo 'Task updated successfully!';
                //  $tasksData = Tasks::where('status', '!=', 'deleted')->get();
                 return redirect()->back()->with('success', 'Task updated successfully');
                // return response()->json(['tasks' => $tasksData,'success' => 'Task Updated successfully'],200);
                // return response()->json(['message' => 'Task is updated !!!']);
            } else {
                // echo 'Failed to update task.';
                
                // $tasksData = Tasks::where('status', '!=', 'deleted')->get();
                return redirect()->back()->with('error', 'Something Went Wrong !!!');
                // return response()->json(['tasks' => $tasksData,'error' => 'Something Went Wrong'],422);
                // return response()->json(['message' => 'Something went wrong!!!']);
              }

        // if($task->save()){
        //  $tasksData = Tasks::where('status', '!=', 'deleted')->get();

        // return response()->json(['tasks' => $tasksData,'success' => 'Task Updated successfully'],200);
        // // return response()->json(['message' => 'Status : Task is Pending !!!']);
    
        // }
        // else{
        //     return response()->json(['message' => 'Status : Something Went wrong !!!']);
        // }
}

public function getTaskWithDate(Request $request)
{
    // dd($request);
    $user = auth()->user();
    $user_id = $user->id;
    
    $taskDate = $request->input('eventDate');
    
    try {
        // Find the task by Date
        //   $tasks = Tasks::where('status', '!=', 'deleted')->where('user_id', $user->id)->get();

    // $tasks = Tasks::where('status', '!=', 'deleted')->where('user_id', $user->id)->whereDate('taskDeadline', $taskDate)->get();
    $tasks = Tasks::where('status', '!=', 'deleted')
    ->where('user_id', $user_id)
    ->whereDate('taskDeadline', $taskDate)
    ->get();


        //  $tasksData = Tasks::where('status', '!=', 'deleted')
        //                     ->where('user_id', $user_id)
        //                     ->whereDate('taskDeadline', $taskDate)->get();
        // dd($tasksData);
                            
        return response()->json(['tasks' => $tasks,'success' => 'Task Fetched successfully'],200);

        // Return JSON response with task data
        // return response()->json([
        //     'success' => true,
        //     'task' => [
        //         'taskName' => $task->taskName,
        //         'taskDeadline' => $task->taskDeadline,
        //         'assignto' => $task->assignto,
        //         'eventnote' => $task->eventnote,
        //     ]
        // ]);
    } catch (\Exception $e) {
        // Handle exception and return error response
        return response()->json([
            'success' => false,
            'error' => 'Task not found.'
        ], 404);
    }
}
public function storegst(Request $request)
{
    // Validate the incoming request data
    $messages = [
        'add_gstt.unique' => 'This GST number already exists. Please provide a unique GST number.',
    ];

    // Validate the incoming request data
    $validatedData = $request->validate([
        'user_id' => 'required|exists:users,id', // Ensure the user exists
        'statee_new' => 'required|string|max:255',
        'add_gstt' => 'required|string|max:255|unique:store_gst,add_gstt', // Ensure GSTIN is unique
    ], $messages);

    // Create a new StoreGST record
    $storeGst = StoreGST::create([
        'user_id' => $validatedData['user_id'],
        'statee_new' => $validatedData['statee_new'],
        'add_gstt' => $validatedData['add_gstt'],
    ]);

    // Return a success response (optional)
    return response()->json([
        'message' => 'GST details stored successfully!',
        'data' => $storeGst,
    ]);
}
public function updateGST(Request $request)
{
    $request->validate([
        'statee_new' => 'required|string',
        'add_gstt' => 'required|string',
        // Add any other validation rules as needed
    ]);

    // Find the GST record by ID and update it
    $gst = StoreGST::find($request->gst_id);
    $gst->statee_new = $request->statee_new;
    $gst->add_gstt = $request->add_gstt;
    // Update other fields if necessary
    $gst->save();

    // Redirect back with a success message
    return redirect()->back()->with('success', 'GST details updated successfully.');
}

public function deleteGST($id)
{
    // Find the record by ID and delete
    $gst = StoreGST::find($id);
    
    if ($gst) {
        $gst->delete();
        return response()->json(['message' => 'GST record deleted successfully.'], 200);
    }
    
    return response()->json(['message' => 'GST record not found.'], 404);
}
public function storecompanydirector(Request $request)
{
    // Validate input
    $validatedData = $request->validate([
        'name' => 'required|string|max:255',
        'startdate' => 'required|date',
        'enddate' => 'nullable|date',
        'DIN' => 'required|string|max:50',
        'path' => 'nullable|string',
        'parent_name' => 'nullable|string',
    ]);

    $userId = Auth::id(); // Get authenticated user ID
    $name = $request->name;

    // Get current year and month
    $currentYear = now()->year;
    $currentMonth = now()->format('F'); // Full month name (e.g., 'June')
    
    // Determine fiscal year
    if (now()->month < 4) {
        // Before April, fiscal year is previous year - current year
        $fiscalYear = ($currentYear - 1) . '-' . $currentYear;
    } else {
        // Otherwise, current year - next year
        $fiscalYear = $currentYear . '-' . ($currentYear + 1);
    }

    // Generate new folder name
    $new_folderName = $fiscalYear . $currentMonth . $userId . "_" . $name;

    // Define the parent folder path
    // $parentFolderPath = "Accounting & Taxation/Charter documents/Director Details";
    $parentFolderPath = "2024-2025November301_Accounting & Taxation/2024-2025November301_Charter Documents/2024-2025November301_Director Details";
    

    // Combine parent folder path with new folder name
    $newFolderPath = $parentFolderPath . '/' . $new_folderName;

    // Check if folder already exists
    if (Storage::exists($newFolderPath)) {
        return redirect()->back()->with('error', 'Same Name already exists.');
    }

    // Create a new StoreCompanyDirector record
    $storedir = StoreCompanydirector::create([
        'user_id' => $userId,
        'name' => $request->name,
        'startdate' => $request->startdate,
        'enddate' => $request->enddate,
        'DIN' => $request->DIN,
        'path' => $newFolderPath,
        'parent_name' => $parentFolderPath,
    ]);

    // Create the directory
    Storage::makeDirectory($newFolderPath);
    $DIR_real_file_name=["Photo","Signature image","Aadhar KYC","PAN KYC","Address Proof"];

    // Create a new Folder record and associate the director ID
    $folder = new Folder();
    $folder->name = $new_folderName;
    $folder->path = $newFolderPath;
    $folder->parent_name = $parentFolderPath;
    $folder->user_id = $userId;
    $folder->director_id = $storedir->id;  // Store the last inserted director ID
    $folder->real_file_name = json_encode($DIR_real_file_name); // Convert to JSON before saving

    $folder->save();

    // Redirect back with a success message
    return redirect()->back()->with('success', 'Director details stored successfully!');
}

public function updatecompanydirector(Request $request)
{
    // Find the director record by ID
    $dir = StoreCompanydirector::find($request->dir_id);

    // Update director details
    // Save updated director information

    // Find the corresponding folder record
    $folder = Folder::where('director_id', $dir->id)->first();

    if ($folder) {
        // Get the current folder name and path
        $currentFolderPath = $folder->path;

        // Generate new folder name and path
        $currentYear = now()->year;
        $currentMonth = now()->format('F'); // Full month name (e.g., 'June')
        
        // Determine fiscal year
        if (now()->month < 4) {
            $fiscalYear = ($currentYear - 1) . '-' . $currentYear;
        } else {
            $fiscalYear = $currentYear . '-' . ($currentYear + 1);
        }

        // Generate new folder name
        $new_folderName = $fiscalYear . $currentMonth . Auth::id() . "_" . $request->f_name;
        $newFolderPath = "2024-2025November301_Accounting & Taxation/2024-2025November301_Charter Documents/2024-2025November301_Director Details/" . $new_folderName;

        // Check if the folder name has changed
        if ($currentFolderPath !== $newFolderPath) {
            // Rename the directory in the file system
            if (Storage::exists($currentFolderPath)) {
                Storage::move($currentFolderPath, $newFolderPath); // Move/rename directory
            }

            // Update folder record with the new name and path
            $folder->name = $new_folderName;
            $folder->path = $newFolderPath;
            $folder->save();
        }
        $dir->name = $request->f_name;
    $dir->startdate = $request->startdate;
    $dir->enddate = $request->enddate;
    $dir->DIN = $request->DIN;
    $dir->path = $newFolderPath;
    $dir->save(); 
    }

    // Redirect back with a success message
    return redirect()->back()->with('success', 'Director details updated successfully, and folder renamed if necessary.');
}

public function updatedirstatus(Request $request)
{
    $request->validate([
        'id' => 'required|integer',
        
    ]);

    // Update the is_delete status in storecompanydirector
    StoreCompanyDirector::where('id', $request->id)
        ->update(['is_delete' => 1]);

    // Update the is_delete status in folder
    Folder::where('director_id', $request->id)
        ->update(['is_delete' => 1]);

    return response()->json(['success' => true]);
}
public function storecompanyemployee(Request $request)
{
    // Custom validation messages
    $messages = [
        'emp_code.unique' => 'This Employee Code already exists. Please provide a unique Employee Code.',
    ];

    // Validate request data
    $validatedData = $request->validate([
        'name' => 'required|string|max:255',
        'app_dates' => 'required|date',
        'termi_dates' => 'nullable|date',
        'emp_code' => 'required|string|max:50|unique:store_company_employee,emp_code',
    ], $messages);

    $userId = Auth::id();

    // Create a new StoreCompanyEmployee record
    $storeemp = StoreCompanyEmployee::create([
        'user_id' => $userId,
        'name' => $request->name,
        'app_date' => $request->app_dates,
        'termi_date' => $request->termi_dates,
        'emp_code' => $request->emp_code,
    ]);

    // Generate the prefix for folder names
    $currentYear = now()->year;
    $currentMonth = now()->format('F');
    $uniqueId = Auth::id();
    $fiscalYear = now()->month < 4 ? ($currentYear - 1) . '-' . $currentYear : $currentYear . '-' . ($currentYear + 1);
    
    $hrPrefix = "{$fiscalYear}{$currentMonth}0_";
    $otherPrefix ="{$fiscalYear}{$currentMonth}{$uniqueId}_";

    // Define Human Resources folder path with prefix
    $hrFolderPath = "{$hrPrefix}Human Resources";

    // Ensure HR folder exists
    if (!Storage::exists($hrFolderPath)) {
        Storage::makeDirectory($hrFolderPath);
        Folder::create([
            'name' => basename($hrFolderPath),
            'path' => $hrFolderPath,
            'parent_name' => null,
            'user_id' => $userId,
            'common_folder' => 1,
        ]);
    }

    // Define main and non-fixed folders with their subfolders
    $fixedFolders = [
        'Employee Database' => [],
        'Pay Registers' => ['Monthly Payrun', 'Reimbursements', 'Salary Slips'],
        'Policies & Handbook' => [
            'Leave policy',
            'Attendance policy',
            'Reimbursement policy',
            'Organisation Chart',
            'Code of conduct',
            'Health Insurance',
            'Asset Allocation & Usage Policy'
        ],
    ];

    // Real file names for specific folders
    $realFileNames = [
        'Onboarding documents' => ["Offer Letter", "Acceptance Letter", "Employment Agreement", "Non Disclosure Agreement", "Non-compete", "Contractual Bond", "Form 11 - EPF", "Form 12BB - Income Tax"],
        'KYC Documents' => ["Photo", "Aadhar KYC", "PAN KYC", "Address Proof", "Contact Details"],
        'Offboarding' => ["Resignation letter", "Experience Letter", "No Dues certificate", "Character certificate"],
        'ESOP' => ["Policy", "Grant Letters", "Acceptance Letters", "Nominations"],
        'Declarations' => ["Asset Declaration Forms", "Employee Master"],
        'Monthly Payrun' => ["Attendance log", "Variable pays", "Terminations/ Exits", "New Hires", "Pay Register"],
        'Reimbursements' => ["Reimbursement forms & Invoices", "Approvals"],
    ];

    // Create fixed folders with prefix
    foreach ($fixedFolders as $mainFolder => $subFolders) {
        $mainFolderPath = "{$hrFolderPath}/{$hrPrefix}{$mainFolder}";

        if (!Storage::exists($mainFolderPath)) {
            Storage::makeDirectory($mainFolderPath);
            Folder::create([
                'name' => "{$hrPrefix}{$mainFolder}",
                'path' => $mainFolderPath,
                'parent_name' => $hrFolderPath,
                'user_id' => $userId,
                'common_folder' => 1,
            ]);
        }

        foreach ($subFolders as $subFolder) {
            $subFolderPath = "{$mainFolderPath}/{$hrPrefix}{$subFolder}";

            if (!Storage::exists($subFolderPath)) {
                Storage::makeDirectory($subFolderPath);
                Folder::create([
                    'name' => "{$hrPrefix}{$subFolder}",
                    'path' => $subFolderPath,
                    'parent_name' => $mainFolderPath,
                    'user_id' => $userId,
                    'common_folder' => 1,
                ]);
            }
        }
    }

    // Create Employee Database folder with prefix
    $employeeDatabasePath = "{$hrFolderPath}/{$hrPrefix}Employee Database";
    if (!Storage::exists($employeeDatabasePath)) {
        Storage::makeDirectory($employeeDatabasePath);
        Folder::create([
            'name' => "{$hrPrefix}Employee Database",
            'path' => $employeeDatabasePath,
            'parent_name' => $hrFolderPath,
            'user_id' => $userId,
            'common_folder' => 1,
        ]);
    }

    // Create employee-specific folder with prefix
    $employeeFolderPath = "{$employeeDatabasePath}/{$otherPrefix}{$storeemp->name}";
    if (!Storage::exists($employeeFolderPath)) {
        Storage::makeDirectory($employeeFolderPath);
        Folder::create([
            'name' => "{$otherPrefix}{$storeemp->name}",
            'path' => $employeeFolderPath,
            'parent_name' => $employeeDatabasePath,
            'user_id' => $userId,
            'employee_id' => $storeemp->id,
            
        ]);
    }

    // Define non-fixed folders for the employee with prefix
    $employeeFolders = [
        'Onboarding documents',
        'KYC Documents',
        'Offboarding',
        'Reference Checks',
        'ESOP',
        'Declarations',
        'Appraisals' => [
            'Appraisals forms',
            'Management approvals',
            'KRAs and OKRs'
        ]
    ];

    // Create non-fixed folders and add files with prefix if defined
    foreach ($employeeFolders as $folder => $subFolders) {
        $folderName = is_string($folder) ? $folder : $subFolders;
        $folderPath = "{$employeeFolderPath}/{$otherPrefix}{$folderName}";

        if (!Storage::exists($folderPath)) {
            Storage::makeDirectory($folderPath);
            Folder::create([
                'name' => "{$otherPrefix}{$folderName}",
                'path' => $folderPath,
                'parent_name' => $employeeFolderPath,
                'user_id' => $userId,
                'employee_id' => $storeemp->id,
                'common_folder' => 1,
            ]);
        }

        // Check if the folder has predefined files to create with prefix
        if (isset($realFileNames[$folderName])) {
            foreach ($realFileNames[$folderName] as $fileName) {
                $filePath = "{$folderPath}/{$otherPrefix}{$fileName}.txt";  // Adjust extension if needed
                if (!Storage::exists($filePath)) {
                    Storage::put($filePath, "Placeholder content for {$fileName}");
                }
            }
        }

        // Create subfolders with prefix if applicable
        if (is_array($subFolders)) {
            foreach ($subFolders as $subFolder) {
                $subFolderPath = "{$folderPath}/{$otherPrefix}{$subFolder}";
                if (!Storage::exists($subFolderPath)) {
                    Storage::makeDirectory($subFolderPath);
                    Folder::create([
                        'name' => "{$otherPrefix}{$subFolder}",
                        'path' => $subFolderPath,
                        'parent_name' => $folderPath,
                        'user_id' => $userId,
                        'employee_id' => $storeemp->id,
                        'common_folder' => 1,
                    ]);
                }
            }
        }
    }

    return response()->json(['message' => 'All folders and files created successfully with prefixed names!']);
}






// public function updatecompanyemployee(Request $request)
// {
//     // Validate the incoming request
//     $request->validate([
//         'name' => 'required|string',
//         'app_date' => 'required|date',
//         'termi_date' => 'nullable|date',
//         'emp_code' => 'required|string',
//         'emp_id' => 'required|integer',  // Assuming this is passed
//     ]);

//     // Find the employee record by emp_id
//     $emp = StoreCompanyEmployee::find($request->emp_id);
    
//     if ($emp) {
//         // Backup the old employee name for later replacement in Folder data
//         $oldEmployeeName = $emp->name;

//         // Update the employee's details
//         $emp->name = $request->name;
//         $emp->app_date = $request->app_date;
//         $emp->termi_date = $request->termi_date;
//         $emp->emp_code = $request->emp_code;
//         $emp->save();

//         // Update Folder records where employee_id matches
//         $folders = Folder::where('employee_id', $request->emp_id)->get();

//         foreach ($folders as $folder) {
//             // Update folder name, path, and parent_name in the database
//             $folder->name = str_replace($oldEmployeeName, $request->name, $folder->name);
//             $folder->path = str_replace($oldEmployeeName, $request->name, $folder->path);
//             $folder->parent_name = str_replace($oldEmployeeName, $request->name, $folder->parent_name);
//             $folder->save();

//             // Update the folder in the storage if the folder path has changed
//             if (Storage::exists($folder->path)) {
//                 $newFolderPath = str_replace($oldEmployeeName, $request->name, $folder->path);
//                 if ($folder->path !== $newFolderPath) {
//                     // Rename the folder in the storage
//                     Storage::move($folder->path, $newFolderPath);
//                 }
//             }
//         }

//         // Redirect back with a success message
//         return redirect()->back()->with('success', 'Employee details and related folders updated successfully.');
//     } else {
//         // In case employee is not found
//         return redirect()->back()->with('error', 'Employee not found.');
//     }
// }
public function updatecompanyemployee(Request $request)
{
    // Validate the incoming request
    $request->validate([
        'name' => 'required|string',
        'app_date' => 'required|date',
        'termi_date' => 'nullable|date',
        'emp_code' => 'required|string',
        'emp_id' => 'required|integer',  // Assuming this is passed
    ]);

    // Find the employee record by emp_id
    $emp = StoreCompanyEmployee::find($request->emp_id);
    
    if ($emp) {
        // Backup the old employee name for replacement in Folder data
        $oldEmployeeName = $emp->name;
        $newEmployeeName = $request->name;

        // Update the employee's details
        $emp->name = $newEmployeeName;
        $emp->app_date = $request->app_date;
        $emp->termi_date = $request->termi_date;
        $emp->emp_code = $request->emp_code;
        $emp->save();

        // Fetch all folders associated with this employee that have the old name in any field
        $folders = Folder::where('employee_id', $request->emp_id)
            ->where(function ($query) use ($oldEmployeeName) {
                $query->where('name', 'like', '%' . $oldEmployeeName . '%')
                      ->orWhere('path', 'like', '%' . $oldEmployeeName . '%')
                      ->orWhere('parent_name', 'like', '%' . $oldEmployeeName . '%');
            })
            ->get();

        foreach ($folders as $folder) {
            // Replace oldEmployeeName with newEmployeeName in each relevant field
            $updated = false;
            if (strpos($folder->name, $oldEmployeeName) !== false) {
                $folder->name = str_replace($oldEmployeeName, $newEmployeeName, $folder->name);
                $updated = true;
            }
            if (strpos($folder->path, $oldEmployeeName) !== false) {
                // Update the storage if path needs changing
                $newFolderPath = str_replace($oldEmployeeName, $newEmployeeName, $folder->path);
                if (Storage::exists($folder->path)) {
                    Storage::move($folder->path, $newFolderPath);
                    // $folder->path = $newFolderPath;
                }
                $folder->path = $newFolderPath;
                $updated = true;
            }
            if (strpos($folder->parent_name, $oldEmployeeName) !== false) {
                $folder->parent_name = str_replace($oldEmployeeName, $newEmployeeName, $folder->parent_name);
                $updated = true;
            }
            
            // Save changes only if any field was updated
            if ($updated) {
                $folder->save();
            }
        }

        return redirect()->back()->with('success', 'Employee details and related folders updated successfully.');
    } else {
        return redirect()->back()->with('error', 'Employee not found.');
    }
}






public function delcompemp(Request $request)
{
    $empId = $request->emp_id;
    $folderName = $request->folder_name;
    StoreCompanyEmployee::where('id', $empId)
    ->update(['is_delete' => 1]);
    // Update the folder is_delete field
    $update = Folder::where('employee_id', $empId)
        ->where('name', 'like', '%' . $folderName . '%')
        ->update(['is_delete' => 1]);

    return response()->json([
        'status' => $update ? 'success' : 'error',
    ]);
}


public function downloadCsv()
{
    $user = auth()->user();
    $userId = Auth::id();// Fetch all employees
    $employees = StoreCompanyEmployee::where('user_id',$userId)->get();
    $filename = "employees.csv";

    // Set headers for the response
    $headers = [
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename="' . $filename . '"',
    ];

    // Use output buffering to capture the CSV output
    return response()->stream(function () use ($employees) {
        $handle = fopen('php://output', 'w');

        // Set the CSV headers
        fputcsv($handle, ['name', 'app_date', 'termi_date', 'emp_code']);

        foreach ($employees as $employee) {
            fputcsv($handle, [
                $employee->name,
                // "'" . \Carbon\Carbon::parse($employee->app_date)->format('Y-m-d'), // Prepend apostrophe
                // "'" . \Carbon\Carbon::parse($employee->termi_date)->format('Y-m-d'), // Prepend apostrophe
                \Carbon\Carbon::parse($employee->app_date)->format('Y-m-d'), // Format to YYYY-MM-DD
                \Carbon\Carbon::parse($employee->termi_date)->format('Y-m-d'), // Format to YYYY-MM-DD
                $employee->emp_code
            ]);
        }

        fclose($handle); // Close the handle after writing
    }, 200, $headers);
}






// public function uploadempcsv(Request $request)
// {
//     // Validate the uploaded CSV file
//     $validator = Validator::make($request->all(), [
//         'csv_file' => 'required|mimes:csv,txt|max:200048',
//     ]);

//     if ($validator->fails()) {
//         // Redirect back with validation errors
//         return redirect()->back()->withErrors($validator)->withInput();
//     }

//     // Get the authenticated user's ID
//     $userId = Auth::id();

//     // Get the uploaded file
//     $file = $request->file('csv_file');

//     // Open the CSV file for reading
//     $file_handle = fopen($file->getRealPath(), 'r');
    
//     // Skip the header row
//     $header = fgetcsv($file_handle); 

//     $employeesToInsert = [];
//     $existingEmpCodes = [];
//     $skippedRecords = 0;

//     // Process the CSV file row by row
//     while (($row = fgetcsv($file_handle, 1000, ",")) !== FALSE) {
//         $emp_code = $row[3];

//         // Check if the emp_code already exists in the database
//         if (StoreCompanyEmployee::where('emp_code', $emp_code)->exists()) {
//             // If the emp_code exists, increment the skipped record count
//             $skippedRecords++;
//         } else {
//             // If it's unique, prepare it for insertion
//             $employeesToInsert[] = [
//                 'user_id' => $userId,
//                 'name' => $row[0],
//                 'app_date' => \Carbon\Carbon::parse($row[1])->format('Y-m-d'), // Convert date to Y-m-d format
//                 'termi_date' => !empty($row[2]) ? \Carbon\Carbon::parse($row[2])->format('Y-m-d') : null,
//                 'emp_code' => $emp_code,
//                 'created_at' => now(), // Set the created_at timestamp
//                 'updated_at' => now(), // Set the updated_at timestamp
//             ];
//         }
//     }

//     fclose($file_handle);

//     // Insert only the unique employee records into the database
//     $storedRecords = count($employeesToInsert);
//     if ($storedRecords > 0) {
//         StoreCompanyEmployee::insert($employeesToInsert);
//     }

//     // Return a success message with the count of stored and skipped records
//     return redirect()->back()->with('success', "{$storedRecords} employees stored successfully and {$skippedRecords} duplicate employees were skipped.");
// }


public function uploadempcsv(Request $request)
{
    // Validate the uploaded CSV file
    $validator = Validator::make($request->all(), [
        'csv_file' => 'required|mimes:csv,txt|max:200048',
    ]);

    if ($validator->fails()) {
        return redirect()->back()->withErrors($validator)->withInput();
    }

    $userId = Auth::id();
    $file = $request->file('csv_file');
    $file_handle = fopen($file->getRealPath(), 'r');
    $header = fgetcsv($file_handle);

    $employeesToInsert = [];
    $skippedRecords = 0;

    while (($row = fgetcsv($file_handle, 1000, ",")) !== false) {
        $emp_code = $row[3];

        if (StoreCompanyEmployee::where('emp_code', $emp_code)->exists()) {
            $skippedRecords++;
        } else {
            $employeesToInsert[] = [
                'user_id' => $userId,
                'name' => $row[0],
                'app_date' => \Carbon\Carbon::parse($row[1])->format('Y-m-d'),
                'termi_date' => !empty($row[2]) ? \Carbon\Carbon::parse($row[2])->format('Y-m-d') : null,
                'emp_code' => $emp_code,
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }
    }

    fclose($file_handle);

    $storedRecords = 0;

    if (count($employeesToInsert) > 0) {
        // Insert employees and fetch their IDs
        StoreCompanyEmployee::insert($employeesToInsert);
        $storedRecords = count($employeesToInsert);

        // Fetch all newly inserted employees
        $newEmployees = StoreCompanyEmployee::whereIn('emp_code', array_column($employeesToInsert, 'emp_code'))->get();

        // Create folders for each employee
        foreach ($newEmployees as $employee) {
            $this->createFolderStructure($employee->name, $userId, $employee->id);
        }
    }

    return redirect()->back()->with('success', "{$storedRecords} employees stored successfully and {$skippedRecords} duplicate employees were skipped.");
}

/**
 * Create folder structure for the employee
 */
protected function createFolderStructure($employeeName, $userId, $employeeId)
{
   

    $currentYear = now()->year;
    $currentMonth = now()->format('F');
    $uniqueId = Auth::id();
    $fiscalYear = now()->month < 4 ? ($currentYear - 1) . '-' . $currentYear : $currentYear . '-' . ($currentYear + 1);
    
    $hrPrefix = "{$fiscalYear}{$currentMonth}0_";
    $otherPrefix ="{$fiscalYear}{$currentMonth}{$uniqueId}_";

    // Define Human Resources folder path with prefix
    $hrFolderPath = "{$hrPrefix}Human Resources";

    // Ensure HR folder exists
    if (!Storage::exists($hrFolderPath)) {
        Storage::makeDirectory($hrFolderPath);
        Folder::create([
            'name' => basename($hrFolderPath),
            'path' => $hrFolderPath,
            'parent_name' => null,
            'user_id' => $userId,
            'common_folder' => 1,
        ]);
    }

    // Define main and non-fixed folders with their subfolders
    $fixedFolders = [
        'Employee Database' => [],
        'Pay Registers' => ['Monthly Payrun', 'Reimbursements', 'Salary Slips'],
        'Policies & Handbook' => [
            'Leave policy',
            'Attendance policy',
            'Reimbursement policy',
            'Organisation Chart',
            'Code of conduct',
            'Health Insurance',
            'Asset Allocation & Usage Policy'
        ],
    ];

    // Real file names for specific folders
    $realFileNames = [
        'Onboarding documents' => ["Offer Letter", "Acceptance Letter", "Employment Agreement", "Non Disclosure Agreement", "Non-compete", "Contractual Bond", "Form 11 - EPF", "Form 12BB - Income Tax"],
        'KYC Documents' => ["Photo", "Aadhar KYC", "PAN KYC", "Address Proof", "Contact Details"],
        'Offboarding' => ["Resignation letter", "Experience Letter", "No Dues certificate", "Character certificate"],
        'ESOP' => ["Policy", "Grant Letters", "Acceptance Letters", "Nominations"],
        'Declarations' => ["Asset Declaration Forms", "Employee Master"],
        'Monthly Payrun' => ["Attendance log", "Variable pays", "Terminations/ Exits", "New Hires", "Pay Register"],
        'Reimbursements' => ["Reimbursement forms & Invoices", "Approvals"],
    ];

    // Create fixed folders with prefix
    foreach ($fixedFolders as $mainFolder => $subFolders) {
        $mainFolderPath = "{$hrFolderPath}/{$hrPrefix}{$mainFolder}";

        if (!Storage::exists($mainFolderPath)) {
            Storage::makeDirectory($mainFolderPath);
            Folder::create([
                'name' => "{$hrPrefix}{$mainFolder}",
                'path' => $mainFolderPath,
                'parent_name' => $hrFolderPath,
                'user_id' => $userId,
                'common_folder' => 1,
            ]);
        }

        foreach ($subFolders as $subFolder) {
            $subFolderPath = "{$mainFolderPath}/{$hrPrefix}{$subFolder}";

            if (!Storage::exists($subFolderPath)) {
                Storage::makeDirectory($subFolderPath);
                Folder::create([
                    'name' => "{$hrPrefix}{$subFolder}",
                    'path' => $subFolderPath,
                    'parent_name' => $mainFolderPath,
                    'user_id' => $userId,
                    'common_folder' => 1,
                ]);
            }
        }
    }

    // Create Employee Database folder with prefix
    $employeeDatabasePath = "{$hrFolderPath}/{$hrPrefix}Employee Database";
    if (!Storage::exists($employeeDatabasePath)) {
        Storage::makeDirectory($employeeDatabasePath);
        Folder::create([
            'name' => "{$hrPrefix}Employee Database",
            'path' => $employeeDatabasePath,
            'parent_name' => $hrFolderPath,
            'user_id' => $userId,
            'common_folder' => 1,
        ]);
    }

    // Create employee-specific folder with prefix
    $employeeFolderPath = "{$employeeDatabasePath}/{$otherPrefix}{$employeeName}";
    if (!Storage::exists($employeeFolderPath)) {
        Storage::makeDirectory($employeeFolderPath);
        Folder::create([
            'name' => "{$otherPrefix}{$employeeName}",
            'path' => $employeeFolderPath,
            'parent_name' => $employeeDatabasePath,
            'user_id' => $userId,
            'employee_id' => $employeeId,
            
        ]);
    }

    // Define non-fixed folders for the employee with prefix
    $employeeFolders = [
        'Onboarding documents',
        'KYC Documents',
        'Offboarding',
        'Reference Checks',
        'ESOP',
        'Declarations',
        'Appraisals' => [
            'Appraisals forms',
            'Management approvals',
            'KRAs and OKRs'
        ]
    ];

    // Create non-fixed folders and add files with prefix if defined
    foreach ($employeeFolders as $folder => $subFolders) {
        $folderName = is_string($folder) ? $folder : $subFolders;
        $folderPath = "{$employeeFolderPath}/{$otherPrefix}{$folderName}";

        if (!Storage::exists($folderPath)) {
            Storage::makeDirectory($folderPath);
            Folder::create([
                'name' => "{$otherPrefix}{$folderName}",
                'path' => $folderPath,
                'parent_name' => $employeeFolderPath,
                'user_id' => $userId,
                'employee_id' => $employeeId,
                'common_folder' => 1,
            ]);
        }

        // Check if the folder has predefined files to create with prefix
        if (isset($realFileNames[$folderName])) {
            foreach ($realFileNames[$folderName] as $fileName) {
                $filePath = "{$folderPath}/{$otherPrefix}{$fileName}.txt";  // Adjust extension if needed
                if (!Storage::exists($filePath)) {
                    Storage::put($filePath, "Placeholder content for {$fileName}");
                }
            }
        }

        // Create subfolders with prefix if applicable
        if (is_array($subFolders)) {
            foreach ($subFolders as $subFolder) {
                $subFolderPath = "{$folderPath}/{$otherPrefix}{$subFolder}";
                if (!Storage::exists($subFolderPath)) {
                    Storage::makeDirectory($subFolderPath);
                    Folder::create([
                        'name' => "{$otherPrefix}{$subFolder}",
                        'path' => $subFolderPath,
                        'parent_name' => $folderPath,
                        'user_id' => $userId,
                        'employee_id' => $employeeId,
                        'common_folder' => 1,
                    ]);
                }
            }
        }
    }
}



public function getEventWithDate(Request $request)
{
    // dd($request);
    $user = auth()->user();
    $user_id = $user->id;
    // dd($user_id);
    
     $eventDate = $request->input('eventDate');
    
    try {
        // Find the task by Date
        $eventsData = TaskEvents::where('user_id', $user_id)
        ->whereDate('eventDate', $eventDate)
        ->get();
                            
        return response()->json(['taskEvents' => $eventsData,'success' => 'Event Fetched successfully'],200);

    } catch (\Exception $e) {
        // Handle exception and return error response
        return response()->json([
            'success' => false,
            'error' => 'Event not found.'
        ], 404);
    }
}


public function addEvents(Request $request){
    
     $validatedData = $request->validate([
        'eventName' => 'required|string|max:255',
        'eventDate' => "required",
        'repeat' => 'required',
        'eventType' => 'required',
    ]);

$user = auth()->user();
$user_id = $user->id;
    $event = new TaskEvents();
    $event->user_id = $user_id;
    $event->eventName = $validatedData['eventName'];
    $event->eventDate = $validatedData['eventDate'];
    $event->eventRepeat = $validatedData['repeat'];
    $event->eventType = $validatedData['eventType'];

    if ($event->save()) {
        $eventsData = TaskEvents::whereDate('eventDate', Carbon::today())->get();

        return response()->json(['taskEvents' => $eventsData,'success' => 'Event created successfully'],200);
        //   return redirect()->back()->with('success', 'Task created successfully');
    } else {
        return response()->json(['error' => 'Something went wrong'],422);
        // return redirect()->back()->with('error', 'Somewthing went wrong');
    }
}
public function editEvents(Request $request) {

    // dd($request);
    

    // Fetch the task by ID and update its values
    $task = TaskEvents::find($request->event_id);
    if ($task) {
        $task->eventName = $request->eventName;
        $task->eventDate = $request->eventDate;
        $task->eventRepeat = $request->repeat;
        $task->eventType = $request->eventType;
        $task->save();

        return response()->json(['success' => 'Event updated successfully.']);
    } else {
        return response()->json(['error' => 'Event not found.'], 404);
    }
}
// public function updateEvents(Request $request){
    
//      $validatedData = $request->validate([
//         'eventName' => 'required|string|max:255',
//         'eventDate' => "required",
//         'repeat' => 'required',
//         'eventType' => 'required',
//     ]);

// }

public function updateEvents(Request $request){
    
    $eventId = $request->input('event_id');
    // print_r($eventId);
    // print_r($request);
    // dd($eventId);
    
    $validatedData = $request->validate([
        'eventName' => 'required|string|max:255',
        'eventDate' => "required",
        'repeat' => 'required',
        'eventType' => 'required',
    ]);

    $event = new TaskEvents();
    $event->eventName = $validatedData['eventName'];
    $event->eventDate = $validatedData['eventDate'];
    $event->eventRepeat = $validatedData['repeat'];
    $event->eventType = $validatedData['eventType'];

    // Update the status in the database
    
    
    $updated = TaskEvents::where('id', $eventId)
            ->update([
                'eventName' => $event->eventName,
                'eventDate' => $event->eventDate,
                'eventRepeat' => $event->eventRepeat,
                'eventType' => $event->eventType
            ]);

            // Check if the update was successful
            if ($updated) {
                // echo 'Task updated successfully!';
                //  $tasksData = TaskEvents::where('status', '!=', 'deleted')->get();
                 return redirect()->back()->with('success', 'Event updated successfully');
                // return response()->json(['tasks' => $tasksData,'success' => 'Task Updated successfully'],200);
                // return response()->json(['message' => 'Task is updated !!!']);
            } else {
                // echo 'Failed to update task.';
                
                // $tasksData = TaskEvents::where('status', '!=', 'deleted')->get();
                return redirect()->back()->with('error', 'Something Went Wrong !!!');
                // return response()->json(['tasks' => $tasksData,'error' => 'Something Went Wrong'],422);
                // return response()->json(['message' => 'Something went wrong!!!']);
              }

}



public function getTaskEvents(){
    $taskEvents = TaskEvents::whereDate('eventDate', Carbon::today())->get();
    // dd($tasks);
    return response()->json(['taskEvents' => $taskEvents],200);
}

public function updateTaskStatus(Request $request)
{
    // Get the task ID from the AJAX request
    $taskId = $request->input('task_id');

    // Update the status in the database
    $task = Tasks::find($taskId);
    if($task->status=='completed'){
        $task->status = 'pending';
        $task->save();
         $tasksData = Tasks::where('status', '!=', 'deleted')
         ->whereDate('taskDeadline', Carbon::today())->get();

        return response()->json(['tasks' => $tasksData,'success' => 'Status Changed successfully'],200);
        // return response()->json(['message' => 'Status : Task is Pending !!!']);
    }
    else if($task->status=='pending'){
        $task->status = 'completed';
        $task->save();
         $tasksData = Tasks::where('status', '!=', 'deleted')
         ->whereDate('taskDeadline', Carbon::today())->get();
         
        return response()->json(['tasks' => $tasksData,'success' => 'Status Changed successfully'],200);
        // return response()->json(['message' => 'Status : Task is Completed !!!']);

    }
    else{
        return response()->json(['message' => 'Status : Something Went wrong !!!']);

    }
    // Return a response to the AJAX request
    // return response()->json(['message' => 'Status : Task Completed successfully']);
}
    


public function deleteTaskStatus(Request $request){
    $taskId = $request->input('task_id');

    // Update the status in the database
    $task = Tasks::find($taskId);
    if($task->status=='completed' || $task->status = 'pending'){
        $task->status = 'deleted';
        $task->save();
        $tasksData = Tasks::where('status', '!=', 'deleted')->whereDate('taskDeadline', Carbon::today())->get();

        return response()->json(['tasks' => $tasksData,'success' => 'Task deleted successfully'],200);
        // return response()->json(['message' => 'Status : Task is Deleted Successfully !!!']);
    }
    else{
        return response()->json(['message' => 'Status : Something Went wrong !!!']);

    }

}
    public function updateStatusrole(Request $request, $id)
{
    // dd($request);
    $role = UserRole::find($id);

        
        if ($role) {
            // Update the is_delete field in the User model
         
        $role->is_deleted = $request->is_deleted; // Update the is_deleted status
        $role->save(); 

            return response()->json(['success' => true]);
        }

        return response()->json(['success' => false]);
}
public function deleteUser($id)
    {
        // Find the user by ID
        $user = User::find($id);
        
        if ($user) {
            // Update the is_delete field in the User model
            $user->is_delete = 0;
            $user->save();

            // Update the userinfo table where user_id matches the given ID
            DB::table('user_infos')
                ->where('user_id', $id)
                ->update(['is_delete' => 0]);

            return response()->json(['success' => true]);
        }

        return response()->json(['success' => false]);
    }
public function fetchUsers(Request $request)
{
    $user = auth()->user();
    $role = $request->input('role');

    // Fetch users based on the role
  $users = User::where('role', $role)
             ->whereNull('is_delete')
             ->where('createdby_id', $user->id)
             ->get();

// $role_id = $request->input('role_id');
//     $role_name = $request->input('role_name');

//     // Fetch users with matching main_role_id and role
//     $users = User::where('main_role_id', $role_id)
//                  ->where('role', $role_name)
//                  ->get();

    // Return a JSON response with the fetched users
    return response()->json([
        'success' => true,
        'users' => $users
    ]);
}
public function updateMembers(Request $request)
{
    $request->validate([
        'mem_id' => 'required|exists:users,id',
        'fname' => 'required|string',
        'email' => 'required|email',
       
        'phone' => 'required|string',
        'personal_email_id' => 'required|email',
        'Role' => 'required|string',
        'profile_picture' => 'nullable|image|max:2048', // Optional, but limits the file type and size
    ]);

    // Update User table
    $user = User::findOrFail($request->mem_id);
    $user->name = $request->fname;
    $user->email = $request->email;
   
    $user->phone = $request->phone;
    $user->personal_email_id = $request->personal_email_id;
    $user->role = $request->Role;

    // Handle profile picture upload
    if ($request->hasFile('profile_picture')) {
        $file = $request->file('profile_picture');
        $fileName = time() . '_' . $file->getClientOriginalName();
        
        // Move the file to the public/uploads/profile_images directory
        $file->move(public_path('uploads/profile_images'), $fileName);
        
        // Store the file path in the profile_picture field in the User table
        $user->profile_picture =  'uploads/profile_images/' . $fileName;
    }

    $user->save();

    // Update UserInfo table
    $userInfoData = [
        'name' => $request->fname,
        'email' => $request->email,
        
        'phone' => $request->phone,
        'personal_email_id' => $request->personal_email_id,
        'role' => $request->Role,
    ];

    // Update profile picture in UserInfo table
    if ($request->hasFile('profile_picture')) {
        $userInfoData['profile_picture'] = 'uploads/profile_images/' . $fileName;
    }

    UserInfo::where('user_id', $user->id)->update($userInfoData);

    // Update Member table (assuming it has a similar structure to User and UserInfo tables)
    $member = Member::where('emp_id', $user->id)->first(); // Assuming there's a relationship
    if ($member) {
        $member->fname = $request->fname;
        $member->email = $request->email;
        $member->phone = $request->phone;
        $member->personal_email_id = $request->personal_email_id;
        $member->role = $request->Role;

        // Update profile picture in the members table
        if ($request->hasFile('profile_picture')) {
            $member->profile_picture =  'uploads/profile_images/' . $fileName;
        }

        $member->save();
    }

    return redirect()->back()->with('success', 'User information and member profile updated successfully.');
}



    public function userrolenotification()
    {
         $roles = UserRole::pluck('role')->toArray(); // Get an array of all roles

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table

// Check if the user's role exists in the roles array
$user = auth()->user();

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table

// Find the UserRole record where the role matches the user's role
$userRoleRecord = UserRole::where('role', $userRole)->first();
       return view('user.include.header-details',[
        'user' => $user]);
    }
    
    public function usertrashnotification()
    {
         $roles = UserRole::pluck('role')->toArray(); // Get an array of all roles

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table

// Check if the user's role exists in the roles array
$user = auth()->user();

// Get the user's role from the users table
$userRole = $user->role; // Ensure 'role' field exists in the users table

// Find the UserRole record where the role matches the user's role
$userRoleRecord = UserRole::where('role', $userRole)->first();
       return view('user.include.client-sidebar',[
        'user' => $user]);
    }
    
    
//     public function downloadCommonFile($id)
// {
//     // $userId = Auth::id(); 
//     // $file = CommonTable::findOrFail($id);
//     $userId = Auth::id();
//     $file = CommonTable::where('id', $id)
//                    ->where('user_id', $userId)
//                    ->firstOrFail();

    
//     // Assuming you store the file path in a 'file_path' column
//     $filePath = $file->file_path;
//     $fileName = basename($filePath);
//     // $realfileName = $file->file_name;
    
//     if (Storage::exists($filePath)) {
//         return Storage::download($filePath);
//     } else {
//         return redirect()->back()->with('error', 'File not found.');
//     }
    
// }

public function downloadCommonFile($id)
{
    // $file = CommonTable::findOrFail($id); // Replace with your model
    // dd($file);
    $userId = Auth::id();
    $file = CommonTable::where('id', $id)
                   ->where('user_id', $userId)
                   ->where('is_delete', 0)
                   ->firstOrFail();

    $filePath = storage_path("app/{$file->file_path}");
    // dd($filePath);

    if (!file_exists($filePath)) {
        abort(404, 'File not found');
        return response()->json(['error' => 'File Not Found']);
    }
    return response()->download($filePath, $file->file_name);
}

public function softdeleteCommonFile($id)
{
    $file = CommonTable::findOrFail($id);
    if($file->is_delete == 0){
        $file->is_delete = 1; // Or set to a specific value like 0 or 1
        $file->save();
        return response()->json(['success' => 'File Moved to Bin']);
        // return redirect()->back()->with('success', 'File Moved to Trash.');
    }
     else {
        return response()->json(['error' => 'File Not Found']);
        // return redirect()->back()->with('error', 'File not Found.');
    }
    
}

public function deleteCustomFile($id)
{
    $file = CommonTable::findOrFail($id);
    if($file->is_delete == 0){
        $file->is_delete = 1; // Or set to a specific value like 0 or 1
        $file->save();
        return response()->json(['success' => 'File Moved to Bin']);
        // return redirect()->back()->with('success', 'File Moved to Trash.');
    }
     else {
        return response()->json(['error' => 'File Not Found , Something Went Wrong!!!']);
        // return redirect()->back()->with('error', 'File not Found.');
    }
}

public function loadFolderSession()
    {
        $folderPath = Session::get('folderPath');
        $folderContents = Session::get('folderContents');
        $fileContents = Session::get('fileContents');

        return response()->json([
            'folderPath' => $folderPath,
            'folderContents' => $folderContents,
            'fileContents' => $fileContents,
        ]);
    }

    // Function to save folder data to session
    public function saveFolderSession(Request $request)
    {
        $folderPath = $request->input('folderPath');
        $folderContents = $request->input('folderContents');
        $fileContents = $request->input('fileContents');

        Session::put('folderPath', $folderPath);
        Session::put('folderContents', $folderContents);
        Session::put('fileContents', $fileContents);

        return response()->json([
            'message' => 'Folder data saved to session successfully!'
        ]);
    }
        


   
    
    
   
    
public function getUsersByRole($role)
{
    $userId = Auth::id(); 

    // Fetch users where role matches and createdby_id is equal to the authenticated user's ID
    $users = User::where('role', $role)
                 ->where('createdby_id', $userId)
                 
                 ->get();

    return response()->json(['users' => $users]);
}


    
   public function getUnionResults($financialYear)
    {
        $userId = Auth::id();

        $boardNotice = DB::table('board_notice')
            ->select(DB::raw("'board_notice' AS source_table"), 'board_notice.*')
            ->where('user_id', $userId)
            ->where('fyear', $financialYear);

        $boardReso = DB::table('board_reso')
            ->select(DB::raw("'board_reso' AS source_table"), 'board_reso.*')
            ->where('user_id', $userId)
            ->where('fyear', $financialYear);

        $boardMinuteBook = DB::table('board_minute_book')
            ->select(DB::raw("'board_minute_book' AS source_table"), 'board_minute_book.*')
            ->where('user_id', $userId)
            ->where('fyear', $financialYear);

        $boardAs = DB::table('board_as')
            ->select(DB::raw("'board_as' AS source_table"), 'board_as.*')
            ->where('user_id', $userId)
            ->where('fyear', $financialYear);

        $results = $boardNotice
            ->unionAll($boardReso)
            ->unionAll($boardMinuteBook)
            ->unionAll($boardAs)
            ->get();

        return response()->json($results);
    }
    public function downloadfilterFile($sourceTable, $fileId)
{
    // Ensure valid source table to prevent SQL injection
    $validTables = ['board_notice', 'board_reso', 'board_minute_book', 'board_as'];
    if (!in_array($sourceTable, $validTables)) {
        abort(404);
    }

    // Fetch the file information from the database
    $fileInfo = DB::table($sourceTable)->where('id', $fileId)->first();

    if (!$fileInfo) {
        abort(404);
    }

    // Construct file path and name
    $filePath = storage_path('app/' . $fileInfo->file_path);
    $fileName = $fileInfo->file_name;

    // Return the file for download
    return response()->download($filePath, $fileName);
}

public function boradnotice(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        // dd('inside request for file');
        try {
            // dd('inside try');
            // dd($request);
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];

            // Default tags
            $tag_list = ['Secretarial', 'Meeting', 'Board', 'Notice'];

            // Handle tagList whether it's an array, a comma-separated string, or empty
            $userTags = $request->input('tagList', []);
            if (is_string($userTags)) {
                $userTags = explode(',', $userTags);
            }
            $userTags = is_array($userTags) ? array_filter($userTags) : [];
            $tag_list = array_merge($tag_list, $userTags);
            $tags = empty($tag_list) ? NULL : json_encode($tag_list);

            // Get the dynamic location from request
            $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
            // "Legal/Secretarial/Board Meetings" 

            // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
            foreach ($request->file('files') as $file) {
                try {
                    // Store file inside the dynamically created folder
                   
                    $filePath = $file->store($location);
                    // Create a new entry for each file
                    CommonTable::create([
                        'file_type' => $file->getClientMimeType(),
                        'file_name' => $file->getClientOriginalName(),
                        'real_file_name' => $request->input('real_file_name'),
                        'file_size' => $file->getSize(),
                        'file_path' => $filePath,
                        'user_name' => auth()->user()->name, // Assuming user is authenticated
                        'user_id' => auth()->user()->id,
                        'file_status' => $request->input('file_status', 0),
                        'fyear' => $request->input('fyear'),
                        'month' => $request->input('Month'),
                        'tags' => $tags, // Store tags as JSON
                        'location' => $request->input('location'), // Store the dynamic location
                        'descp' => $request->input('desc'),
                    ]);

                    $totalSize += $file->getSize();
                    $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                } catch (\Exception $e) {
                    $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                }
            }

            // Compile overall success message
            // $user = auth()->user();
            // $entries = CommonTable::where('user_id', $user->id)
            //     ->where('is_delete', 0)
            //     ->where('location', 'Legal / Secretarial / Board Meetings') // Ensure base directory is used
            //     ->where('real_file_name', 'Notices')
            //     ->get();
            // $count = $entries->count();

            return response()->json([
                'success' => true,
                // 'count' => $count,
                'totalSize' => $totalSize,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            dd('inside catch');
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


    public function boradattendencesheet(Request $request)
{
       $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'Board', 'Notice'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

            foreach ($request->file('files') as $file) {
                try {
                    $filePath = $file->store('uploads');

                    // Create a new entry for each file
                    CommonTable::create([
                        'file_type' => $file->getClientMimeType(),
                        'file_name' => $file->getClientOriginalName(),
                        'real_file_name' => $request->input('real_file_name'),
                        'file_size' => $file->getSize(),
                        'file_path' => $filePath,
                        'user_name' => auth()->user()->name, // Assuming user is authenticated
                        'user_id' => auth()->user()->id,
                        'file_status' => $request->input('file_status', 0),
                        'fyear' => $request->input('fyear'),
                        'month' => $request->input('Month'),
                        'tags' => $tags, // Store tags as JSON
                        'location' => $request->input('location'),
                        'descp' => $request->input('desc'),
                    ]);

                    $totalSize += $file->getSize();
                    $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                } catch (\Exception $e) {
                    $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                }
            }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Attendance sheet')
    ->get();
            $count = $entries->count();

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSize,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function boradresolution(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'Board', 'Notice'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Resolutions')
    ->get();
            $count = $entries->count();

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSize,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
public function boradmintuebook(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'Board', 'Notice'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesMinbook = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Minute Book')
    ->get();
            $count = $entriesMinbook->count(); // Count of entries
            $totalSizeBytesentriesMinbook = $entriesMinbook->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesMinbook / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchBoardNoticeData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Notices')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchBoardFileNoticeData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
   $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Notices')
    ->get();

   

    return response()->json(['files' => $files]);
}
public function deleteBoardNotice(Request $request)
{
    $file = CommonTable::find($request->unique_tb_id);
dd($file);
    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteBoardMinBook(Request $request)
{
    $file = CommonTable::find($request->unique_tb_id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteBoardAs(Request $request)
{
    $file = CommonTable::find($request->unique_tb_id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteBoardReso(Request $request)
{
    $file = CommonTable::find($request->unique_tb_id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}
public function deleteBankAccStatment(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}

public function deleteMeetNotice(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteMeetMinBook(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}
public function deleteMeetAs(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}

public function deleteMeetReso(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteOrderNotice(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}


public function deleteOrderMinBook(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}

public function deleteOrderAttend(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}

public function deleteOrderReso(Request $request)
{
    $file = CommonTable::find($request->id);

    if ($file) {
        $file->is_delete = 1;
        $file->save();

        // Set success message in session
        session()->flash('success', 'The record has been deleted.');

        return response()->json(['success' => true, 'message' => 'The record has been deleted.']);
    }

    // Set error message in session
    session()->flash('error', 'Failed to delete the record.');

    return response()->json(['success' => false, 'message' => 'Failed to delete the record.'], 404);
}

public function innerruns(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerrun = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'RUN Form')
    ->get();
            $count = $entriesinnerrun->count(); // Count of entries
            $totalSizeBytesentriesinnerrun = $entriesinnerrun->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerrun / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerRunsData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'RUN Form (Reserve Unique Name)')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
            
        ]);
}
public function fetchInnerFileRunsData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'RUN Form (Reserve Unique Name)')
    ->get();
   

    return response()->json(['files' => $files]);
}
public function fetchBoardAttendencesheetData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Attendance sheet')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchBoardFileAttendencesheetData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
   

    return response()->json(['files' => $files]);
}




public function fetchBoardResolutionData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Resolutions')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchBoardFileResolutionData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Resolutions')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function fetchBoardMinBookData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Board Meetings')
    ->where('real_file_name', 'Minute Book')
    ->get();

        // Calculate count and total size of files
        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchBoardFileMinBookData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Minute Book')
    ->get();
   

    return response()->json(['files' => $files]);
}


 public function meetminutebook(Request $request)
{
 $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'AGM', 'Minute Book'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Minute Book')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchMeetMinBookData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Minute Book')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchMeetFileMinBookData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Minute Book')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function meetas(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'AGM', 'Attendance sheet'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Attendance sheet')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchMeetASData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Attendance sheet')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchMeetFileASData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function meetreso(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'AGM', 'Resolutions'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Resolutions')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchMeetRESOData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Resolutions')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchMeetFileRESOData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location )
    ->where('real_file_name', 'Resolutions')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function ordernotice(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'EGM', 'Notice'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesordernotice = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Notices')
    ->get();
            $count = $entriesordernotice->count(); // Count of entries
            $totalSizeBytesentriesordernotice = $entriesordernotice->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesordernotice / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchOrderNoticeData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Notices')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchOrderFileNoticeData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Notices')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function orderminbook(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'EGM', 'Minute Book'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesorderminbook = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Minute Book')
    ->get();
            $count = $entriesorderminbook->count(); // Count of entries
            $totalSizeBytesentriesorderminbook = $entriesorderminbook->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesorderminbook / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchOrderMinBookData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Minute Book')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchOrderFileMinBookData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Minute Book')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function orderAttend(Request $request)
{
  $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'EGM', 'Attendance sheet'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);


                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesorderAttend = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Attendance sheet')
    ->get();
            $count = $entriesorderAttend->count(); // Count of entries
            $totalSizeBytesentriesorderAttend = $entriesorderAttend->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesorderAttend / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchOrderAttendData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Attendance sheet')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchOrderFileAttendData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function orderreso(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'EGM', 'Resolutions'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesorderreso = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Resolutions')
    ->get();
            $count = $entriesorderreso->count(); // Count of entries
            $totalSizeBytesentriesorderreso = $entriesorderreso->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesorderreso / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchOrderRESOData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Extra Ordinary General Meeting')
    ->where('real_file_name', 'Resolutions')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchOrderFileRESOData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Resolutions')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function innerincnine(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinc9 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 9')
    ->get();
            $count = $entriesinc9->count(); // Count of entries
            $totalSizeBytesentriesinc9 = $entriesinc9->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinc9 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC9Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 9')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFile9Data(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-9 (Declaration of Subscribers and First Directors)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function innerspice(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerspice = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'SPICe Part B')
    ->get();
            $count = $entriesinnerspice->count(); // Count of entries
            $totalSizeBytesentriesinnerspice = $entriesinnerspice->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerspice / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerspiceData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'SPICe Part B')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFilespiceData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'SPICe+Part B (Simplified Proforma for Incorporating Company Electronically)')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function innerINC33(Request $request)
{
  $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerinc33 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 33 SPICe MoA')
    ->get();
            $count = $entriesinnerinc33->count(); // Count of entries
            $totalSizeBytesentriesinnerinc33 = $entriesinnerinc33->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerinc33 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC33Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 33 SPICe MoA')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFileINC33Data(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-33 SPICe MoA (e-Momorandum of Association)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function innerINC34(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerinc34 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 34')
    ->get();
            $count = $entriesinnerinc34->count(); // Count of entries
            $totalSizeBytesentriesinnerinc34 = $entriesinnerinc34->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerinc34 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC34Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 34')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFileINC34Data(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-34 SPICe AoA (e-Articles of Association)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function innerINC35(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerinc35 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 35')
    ->get();
            $count = $entriesinnerinc35->count(); // Count of entries
            $totalSizeBytesentriesinnerinc35 = $entriesinnerinc35->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerinc35 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC35Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 35')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFileINC35Data(Request $request)
{

    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-35 AGILE-PRO-s')
    ->get();
   

    return response()->json(['files' => $files]);
}
public function innerINC22(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerinc22 =CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 22')
    ->get();
            $count = $entriesinnerinc22->count(); // Count of entries
            $totalSizeBytesentriesinnerinc22 = $entriesinnerinc22->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerinc22 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC22Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 22')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFileINC22Data(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-22 (Notice of situation or change of situation of registered office)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function innerINC20A(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesinnerinc20a = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 20A')
    ->get();
            $count = $entriesinnerinc20a->count(); // Count of entries
            $totalSizeBytesentriesinnerinc20a = $entriesinnerinc20a->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesinnerinc20a / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchInnerINC20AData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Incorporation')
    ->where('real_file_name', 'INC 20A')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchInnerFileINC20AData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'INC-20A (Commencement of Business)')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function annaoc4afs(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesafs = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'AoC 4 Annual Filing Statement Form')
    ->get();
            $count = $entriesafs->count(); // Count of entries
            $totalSizeBytesentriesafs = $entriesafs->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesafs / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchAnnAoc4AfsAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'AoC 4 Annual Filing Statement Form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAnnFileAoc4AfsData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'AoC-4 (Annual Filing Statement Form)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function annaoc4Cfs(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriescfs = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'AoC 4 CFS')
    ->get();
            $count = $entriescfs->count(); // Count of entries
            $totalSizeBytesentriescfs = $entriescfs->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriescfs / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchAnnAoc4CfsAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'AoC 4 CFS')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAnnFileAoc4CfsData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'AoC-4 (CFS) (Form for filing consolidated financial statements and other documents with the Registrar)')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function annmgt7(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesmgt7 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'MGT 7')
    ->get();
            $count = $entriesmgt7->count(); // Count of entries
            $totalSizeBytesentriesmgt7 = $entriesmgt7->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesmgt7 / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchAnnmgt7Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'MGT 7')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAnnFilemgt7Data(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'MGT-7/ (Annual Return of a company)')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function annmgt7a(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entriesmgt7a = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'MGT 7A')
    ->get();
            $count = $entriesmgt7a->count(); // Count of entries
            $totalSizeBytesentriesmgt7a = $entriesmgt7a->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytesentriesmgt7a / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchAnnmgt7aData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual Filings')
    ->where('real_file_name', 'MGT 7A')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAnnFilemgt7aData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'MGT-7A (Annual Return of a small company)')
    ->get();
   

    return response()->json(['files' => $files]);
}
public function checkFiles()
{
   $userId = Auth::id();

   
    $files = BoardNotice::where('user_id', $userId)->get();
    return response()->json($files);
}

// public function boradminutebook(Request $request)
// {
//     $request->validate([
//         'file' => 'required|mimes:pdf,doc,docx|max:102400', 
        
//     ]);
//     if ($request->hasFile('file')) {
//         try {
//             $file = $request->file('file');
//             $filePath = $file->store('uploads');

//             BoardMinuteBook::create([
//                 'file_type' => $file->getClientMimeType(),
//                 'file_name' => $file->getClientOriginalName(),
//                 'real_file_name' => $request->input('real_file_name'),
//                 'file_size' => $file->getSize(),
//                 'file_path' => $filePath,
//                 'user_name' => auth()->user()->name, // Assuming user is authenticated
//                 'user_id' => auth()->user()->id,
//                 'file_status' => $request->input('file_status', 0),
//                 'fyear' => $request->input('fyear'),
//                 'Month' => $request->input('Month'),
//                 'Tags' => $request->input('Tags'),
//             ]);

//             // Return a JSON response indicating success
//           return response()->json(['success' => true, 'message' => 'File uploaded successfully.']);

//         } catch (\Exception $e) {
//             // Handle any exceptions that occur during file upload or database saving
//             return response()->json(['success' => false, 'message' => 'Failed to save file details to database.'], 500);
//         }
//     } else {
//         // Return a JSON response indicating no file was uploaded
//         return response()->json(['error' => 'No file uploaded.'], 400);
//     }
// }


public function meetnotice(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial', 'Meeting', 'AGM', 'Notices'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Notices')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    public function fetchMeetNoticeData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Annual General Meeting')
    ->where('real_file_name', 'Notices')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchMeetFileNoticeData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Notices')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function bankaccountstatement(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Accounting','Book-keeping','Bank/ Cash'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'bank_name'=>$request->input('bank_name'),
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
   ->where('location', 'LIKE', '%Bank Account Statements%')
        ->where('real_file_name', 'Bank account statement')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchBankAccsData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Bank Account Statements%')
        ->where('real_file_name', 'Bank Account Statement')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchBankFileAccsData(Request $request)
{
    // $location = $request->input('location');
    $user = auth()->user();
    // dd($request);
    // Get the query without executing it
    $query = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
       ->where('location', 'LIKE', '%Bank Account Statements%')
    //    ->where('location', $location)
        ->where('real_file_name', 'Bank Account Statement');

   
    $files = $query->get();
    // dd($files);
    return response()->json(['files' => $files]);
}




public function directorappointmentsdir3(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 3 KYC')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdirectorappointmentsdir3Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 3 KYC')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorappointmentsdir3FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-3 KYC')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function directorappointmentsdir3din(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR-3 form/ DIN number')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

     public function fetchdirectorappointmentsdir3dinData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR-3 form/ DIN number')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorappointmentsdir3dinFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-3 form/ DIN number')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function directorappointmentsdir6(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 6 form')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdirectorappointmentsdir6Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 6 form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorappointmentsdir6FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-6 form')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function directorappointmentsdir12(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Accounting','Book-keeping','Bank/ Cash'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 12 form')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdirectorappointmentsdir12Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Appointments')
    ->where('real_file_name', 'DIR 12 form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorappointmentsdir12FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-12 form')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function creditcardstatement(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Accounting','Book-keeping','Bank/ Cash'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'bank_name'=>$request->input('bank_name'),
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
   ->where('location', 'LIKE', '%Credit Card Statement%')
        ->where('real_file_name', 'Add Credit Card Statements')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchcreditcardstatementData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Credit Card Statement%')
        ->where('real_file_name', 'Add Credit Card Statements')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchcreditcardstatementFileData(Request $request)
{
    $user = auth()->user();
    $selectedBank = $request->input('bank'); // Get the selected bank from the request

    // Fetch files based on the selected bank
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', 'LIKE', '%Credit Card Statement%')
        ->where('real_file_name', 'Add Credit Card Statements')
        ->when($selectedBank, function ($query) use ($selectedBank) {
            return $query->where('bank_name', $selectedBank); // Assuming you have a 'bank_name' column
        })
        ->get();

    return response()->json(['files' => $files]);
}



public function mutualfundstatement(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Accounting','Book-keeping','Invoices'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'bank_name'=>$request->input('bank_name'),
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Mutual Fund Statements%')
    ->where('real_file_name', 'Add Mutual Fund Statements')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchmutualfundstatementData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Mutual Fund Statements%')
    ->where('real_file_name', 'Add Mutual Fund Statements')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchmutualfundstatementFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Mutual Fund Statements%')
    ->where('real_file_name', 'Add Mutual Fund Statements')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function fixeddepoiststatement(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Accounting','Book-keeping','Bank/ Cash'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'bank_name'=>$request->input('bank_name'),
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Fixed Deposit Statements%')
    ->where('real_file_name', 'Fixed Deposit Account Statement')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchfixeddepoiststatementData()
{
    $user = Auth::user(); // Retrieve authenticated user
// ok
        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Fixed Deposit Statements%')
    ->where('real_file_name', 'Fixed Deposit Account Statement')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchfixeddepoiststatementFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Fixed Deposit Statements%')
    ->where('real_file_name', 'Fixed Deposit Account Statement')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function directorresignationdir11(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Resignation')
    ->where('real_file_name', 'DIR 11 form')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdirectorresignationdir11Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Resignation')
    ->where('real_file_name', 'DIR 11 form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorresignationdir11FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-11 form')
    ->get();
   

    return response()->json(['files' => $files]);
}




public function directorresignationdir12(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Resignation')
    ->where('real_file_name', 'DIR 12 form')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdirectorresignationdir12Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Director Resignation')
    ->where('real_file_name', 'DIR 12 form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdirectorresignationdir12FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'DIR-12 form')
    ->get();
   

    return response()->json(['files' => $files]);
}





public function depositundertakingsFormDPT3(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Deposit Undertakings')
    ->where('real_file_name', 'Form DPT 3')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchdepositundertakingsFormDPT3Data()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Deposit Undertakings')
    ->where('real_file_name', 'Form DPT 3')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchdepositundertakingsFormDPT3FileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Form DPT-3')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function AuditorExitsADT3Form(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'ADT 3 form')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchAuditorExitsADT3FormData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'ADT 3 form')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAuditorExitsADT3FormFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'ADT-3 form')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function AuditorExitsResignletteraudF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Resignation letter by auditor')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchAuditorExitsResignletteraudFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Resignation letter by auditor')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAuditorExitsResignletteraudFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Resignation letter by auditor')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function AuditorExitsResignDetofgroundsseekremaudF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Details of the grounds for seeking removal of auditor')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchAuditorExitsResignDetofgroundsseekremaudFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Details of the grounds for seeking removal of auditor')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAuditorExitsResignDetofgroundsseekremaudFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Details of the grounds for seeking removal of auditor')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function AuditorExitsSpecialResolF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Special Resolution')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchAuditorExitsSpecialResolFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'Special Resolution')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAuditorExitsSpecialResolFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Special Resolution')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function AuditorExitsADT2Form(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'ADT 2')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeBytes = $entries->sum('file_size'); // Sum of file sizes
            $totalSizeKB = round($totalSizeBytes / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchAuditorExitsADT2FormData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Exits')
    ->where('real_file_name', 'ADT 2')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchAuditorExitsADT2FormFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'ADT-2 (Application for removal of auditor(s) before expiry of term)')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function Director1AadharKYCF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Aadhar KYC')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1AadharKYCFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Aadhar KYC')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1AadharKYCFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Aadhar KYC')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director1AddressProofF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Address Proof')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1AddressProofFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Address Proof')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1AddressProofFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', $location)
    ->where('real_file_name', 'Address Proof')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director1ContactDetailsF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Contact Details')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1ContactDetailsFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Contact Details')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1ContactDetailsFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Contact Details')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function Director1PANKYCF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'PAN KYC')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1PANKYCFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'PAN KYC')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1PANKYCFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'PAN KYC')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function Director1PhotoF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);
    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Photo')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1PhotoFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Photo')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1PhotoFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location',  $location)
    ->where('real_file_name', 'Photo')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director1SignimgF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Signature image')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector1SignimgFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Signature image')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector1SignimgFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Signature image')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director2SignimgF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);
    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Signature image')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2SignimgFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Signature image')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2SignimgFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Signature image')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function Director2PhotoF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Photo')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2PhotoFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Photo')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2PhotoFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Photo')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function Director2PANKYCF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'PAN KYC')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2PANKYCFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    
    ->where('real_file_name', 'PAN KYC')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2PANKYCFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'PAN KYC')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director2ContactDetailsF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Contact Details')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2ContactDetailsFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Contact Details')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2ContactDetailsFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Contact Details')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director2AddressProofF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Address Proof')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2AddressProofFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Address Proof')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2AddressProofFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Address Proof')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function Director2AadharKYCF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Incorporation','Director'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Aadhar KYC')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchDirector2AadharKYCFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Aadhar KYC')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchDirector2AadharKYCFFileData()
{
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('real_file_name', 'Aadhar KYC')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function IncorporationArtofAssocF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules','Articles', 'Association', 'Incorporation'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Articles of Association')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationArtofAssocFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Articles of Association')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationArtofAssocFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Articles of Association')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function IncorporationCertifofincorpF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules', 'COI','DOI', 'Incorporation Certificate', 'Incorporation'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Charter documents / Incorporation')
    ->where('real_file_name', 'Certificate of incorporation')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationCertifofincorpFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Charter documents / Incorporation')
    ->where('real_file_name', 'Certificate of incorporation')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationCertifofincorpFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Certificate of incorporation')
    ->get();
   

    return response()->json(['files' => $files]);
}




public function CharterdocumentsIncorporationMemorandumofAssociation(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules', 'MOA','Memorandum', 'Association', 'Incorporation'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries =  CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Memorandum of Association')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchCharterdocumentsIncorporationMemorandumofAssociationData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Memorandum of Association')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsIncorporationMemorandumofAssociationFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files =CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Memorandum of Association')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function IncorporationPartnerdeedF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules','SSHA','SSA', 'COI', 'Incorporation','Incorporation Certificate','Partnership Deed','LLP Agreement'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Partnership deed')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationPartnerdeedFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Partnership deed')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationPartnerdeedFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', $location)
    ->where('real_file_name', 'Partnership deed')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function IncorporationLLPAgreementF(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules','SSHA','SSA','COI', 'Incorporation','Incorporation Certificate', 'Partnership Deed','LLP Agreement'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'LLP Agreement')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationLLPAgreementFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'LLP Agreement')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationLLPAgreementFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'LLP Agreement')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function IncorporationTrustDeedF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Company Rules','SSHA','SSA','COI', 'Incorporation','Incorporation Certificate', 'Trust Deed','LLP Agreement'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Trust Deed')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationTrustDeedFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Trust Deed')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationTrustDeedFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Trust Deed')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function IncorporationSharecertifF(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Shares','SH-1', 'SSHA','SSA'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Share certificates')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

    
     public function fetchIncorporationSharecertifFData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('real_file_name', 'Share certificates')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchIncorporationSharecertifFFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Share certificates')
    ->get();
   

    return response()->json(['files' => $files]);
}

// latest path function added by raman

public function CharterdocumentsRegistrationsPAN(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','PAN','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);


                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'PAN certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsPANData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'PAN certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsPANFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
   ->where('location', $location)
    ->where('real_file_name', 'PAN certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function CharterdocumentsRegistrationsTAN(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
             // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','TAN','Direct Tax','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'TAN certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsTANData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'TAN certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsTANFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'TAN certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}





public function CharterdocumentsRegistrationsGSTIN(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','GST','Indirect Tax','TAX'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'GSTIN certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsGSTINData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'GSTIN certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsGSTINFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'GSTIN certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function CharterdocumentsRegistrationsMSME(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Articles', 'Association', 'MSME'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'MSME certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsMSMEData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'MSME certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsMSMEFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'MSME certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function CharterdocumentsRegistrationsTrademark(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Trademark'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Trademark')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsTrademarkData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Trademark')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsTrademarkFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Trademark')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function CharterdocumentsRegistrationsPFC(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Labour Laws','Provident Fund','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Provident Fund certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsPFCData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Provident Fund certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsPFCFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Provident Fund certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}




public function CharterdocumentsRegistrationsESIC(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Labour Laws','Employee State Insurance','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Employee State Insurance certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsESICData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Employee State Insurance certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsESICFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Employee State Insurance certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function CharterdocumentsRegistrationsPTC(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Labour Laws','Professional Tax','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Professional Tax certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsPTCData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Professional Tax certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsPTCDataFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Professional Tax certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function CharterdocumentsRegistrationsLWFC(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Labour Laws','Labour Welfare Fund','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Labour Welfare Fund certificate')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsLWFCData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'Labour Welfare Fund certificate')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsLWFCFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Labour Welfare Fund certificate')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function CharterdocumentsRegistrationsPOSHPolicy(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Charter','Registrations','Labour Laws','POSH','Tax'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'POSH Policy')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchCharterdocumentsRegistrationsPOSHPolicyData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('real_file_name', 'POSH Policy')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchCharterdocumentsRegistrationsPOSHPolicyFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'POSH Policy')
    ->get();
   

    return response()->json(['files' => $files]);
}


// path end 



// latest path funtion  added by raman 16 aug


public function SecretarialAuditorAppointmentBRAA(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);
    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Board Resolution for the appointment of Auditor')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentBRAAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Board Resolution for the appointment of Auditor')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentBRAAFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Board Resolution for the appointment of Auditor')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function SecretarialAuditorAppointmentIA(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Intimation to auditor')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentIAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Intimation to auditor')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentIAFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Intimation to auditor')
    ->get();
   

    return response()->json(['files' => $files]);
}





public function SecretarialAuditorAppointmentLA(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Letter of appointment')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentLAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Letter of appointment')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentLAFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Letter of appointment')
    ->get();
   

    return response()->json(['files' => $files]);
}


public function SecretarialAuditorAppointmentCRCAA(Request $request)
{
   $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Certificate as per Rule 4 and consent by Auditor for his appointment')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentCRCAAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Certificate as per Rule 4 and consent by Auditor for his appointment')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentCRCAAFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Certificate as per Rule 4 and consent by Auditor for his appointment')
    ->get();
   

    return response()->json(['files' => $files]);
}

public function SecretarialAuditorAppointmentALA(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Acceptance letter for appointment')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentALAData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Acceptance letter for appointment')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentALAFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Acceptance letter for appointment')
    ->get();
   

    return response()->json(['files' => $files]);
}
public function fetchHremponboardFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Offer Letter')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhremponboardalFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Acceptance Letter')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremponboardeaFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Employment Agreement')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremponboardndaFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Non Disclosure Agreement')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhremponboardncFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Non-compete')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremponboardcbFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Contractual Bond')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}


public function fetchhremponboardepfFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Form 11 - EPF')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}


public function fetchhremponboardincometaxFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Form 12BB - Income Tax')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrkycphotoFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Photo')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrkycaadharFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Aadhar KYC')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrkycpanFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'PAN KYC')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrkycaddressproofFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Address Proof')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrkyccontactdetailsfFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Contact Details')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrpayrimfFileDatas(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Reimbursement forms & Invoices')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhrpayrimapprovefFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Approvals')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhrempdecfFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Asset Declaration Forms')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrempdecmasterfFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Employee Master')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrpaymoney1fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Attendance log')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrpaymoney2fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Variable pays')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhrpaymoney3fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Terminations/ Exits')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhrpaymoney4fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'New Hires')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}
public function fetchhrpaymoney5fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Pay Register')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremppol1fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Policy')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremppol2fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Grant Letters')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremppol3fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Acceptance Letters')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhremppol4fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Nominations')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrempoff1fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Resignation letter')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrempoff2fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Experience Letter')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrempoff3fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'No Dues certificate')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function fetchhrempoff4fFileData(Request $request)
{
    // Get the location value
    $location = $request->input('location');
    $user = auth()->user();

    
// dd($location);
    // Fetch files based on the user ID and decoded folder location
    $files = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $location) // Using the decoded folder parameter
        ->where('real_file_name', 'Character certificate')
        ->get();

    // Return the fetched files as a JSON response
    return response()->json(['files' => $files]);
}

public function SecretarialAuditorAppointmentSR(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters and message arrays
            $totalSize = 0;
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Special Resolution')
    ->get();
            $count = $entries->count(); // Count of entries
            $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

            return response()->json([
                'success' => true,
                'count' => $count,
                'totalSize' => $totalSizeKB,
                'successMessages' => $successMessages,
                'errorMessages' => $errorMessages,
            ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}
 
    
     public function fetchSecretarialAuditorAppointmentSRData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('real_file_name', 'Special Resolution')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialAuditorAppointmentSRFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Special Resolution')
    ->get();
   

    return response()->json(['files' => $files]);
}



public function SecretarialStatutoryRegistersRM(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Members')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersROSH(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Other Security Holders')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersFR(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', '⁠Foreign Register')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function SecretarialStatutoryRegistersRDK(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Directors and KMP')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function SecretarialStatutoryRegistersRC(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', '⁠Register of Charges')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRD(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Deposits')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRLGS(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Loans, Guarantees and Securities')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRCD(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Investments not held in Company’s name')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRCDI(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Contracts in which Directors are interested')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRSES(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Sweat Equity Shares')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRESO(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Employee Stock Options')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function SecretarialStatutoryRegistersRSBB(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Securities Bought Back')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function SecretarialStatutoryRegistersRRDSC(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Renewed or Duplicate Share Certificates')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function SecretarialStatutoryRegistersSBO(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of SBO')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function SecretarialStatutoryRegistersRPB(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,odp,ods,ppt,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    if ($request->hasFile('files')) {
        try {
            // Initialize counters
            $totalSize = 0;

            // Store success and error messages for individual files
            $successMessages = [];
            $errorMessages = [];
            
            // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = ['Secretarial'];

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                    $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
                    // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
                    foreach ($request->file('files') as $file) {
                        try {
                            // Store file inside the dynamically created folder
                           
                            $filePath = $file->store($location);
                            // Create a new entry for each file
                            CommonTable::create([
                                'file_type' => $file->getClientMimeType(),
                                'file_name' => $file->getClientOriginalName(),
                                'real_file_name' => $request->input('real_file_name'),
                                'file_size' => $file->getSize(),
                                'file_path' => $filePath,
                                'user_name' => auth()->user()->name, // Assuming user is authenticated
                                'user_id' => auth()->user()->id,
                                'file_status' => $request->input('file_status', 0),
                                'fyear' => $request->input('fyear'),
                                'month' => $request->input('Month'),
                                'tags' => $tags, // Store tags as JSON
                                'location' => $request->input('location'), // Store the dynamic location
                                'descp' => $request->input('desc'),
                            ]);
        
                            $totalSize += $file->getSize();
                            $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                        } catch (\Exception $e) {
                            $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
                        }
                    }

            // Compile overall success message
            $user = auth()->user();
            $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Postal Ballot')
    ->get();
            $count = $entries->count();
            
            return redirect()->back()->with('success2', 'File Uploaded successfully.');

            // return response()->json([
            //     'success' => true,
            //     'count' => $count,
            //     'totalSize' => $totalSize,
            //     'successMessages' => $successMessages,
            //     'errorMessages' => $errorMessages,
            // ]);

        } catch (\Exception $e) {
            // Handle any exceptions that occur during file upload or database saving
            return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
        }
    } else {
        // Return a JSON response indicating no file was uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


////////////////////////////////////////////// 4 october sandeep added code here for prdefined paths common pop upload form file upload  start ///////////////////////////////////////////////////////////////////
// public function PredefinedCommonUploadFiles(Request $request)
// {
//     $request->validate([
//         'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
//         'tagList' => 'nullable', // Allow tagList to be nullable
//         'location' => 'required|string', // Require location
//         'real_file_name' => 'required|string', // Require real file name
//         'fyear' => 'required|string', // Require real file name
//         'Month' => 'required|string', // Require real file name


//     ], [
//         'files.*.required' => 'Each file is required.',
//         'files.*.file' => 'The uploaded item must be a valid file.',
//         'files.*.max' => 'Each file may not be larger than 100MB.',
//         'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
//         'location.required' => 'Location is required.',
//         'real_file_name.required' => 'Real File name is required.',
//         'fyear.required' => 'Financial Year is required.',
//         'Month.required' => 'Month is required.',

//     ]);


//     // Legal / Secretarial / Deposit Undertakings

//     $user = auth()->user();

//     // Query your table to validate the location and real_file_name
//     // $temp_location = $request->input('location');

//     // // dd($temp_location);
//     // // $temp_location = "Accounting & Taxation / Charter documents / Registrations";
//     // $final_location = preg_replace('/\s*\/\s*/', '/', $temp_location);
//     // // "Accounting & Taxation/Charter documents/Registrations"

//     // $entry = Folder::where('path', $final_location)
//     //                     // ->where('real_file_name', $request->input('real_file_name'))
//     //                     // ->where('user_id', $user->id)
//     //                     ->where('is_delete', 0)
//     //                     ->first();

//     // if (!$entry) {
//     //     // Return an error if the location and real_file_name are not valid
//     //     return response()->json([
//     //         'success' => false,
//     //         'message' => 'Invalid location or file name. Please check and try again.',
//     //     ], 400);
//     // }


//     if ($request->hasFile('files')) {
//         try {
//             // Initialize counters
//             $totalSize = 0;

//             // Store success and error messages for individual files
//             $successMessages = [];
//             $errorMessages = [];

            
            
//             // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
//                     // Default tags
//                     $tag_list = [];
                    
//                     // $automated_tags=[];
                    
//                     $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
//                     $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
//                     $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
//                     $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
//                     // Merge both arrays
//                     $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
//                     // Display the merged array
//                     // dd($merged_automated_tags);
                    

//                     // Handle tagList whether it's an array, a comma-separated string, or empty
//                     $userTags = $request->input('tagList', []);
                    
//                     // Convert to array if it's a comma-separated string
//                     if (is_string($userTags)) {
//                         $userTags = explode(',', $userTags);
//                     }
//                     // Ensure $userTags is an array and remove any empty values
//                     if (is_array($userTags)) {
//                         $userTags = array_filter($userTags); // Remove empty values
//                     } else {
//                         $userTags = []; // Fallback to empty array if not an array
//                     }
                    
//                     // Merge with default tags
//                     $tag_list = array_merge($tag_list, $userTags);
//                     // dd($tag_list);
                    
//                     $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
//                     //  dd($final_automated_tags);
//                     // dd("okokokok");
                    
                    
//                     // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
//                     $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

//                     $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
//                     // "Legal/Secretarial/Board Meetings" 
        
//                     // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
//                     foreach ($request->file('files') as $file) {
//                         try {
//                             // Store file inside the dynamically created folder
//                             //////
//                             $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
//                             $extension = $file->getClientOriginalExtension(); // Get the file extension
//                             $fileName = $originalFileName . '.' . $extension; // Start with the original file name
//                             // $filePath = $file->storeAs($folderPath, $fileName);
//                             // $storedFileName = basename($filePath);  
//                             //////
                        
//                             //  $filePath = $file->storeAs($location,$fileName);
//                             // Create a new entry for each file
//                             $filePath = $file->store($location);

//                             $storedFileName = basename($filePath);

                           
//                             // dd($storedFileName);
//                             CommonTable::create([
//                                 'file_type' => $file->getClientMimeType(),
//                                 'file_name' => $file->getClientOriginalName(),
//                                 'real_file_name' => $request->input('real_file_name'),
//                                 'temp_file_name' => $storedFileName,
//                                 'file_size' => $file->getSize(),
//                                 'file_path' => $filePath,
//                                 'user_name' => auth()->user()->name, // Assuming user is authenticated
//                                 'user_id' => auth()->user()->id,
//                                 'file_status' => $request->input('file_status', 0),
//                                 'fyear' => $request->input('fyear'),
//                                 'month' => $request->input('Month'),
//                                 'tags' => $tags, // Store tags as JSON
//                                 'location' => $request->input('location'), // Store the dynamic location
//                                 'descp' => $request->input('desc'),
//                             ]);
        
//                             $totalSize += $file->getSize();
//                             $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
//                         } catch (\Exception $e) {
//                             $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
//                         }
//                     }
            
            

//             // Compile overall success message
//             $user = auth()->user();
//             $entries = CommonTable::where('user_id', $user->id)
//             ->where('is_delete', 0)
//             ->where('location', $request->input('location'))
//             ->where('real_file_name', $request->input('real_file_name'))
//             ->get();
//             $count = $entries->count();
//             $totalFileSize = $entries->sum('file_size');

//             $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

//             if ($totalSizeKB > 1024) {
//                 $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
//                 if ($totalSizeMB > 1024) {
//                     $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
//                     $totalSizef = $totalSizeGB . ' GB';
//                 } else {
//                     $totalSizef = $totalSizeMB . ' MB';
//                 }
//             } else {
//                 $totalSizef = $totalSizeKB . ' KB';
//             }
            
            
            
//             // return redirect()->back()->with('success2', 'File Uploaded successfully.');

//             return response()->json([
//                 'success' => empty($errorMessages),
//                 'count' => $count,
//                 'totalSize' => $totalSizef,
//                 'successMessages' => $successMessages,
//                 'errorMessages' => $errorMessages,
//                 'real_file_name' => $request->input('real_file_name'),
//             ]);

//         } catch (\Exception $e) {
//             // Handle any exceptions that occur during file upload or database saving
//             return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
//         }
//     } else {
//         // Return a JSON response indicating no file was uploaded
//         return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
//     }
// }
// ////////////////////// new version PredefinedCommonUploadFiles start
public function PredefinedCommonUploadFiles(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
        'location' => 'required|string', // Require location
        'real_file_name' => 'required|string', // Require real file name
        'fyear' => 'required|string', // Require real file name
        'Month' => 'required|string', // Require real file name
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
        'location.required' => 'Location is required.',
        'real_file_name.required' => 'Real File name is required.',
        'fyear.required' => 'Financial Year is required.',
        'Month.required' => 'Month is required.',
    ]);
    // Legal / Secretarial / Deposit Undertakings
    $user = auth()->user();

    if ($request->hasFile('files')) {
        // Process each file
        
        $Pre_exists = [];
        $Pre_do_not_exists = [];
        foreach ($request->file('files') as $file) {

            $fileExists = CommonTable::where('file_name', $file->getClientOriginalName())
            ->where('user_id', auth()->user()->id)
            ->where('file_type', $file->getClientMimeType())
            ->where('real_file_name', $request->input('real_file_name'))
            ->where('fyear', $request->input('fyear'))
            ->where('month', $request->input('Month'))
            ->where('location', $request->input('location'))
            ->exists();

            // $query = CommonTable::where('file_name', $file->getClientOriginalName())
            //     ->where('user_id', auth()->user()->id)
            //     ->where('file_type', $file->getClientMimeType())
            //     ->where('fyear', $request->input('fyear'))
            //     ->where('month', $request->input('Month'))
            //     ->where('location', $request->input('location'));

            // // Print the query with bindings
            // $sql = vsprintf(
            //     str_replace('?', "'%s'", $query->toSql()),
            //     $query->getBindings()
            // );

            // dd($sql);
            if ($fileExists) {
                $Pre_exists[]=$file->getClientOriginalName();
            } else {
                $Pre_do_not_exists[]=$file->getClientOriginalName();
            }
        }
        // Compile the response
        return response()->json([
            'success' => true,
            'Pre_do_not_exists' => $Pre_do_not_exists,
            'Pre_exists' => $Pre_exists,
            
        ]);
       
    } else {
        // No files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function PreHandleCommonUploadFiles(Request $request)
{
    if($request->input('replace')){ 
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_newfiles2')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);
    
                // Process each file
                foreach ($request->file('pre_newfiles2') as $file) {
                    try {
                       


                        // Retrieve the file's ID based on the given conditions
                     
                        $fileId = CommonTable::where('file_type', $file->getClientMimeType())
                        ->where('file_name', $file->getClientOriginalName())
                        // ->where('file_path', $filePath)  // Comment out if you don't need this condition
                        ->where('user_id', auth()->user()->id)
                        ->where('fyear', $request->input('fyear'))
                        ->where('month', $request->input('Month'))
                        ->where('real_file_name', $request->input('real_file_name'))
                        ->whereNull('is_replaced')
                        ->value('id'); // Use `value('id')` to get only the ID

                        // dd($fileId); // This will give you the ID if the file exists, or null if it doesn't.
                        // Check if the file exists
                        if ($fileId) {
                             // Retrieve the file record based on the ID
                            $fileRecord = CommonTable::find($fileId); // Use `find()` to get the full record by ID

                            // dd($fileRecord);
                            if ($fileRecord) {
                                // File record found, update the `is_replaced` field to 1
                                $fileRecord->is_replaced = 1;
                                if($fileRecord->save()){

                                    $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                                    $folderPaths2 = $folderPath;
                                    $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                                    $folderName = trim($folderName);

                                    // Store file details in the database
                                    $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                                    $extension = $file->getClientOriginalExtension(); // Get the file extension
                                    $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                                    $filePath = $file->store($folderPath);
                                    $storedFileName = basename($filePath);  

                                    // CommonTable::create([
                                    //     'file_type' => $file->getClientMimeType(),
                                    //     'file_name' => $file->getClientOriginalName(),
                                    //     'file_size' => $file->getSize(),
                                    //     'file_path' => $filePath,
                                    //     'temp_file_name' => $storedFileName,
                                    //     'user_name' => auth()->user()->name,
                                    //     'user_id' => auth()->user()->id,
                                    //     'file_status' => $request->input('file_status', 0),
                                    //     'fyear' => $request->input('fyear'),
                                    //     'month' => $request->input('Month'),
                                    //     'real_file_name' => $request->input('real_file_name'),
                                    //     'tags' => $tags, // Store tags as JSON
                                    //     'location' => $folderPath,
                                    //     'descp' => $request->input('desc'),
                                    // ]);

                                     // Store file details in the database
                                    $newEntry = CommonTable::create([
                                        'file_type' => $file->getClientMimeType(),
                                        'file_name' => $file->getClientOriginalName(),
                                        'file_size' => $file->getSize(),
                                        'file_path' => $filePath,
                                        'temp_file_name' => $storedFileName,
                                        'user_name' => auth()->user()->name,
                                        'user_id' => auth()->user()->id,
                                        'file_status' => $request->input('file_status', 0),
                                        'fyear' => $request->input('fyear'),
                                        'month' => $request->input('Month'),
                                        'real_file_name' => $request->input('real_file_name'),
                                        'tags' => $tags, // Store tags as JSON
                                        'location' => $folderPath,
                                        'folder_name'=>$folderName,
                                        'descp' => $request->input('desc'),
                                    ]);

                                    // Update the `replaced_by` field of the original file record with the new entry ID
                                    if ($newEntry) {
                                        $fileRecord->replaced_by = $newEntry->id;
                                        $fileRecord->save(); // Save the updated file record
                                    }

                                    
                                    // return response()->json(['message' => 'File replaced Successfully'], 404);
                                    $successMessages[]='File replaced Successfully';

                                }else{
                                 $errorMessages[] = "Failed to update the existing the file.";
                                }
                             
                            } else {
                                // dd('File record not found!');
                               $errorMessages[] = "Failed to find the old file.";

                            }

                        } else {
                            // No file found, handle accordingly
                            return response()->json(['message' => 'File not found'], 404);
                        }
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} replaced successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }


    }
    if($request->input('keep')){
        // dd("in keep");
         // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
    
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_newfiles3')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

                    // $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
    
                // Process each file
                // foreach ($request->file('newfiles3') as $file) {
                //     try {
                //         $filePath = $file->store($folderPath);

                //         // Store file details in the database
                //         CommonTable::create([
                //             'file_type' => $file->getClientMimeType(),
                //             'file_name' => $file->getClientOriginalName(),
                //             'file_size' => $file->getSize(),
                //             'file_path' => $filePath,
                //             'user_name' => auth()->user()->name,
                //             'user_id' => auth()->user()->id,
                //             'file_status' => $request->input('file_status', 0),
                //             'fyear' => $request->input('fyear'),
                //             'month' => $request->input('Month'),
                //             'tags' => $tags, // Store tags as JSON
                //             'location' => $folderPaths,
                //             'descp' => $request->input('desc'),
                //             'is_keep'=> 1,
                //         ]);
                //         // return response()->json(['message' => 'File replaced Successfully'], 404);
                //         // $successMessages[]='File uploaded Successfully';
 
                //         $totalSize += $file->getSize();
                //         $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                //     } catch (\Exception $e) {
                //         $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                //     }
                // }



                foreach ($request->file('pre_newfiles3') as $file) {
                    try {
                        $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                        $folderPaths2 = $folderPath;
                        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                        $folderName = trim($folderName);

                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                
                        // Check if the file name exists in the database and append a counter if it does
                        $counter = 1;
                        while (CommonTable::where('file_name', $fileName)->where('location', $folderPath)->whereNull('is_replaced')->exists()) {
                            $fileName = $originalFileName . " ($counter)." . $extension;
                            $counter++;
                        }
                        
                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPath);
                        $storedFileName = basename($filePath);  
                
                        // Save the file with the updated unique name
                        // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);

                
                        // // Store file details in the database
                        // CommonTable::create([
                        //     'file_type' => $file->getClientMimeType(),
                        //     'file_name' => $fileName, // Use the updated unique name
                        //     'file_size' => $file->getSize(),
                        //     'file_path' => $filePath,
                        //     'temp_file_name' => $storedFileName,
                        //     'user_name' => auth()->user()->name,
                        //     'user_id' => auth()->user()->id,
                        //     'file_status' => $request->input('file_status', 0),
                        //     'fyear' => $request->input('fyear'),
                        //     'month' => $request->input('Month'),
                        //     'real_file_name' => $request->input('real_file_name'),
                        //     'tags' => $tags, // Store tags as JSON
                        //     'location' => $folderPath,
                        //     'descp' => $request->input('desc'),
                        //     'is_keep' => 1,
                        // ]);

                         // Store file details in the database
                         CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $fileName,
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'real_file_name' => $request->input('real_file_name'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPath,
                            'descp' => $request->input('desc'),
                            'folder_name'=>$folderName,
                            'is_keep' => 1,
                        ]);
                
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$fileName} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
                
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }
    if($request->input('upload')){
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
    
    
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
    
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // dd($folderPath);

        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_newfiles')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

                    // $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
    
                // Process each file
                foreach ($request->file('pre_newfiles') as $file) {
                    try {
                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        // // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);
                        $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                        $folderPaths2 = $folderPath;
                        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                        $folderName = trim($folderName);

                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPath);
                        $storedFileName = basename($filePath);  

    
                        // Store file details in the database
                        CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $file->getClientOriginalName(),
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'real_file_name' => $request->input('real_file_name'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPath,
                            'folder_name'=>$folderName,
                            'descp' => $request->input('desc'),
                        ]);
    
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }

    
}

// start for bank

public function PredefinedCommonUploadFilesBank(Request $request)
{
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
        'location' => 'required|string', // Require location
        'real_file_name' => 'required|string', // Require real file name
        'fyear' => 'required|string', // Require real file name
        'Month' => 'required|string', // Require real file name
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
        'location.required' => 'Location is required.',
        'real_file_name.required' => 'Real File name is required.',
        'fyear.required' => 'Financial Year is required.',
        'Month.required' => 'Month is required.',
    ]);
    // Legal / Secretarial / Deposit Undertakings
    $user = auth()->user();

    if ($request->hasFile('files')) {
        // Process each file
        
        $PreBank_exists = [];
        $PreBank_do_not_exists = [];
        foreach ($request->file('files') as $file) {

            $fileExists = CommonTable::where('file_name', $file->getClientOriginalName())
            ->where('user_id', auth()->user()->id)
            ->where('file_type', $file->getClientMimeType())
            ->where('real_file_name', $request->input('real_file_name'))
            ->where('bank_name', $request->input('bank_name'))
            ->where('fyear', $request->input('fyear'))
            ->where('month', $request->input('Month'))
            ->where('location', $request->input('location'))
            ->exists();

            // $query = CommonTable::where('file_name', $file->getClientOriginalName())
            //     ->where('user_id', auth()->user()->id)
            //     ->where('file_type', $file->getClientMimeType())
            //     ->where('fyear', $request->input('fyear'))
            //     ->where('month', $request->input('Month'))
            //     ->where('location', $request->input('location'));

            // // Print the query with bindings
            // $sql = vsprintf(
            //     str_replace('?', "'%s'", $query->toSql()),
            //     $query->getBindings()
            // );

            // dd($sql);
            if ($fileExists) {
                $PreBank_exists[]=$file->getClientOriginalName();
            } else {
                $PreBank_do_not_exists[]=$file->getClientOriginalName();
            }
        }
        // Compile the response
        return response()->json([
            'success' => true,
            'PreBank_do_not_exists' => $PreBank_do_not_exists,
            'PreBank_exists' => $PreBank_exists,
            
        ]);
       
    } else {
        // No files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}

public function PreBankHandleCommonUploadFiles(Request $request)
{
    if($request->input('replace')){ 
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_bank_newfiles2')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);
    
                // Process each file
                foreach ($request->file('pre_bank_newfiles2') as $file) {
                    try {
                       


                        // Retrieve the file's ID based on the given conditions
                     
                        $fileId = CommonTable::where('file_type', $file->getClientMimeType())
                        ->where('file_name', $file->getClientOriginalName())
                        // ->where('file_path', $filePath)  // Comment out if you don't need this condition
                        ->where('user_id', auth()->user()->id)
                        ->where('fyear', $request->input('fyear'))
                        ->where('month', $request->input('Month'))
                        ->where('real_file_name', $request->input('real_file_name'))
                        ->where('bank_name', $request->input('bank_name'))
                        ->whereNull('is_replaced')
                        ->value('id'); // Use `value('id')` to get only the ID

                        // dd($fileId); // This will give you the ID if the file exists, or null if it doesn't.
                        // Check if the file exists
                        if ($fileId) {
                             // Retrieve the file record based on the ID
                            $fileRecord = CommonTable::find($fileId); // Use `find()` to get the full record by ID

                            // dd($fileRecord);
                            if ($fileRecord) {
                                // File record found, update the `is_replaced` field to 1
                                $fileRecord->is_replaced = 1;
                                if($fileRecord->save()){

                                    $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                                    $folderPaths2 = $folderPath;
                                    $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                                    $folderName = trim($folderName);

                                    // Store file details in the database
                                    $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                                    $extension = $file->getClientOriginalExtension(); // Get the file extension
                                    $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                                    $filePath = $file->store($folderPath);
                                    $storedFileName = basename($filePath);  

                                    // CommonTable::create([
                                    //     'file_type' => $file->getClientMimeType(),
                                    //     'file_name' => $file->getClientOriginalName(),
                                    //     'file_size' => $file->getSize(),
                                    //     'file_path' => $filePath,
                                    //     'temp_file_name' => $storedFileName,
                                    //     'user_name' => auth()->user()->name,
                                    //     'user_id' => auth()->user()->id,
                                    //     'file_status' => $request->input('file_status', 0),
                                    //     'fyear' => $request->input('fyear'),
                                    //     'month' => $request->input('Month'),
                                    //     'real_file_name' => $request->input('real_file_name'),
                                    //     'tags' => $tags, // Store tags as JSON
                                    //     'location' => $folderPath,
                                    //     'descp' => $request->input('desc'),
                                    // ]);

                                     // Store file details in the database
                                    $newEntry = CommonTable::create([
                                        'file_type' => $file->getClientMimeType(),
                                        'file_name' => $file->getClientOriginalName(),
                                        'file_size' => $file->getSize(),
                                        'file_path' => $filePath,
                                        'temp_file_name' => $storedFileName,
                                        'user_name' => auth()->user()->name,
                                        'user_id' => auth()->user()->id,
                                        'file_status' => $request->input('file_status', 0),
                                        'fyear' => $request->input('fyear'),
                                        'month' => $request->input('Month'),
                                        'real_file_name' => $request->input('real_file_name'),
                                        'tags' => $tags, // Store tags as JSON
                                        'bank_name'=>$request->input('bank_name'),
                                        'location' => $folderPath,
                                        'folder_name'=>$folderName,
                                        'descp' => $request->input('desc'),
                                    ]);

                                    // Update the `replaced_by` field of the original file record with the new entry ID
                                    if ($newEntry) {
                                        $fileRecord->replaced_by = $newEntry->id;
                                        $fileRecord->save(); // Save the updated file record
                                    }

                                    
                                    // return response()->json(['message' => 'File replaced Successfully'], 404);
                                    $successMessages[]='File replaced Successfully';

                                }else{
                                 $errorMessages[] = "Failed to update the existing the file.";
                                }
                             
                            } else {
                                // dd('File record not found!');
                               $errorMessages[] = "Failed to find the old file.";

                            }

                        } else {
                            // No file found, handle accordingly
                            return response()->json(['message' => 'File not found'], 404);
                        }
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} replaced successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->where('bank_name', $request->input('bank_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }


    }
    if($request->input('keep')){
        // dd("in keep");
         // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
    
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_bank_newfiles3')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

                    // $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
    
                // Process each file
                // foreach ($request->file('newfiles3') as $file) {
                //     try {
                //         $filePath = $file->store($folderPath);

                //         // Store file details in the database
                //         CommonTable::create([
                //             'file_type' => $file->getClientMimeType(),
                //             'file_name' => $file->getClientOriginalName(),
                //             'file_size' => $file->getSize(),
                //             'file_path' => $filePath,
                //             'user_name' => auth()->user()->name,
                //             'user_id' => auth()->user()->id,
                //             'file_status' => $request->input('file_status', 0),
                //             'fyear' => $request->input('fyear'),
                //             'month' => $request->input('Month'),
                //             'tags' => $tags, // Store tags as JSON
                //             'location' => $folderPaths,
                //             'descp' => $request->input('desc'),
                //             'is_keep'=> 1,
                //         ]);
                //         // return response()->json(['message' => 'File replaced Successfully'], 404);
                //         // $successMessages[]='File uploaded Successfully';
 
                //         $totalSize += $file->getSize();
                //         $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                //     } catch (\Exception $e) {
                //         $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                //     }
                // }



                foreach ($request->file('pre_bank_newfiles3') as $file) {
                    try {
                        $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                        $folderPaths2 = $folderPath;
                        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                        $folderName = trim($folderName);

                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                
                        // Check if the file name exists in the database and append a counter if it does
                        $counter = 1;
                        while (CommonTable::where('file_name', $fileName)->where('location', $folderPath)->whereNull('is_replaced')->exists()) {
                            $fileName = $originalFileName . " ($counter)." . $extension;
                            $counter++;
                        }
                        
                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPath);
                        $storedFileName = basename($filePath);  
                
                        // Save the file with the updated unique name
                        // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);

                
                        // // Store file details in the database
                        // CommonTable::create([
                        //     'file_type' => $file->getClientMimeType(),
                        //     'file_name' => $fileName, // Use the updated unique name
                        //     'file_size' => $file->getSize(),
                        //     'file_path' => $filePath,
                        //     'temp_file_name' => $storedFileName,
                        //     'user_name' => auth()->user()->name,
                        //     'user_id' => auth()->user()->id,
                        //     'file_status' => $request->input('file_status', 0),
                        //     'fyear' => $request->input('fyear'),
                        //     'month' => $request->input('Month'),
                        //     'real_file_name' => $request->input('real_file_name'),
                        //     'tags' => $tags, // Store tags as JSON
                        //     'location' => $folderPath,
                        //     'descp' => $request->input('desc'),
                        //     'is_keep' => 1,
                        // ]);

                         // Store file details in the database
                         CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $fileName,
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'real_file_name' => $request->input('real_file_name'),
                            'bank_name'=>$request->input('bank_name'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPath,
                            'folder_name'=>$folderName,
                            'descp' => $request->input('desc'),
                            'is_keep' => 1,
                        ]);
                
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$fileName} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->where('bank_name', $request->input('bank_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
                
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }
    if($request->input('upload')){
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
            'location' => 'required|string', // Require location
            'real_file_name' => 'required|string', // Require real file name
            'fyear' => 'required|string', // Require real file name
            'Month' => 'required|string', // Require real file name
    
    
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
            'location.required' => 'Location is required.',
            'real_file_name.required' => 'Real File name is required.',
            'fyear.required' => 'Financial Year is required.',
            'Month.required' => 'Month is required.',
    
        ]);
    
        // Check if folder path is provided
        // $folderPath = $request->input('parent_folder');
        // $folderPaths = $request->input('parent_folder');
        // dd($folderPath);

        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('pre_bank_newfiles')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                // $tag_list = [];
    
                // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
                    // Default tags
                    $tag_list = [];
                    
                    // $automated_tags=[];
                    
                    $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
                    $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
                    $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
                    $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
                    // Merge both arrays
                    $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
                    // Display the merged array
                    // dd($merged_automated_tags);
                    

                    // Handle tagList whether it's an array, a comma-separated string, or empty
                    $userTags = $request->input('tagList', []);
                    
                    // Convert to array if it's a comma-separated string
                    if (is_string($userTags)) {
                        $userTags = explode(',', $userTags);
                    }
                    // Ensure $userTags is an array and remove any empty values
                    if (is_array($userTags)) {
                        $userTags = array_filter($userTags); // Remove empty values
                    } else {
                        $userTags = []; // Fallback to empty array if not an array
                    }
                    
                    // Merge with default tags
                    $tag_list = array_merge($tag_list, $userTags);
                    // dd($tag_list);
                    
                    $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
                    //  dd($final_automated_tags);
                    // dd("okokokok");
                    
                    
                    // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
                    $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

                    // $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
                    // "Legal/Secretarial/Board Meetings" 
        
    
                // Process each file
                foreach ($request->file('pre_bank_newfiles') as $file) {
                    try {
                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        // // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);
                        $folderPath = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));

                        $folderPaths2 = $folderPath;
                        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
                        $folderName = trim($folderName);

                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPath);
                        $storedFileName = basename($filePath);  

    
                        // Store file details in the database
                        CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $file->getClientOriginalName(),
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'real_file_name' => $request->input('real_file_name'),
                            'bank_name'=>$request->input('bank_name'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPath,
                            'folder_name'=>$folderName,
                            'descp' => $request->input('desc'),
                        ]);
    
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }

                // Compile overall success message
                $user = auth()->user();
                $entries = CommonTable::where('user_id', $user->id)
                ->where('is_delete', 0)
                ->whereNull('is_replaced')
                ->where('location', $request->input('location'))
                ->where('real_file_name', $request->input('real_file_name'))
                ->where('bank_name', $request->input('bank_name'))
                ->get();
                $count = $entries->count();
                $totalFileSize = $entries->sum('file_size');

                $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

                if ($totalSizeKB > 1024) {
                    $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
                    if ($totalSizeMB > 1024) {
                        $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
                        $totalSizef = $totalSizeGB . ' GB';
                    } else {
                        $totalSizef = $totalSizeMB . ' MB';
                    }
                } else {
                    $totalSizef = $totalSizeKB . ' KB';
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'count' => $count,
                    'totalSize' => $totalSizef,
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                    'real_file_name' => $request->input('real_file_name'),
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }

    
}

// ////////////////////// new version PredefinedCommonUploadFiles end



// public function PredefinedCommonUploadFilesBank(Request $request)
// {
//     $request->validate([
//         'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
//         'tagList' => 'nullable', // Allow tagList to be nullable
//     ], [
//         'files.*.required' => 'Each file is required.',
//         'files.*.file' => 'The uploaded item must be a valid file.',
//         'files.*.max' => 'Each file may not be larger than 100MB.',
//         'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
//     ]);

//     if ($request->hasFile('files')) {
//         try {
//             // Initialize counters and message arrays
//             $totalSize = 0;
//             $successMessages = [];
//             $errorMessages = [];
            
//             // 22 August code added by sandeep ---- default tags added -- reference excel sheet shared by sir;
//                     // Default tags
//                     $tag_list = [];
                    
//                     // $automated_tags=[];
                    
//                     $automated_tags_temp1 = $request->input('location'); // 'Legal /Secretarial /Statutory Registers'
//                     $automated_tags_temp2 = $request->input('real_file_name'); // Example: 'File1 /File2 /File3'
                    
//                     $automated_tags_temp11 = array_map('trim', explode('/', $automated_tags_temp1)); // ['Legal', 'Secretarial', 'Statutory Registers']
//                     $automated_tags_temp22 = array_map('trim', explode('/', $automated_tags_temp2)); // ['File1', 'File2', 'File3']
                    
//                     // Merge both arrays
//                     $merged_automated_tags = array_merge($automated_tags_temp11, $automated_tags_temp22);
                    
//                     // Display the merged array
//                     // dd($merged_automated_tags);
                    

//                     // Handle tagList whether it's an array, a comma-separated string, or empty
//                     $userTags = $request->input('tagList', []);
                    
//                     // Convert to array if it's a comma-separated string
//                     if (is_string($userTags)) {
//                         $userTags = explode(',', $userTags);
//                     }
//                     // Ensure $userTags is an array and remove any empty values
//                     if (is_array($userTags)) {
//                         $userTags = array_filter($userTags); // Remove empty values
//                     } else {
//                         $userTags = []; // Fallback to empty array if not an array
//                     }
                    
//                     // Merge with default tags
//                     $tag_list = array_merge($tag_list, $userTags);
//                     // dd($tag_list);
                    
//                     $final_automated_tags = array_merge($merged_automated_tags , $tag_list);
//                     //  dd($final_automated_tags);
//                     // dd("okokokok");
                    
                    
//                     // $tags = empty($tag_list) ? NULL : json_encode($tag_list);
//                     $tags = empty($final_automated_tags) ? NULL : json_encode($final_automated_tags);

//                     $location = preg_replace('/\s*\/\s*/', '/', trim($request->input('location')));
//                     // "Legal/Secretarial/Board Meetings" 
        
//                     // Legal/Secretarial/Board Meetings/rtR2ORS7jdMq05zW6c704CUXesvrqkZ59ZNNWOib.pdf
//                     foreach ($request->file('files') as $file) {
//                         try {
//                             // Store file inside the dynamically created folder
//                             //////
//                             $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
//                             $extension = $file->getClientOriginalExtension(); // Get the file extension
//                             $fileName = $originalFileName . '.' . $extension; // Start with the original file name
//                             // $filePath = $file->storeAs($folderPath, $fileName);
//                             // $storedFileName = basename($filePath);  
//                             //////
                        
//                             //  $filePath = $file->storeAs($location,$fileName);
//                             // Create a new entry for each file
//                             $filePath = $file->store($location);

//                             $storedFileName = basename($filePath);
                           
//                             // Create a new entry for each file
//                             CommonTable::create([
//                                 'file_type' => $file->getClientMimeType(),
//                                 'file_name' => $file->getClientOriginalName(),
//                                 'real_file_name' => $request->input('real_file_name'),
//                                 'temp_file_name' => $storedFileName,
//                                 'file_size' => $file->getSize(),
//                                 'file_path' => $filePath,
//                                 'user_name' => auth()->user()->name, // Assuming user is authenticated
//                                 'user_id' => auth()->user()->id,
//                                 'file_status' => $request->input('file_status', 0),
//                                 'fyear' => $request->input('fyear'),
//                                 'month' => $request->input('Month'),
//                                 'tags' => $tags, // Store tags as JSON
//                                 'bank_name'=>$request->input('bank_name'),
//                                 'location' => $request->input('location'), // Store the dynamic location
//                                 'descp' => $request->input('desc'),
//                             ]);
        
//                             $totalSize += $file->getSize();
//                             $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
//                         } catch (\Exception $e) {
//                             $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to database.";
//                         }
//                     }

//             // Compile overall success message
//             // $user = auth()->user();
//     //             $entries = CommonTable::where('user_id', $user->id)
//     //     ->where('is_delete', 0)
//     //    ->where('location', 'LIKE', '%Bank Account Statements%')
//     //         ->where('real_file_name', 'Bank account statement')
//     //     ->get();
//     //             $count = $entries->count(); // Count of entries
//     //             $totalSizeKB = round($totalSize / 1024, 2); // Convert to KB and round

//             // return redirect()->back()->with('success2', 'File Uploaded successfully.');

//             $user = auth()->user();
//             $entries = CommonTable::where('user_id', $user->id)
//             ->where('is_delete', 0)
//             ->where('location', 'LIKE', $request->input('location'))
//             ->where('real_file_name', $request->input('real_file_name'))
//             ->get();
//             $count = $entries->count();
//             $totalFileSize = $entries->sum('file_size');

//             $totalSizeKB = round($totalFileSize / 1024, 2); // Convert to KB

//             if ($totalSizeKB > 1024) {
//                 $totalSizeMB = round($totalSizeKB / 1024, 2); // Convert to MB
//                 if ($totalSizeMB > 1024) {
//                     $totalSizeGB = round($totalSizeMB / 1024, 2); // Convert to GB
//                     $totalSizef = $totalSizeGB . ' GB';
//                 } else {
//                     $totalSizef = $totalSizeMB . ' MB';
//                 }
//             } else {
//                 $totalSizef = $totalSizeKB . ' KB';
//             }


//             return response()->json([
//                 'success' => empty($errorMessages),
//                 'count' => $count,
//                 'totalSize' => $totalSizef,
//                 'successMessages' => $successMessages,
//                 'errorMessages' => $errorMessages,
//                 'real_file_name' => $request->input('real_file_name'),
//             ]);

//         } catch (\Exception $e) {
//             // Handle any exceptions that occur during file upload or database saving
//             return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
//         }
//     } else {
//         // Return a JSON response indicating no files were uploaded
//         return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
//     }
// }

//////////////////////////////////////////// 4 october sandeep added code here for prdefined paths common pop upload form file upload  start /////////////////////////////////////////////////////////////////////////


public function fetchSecretarialStatutoryRegistersROSHFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Other Security Holders')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersFRFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', '⁠Foreign Register')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRDKFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Directors and KMP')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRCFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', '⁠Register of Charges')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRDFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Deposits')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRLGSFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Loans, Guarantees and Securities')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRCDFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Investments not held in Company’s name')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRCDIFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', '⁠Register of Contracts in which Directors are interested')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRSESFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Sweat Equity Shares')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRESOFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Employee Stock Options')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRSBBFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Securities Bought Back')
    ->get();
   
    return response()->json(['files' => $files]);
}

public function fetchSecretarialStatutoryRegistersRRDSCFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location',  $location)
    ->where('real_file_name', 'Register of Renewed or Duplicate Share Certificates')
    ->get();
   
    return response()->json(['files' => $files]);
}


public function fetchSecretarialStatutoryRegistersSBOFileData(Request $request)
{
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of SBO')
    ->get();
   
    return response()->json(['files' => $files]);
}

// public function fetchSecretarialStatutoryRegistersRPBFileData(Request $request)
// {
//     $location = $request->input('location');
//     $user = auth()->user();
//     $files = CommonTable::where('user_id', $user->id)
//     ->where('is_delete', 0)
//     ->where('location', $location)
//     ->where('real_file_name', 'Register of Postal Ballot')
//     ->get();
   
//     return response()->json(['files' => $files]);
// }

public function fetchSecretarialStatutoryRegistersRPBFileData(Request $request)
{
    $location = $request->input('location');
    $real_file_name = $request->input('real_file_name');
    // dd($location);
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $location)
    ->where('real_file_name', $real_file_name)
    ->get();
   
    return response()->json(['files' => $files]);
}
 
    
 public function fetchSecretarialStatutoryRegistersRMData()
{
    $user = Auth::user(); // Retrieve authenticated user

        // Fetch entries for the authenticated user
        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('real_file_name', 'Register of Members')
    ->get();

        // Calculate count and total size of files
        $count = $entries->count();
        $totalSize = $entries->sum('file_size');

        // Return JSON response
        return response()->json([
            'count' => $count,
            'totalSize' => $totalSize,
        ]);
}
public function fetchSecretarialStatutoryRegistersRMFileData(Request $request)
{
    
    $location = $request->input('location');
    $user = auth()->user();
    $files = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->where('location', $location)
    ->where('real_file_name', 'Register of Members')
    ->get();
   

    return response()->json(['files' => $files]);
}


// path end 

public function checkFilesboradminutebook()
{
   $userId = Auth::id();

   
    $files = CommonTable::where('user_id', $userId)->get();
    return response()->json($files);
}
public function checkEmailPhone(Request $request)
{
    $emailExists = User::where('backupemail', $request->backupemail)->exists();
    $phoneExists = User::where('phone', $request->phone)->exists();

    // Determine which exists, if any
    $message = '';
    if ($emailExists && $phoneExists) {
        $message = 'Both email and phone number already exist!';
    } elseif ($emailExists) {
        $message = 'The email already exists!';
    } elseif ($phoneExists) {
        $message = 'The phone number already exists!';
    }

    return response()->json([
        'exists' => $emailExists || $phoneExists,
        'email_exists' => $emailExists,
        'phone_exists' => $phoneExists,
        'message' => $message
    ]);
}


public function updateuserprofile(Request $request)
{
    // Validate the input data
    $validatedData = $request->validate([
        'user_id' => 'required|exists:users,id',
        'profile_picture' => 'nullable|mimes:jpeg,jpg,png,gif,svg|max:2048', // MIME type validation added
        'phone' => 'required|string|max:15|unique:users,phone,' . $request->user_id,
        'backupemail' => 'nullable|email|unique:users,backupemail,' . $request->user_id,
    ]);

    $userId = $request->input('user_id');
    $profileImage = $request->file('profile_picture');

    // Find the user by ID
    $user = User::find($userId);
    if ($user) {
        // If a profile image is uploaded, store it and update the user's profile picture
        if ($profileImage) {
            $fileName = time() . '_' . $profileImage->getClientOriginalName();
            $profileImage->move(public_path('uploads/profile_images'), $fileName);
            $user->profile_picture = 'uploads/profile_images/' . $fileName;
        }

        // Update other user fields
        $user->name_of_the_business = $request->input('name_of_the_business');
        $user->designation = $request->input('designation');
        $user->user_status = $request->input('user_status');
        $user->other_designation = $request->input('other_designation');
        $user->employees = $request->input('employees');
        $user->industry = $request->input('industry');
        $user->other_industry = $request->input('other_industry');
        $user->legal_entity = $request->input('legal_entity');
        $user->other_legal_entity = $request->input('other_legal_entity');
        $user->phone = $request->input('phone');
        $user->phoneone = $request->input('phoneone');
        $user->backupemail = $request->input('backupemail');
        $user->dece = $request->input('dece');
        
        $user->save(); // Save the updated user data
    }
// dd($user);
    // Find the user info associated with the user
    $userInfo = UserInfo::where('user_id', $userId)->first();
    if ($userInfo) {
        // If a profile image is uploaded, update the profile picture in user info
        if ($profileImage) {
            $userInfo->profile_picture = 'uploads/profile_images/' . $fileName;
        }

        // Update other fields in the user info
        $userInfo->name_of_the_business = $request->input('name_of_the_business');
        $userInfo->designation = $request->input('designation');
        $userInfo->user_status = $request->input('user_status');
        $userInfo->other_designation = $request->input('other_designation');
        $userInfo->employees = $request->input('employees');
        $userInfo->industry = $request->input('industry');
        $userInfo->other_industry = $request->input('other_industry');
        $userInfo->legal_entity = $request->input('legal_entity');
        $userInfo->other_legal_entity = $request->input('other_legal_entity');
        $userInfo->phone = $request->input('phone');
        $userInfo->phoneone = $request->input('phoneone');
        $userInfo->backupemail = $request->input('backupemail');
        $userInfo->dece = $request->input('dece');

        $userInfo->save(); // Save the updated user info data
    }

    // Redirect back with a success message
    return redirect()->back()->with('success', 'Profile updated successfully');
}



    

    public function updateVideoStatus(Request $request)
    {
        // Get the authenticated user
        $user = Auth::user();
        $user_id = $user->id;
    
        // Update video status for User model
        $user = User::find($user_id);
        if ($user) {
            $user->video_status = $request->input('video_status');
            $user->save();
        }
    
        // Update video status for UserInfo model
        $userInfo = UserInfo::where('user_id', $user_id)->first();
        if ($userInfo) {
            $userInfo->video_status = $request->input('video_status');
            $userInfo->save();
        }
    
        return response()->json(['message' => 'Video status updated successfully'], 200);
    }
    
        public function updateskipdemo(Request $request)
    {
        // Get the authenticated user
        $user = Auth::user();
        $user_id = $user->id;
    
        // Update video status for User model
        $user = User::find($user_id);
        if ($user) {
            $user->user_onboard = $request->input('user_onboard');
            $user->save();
        }
    
        // Update video status for UserInfo model
        $userInfo = UserInfo::where('user_id', $user_id)->first();
        if ($userInfo) {
            $userInfo->user_onboard = $request->input('user_onboard');
            $userInfo->save();
        }
    
        return response()->json(['message' => 'skip demo onbaord  status updated successfully'], 200);
    }
    
    
    public function indexuser()
    {
        $clientdata = ClientProfile::where('client_id', $user->id)->first();
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $today = Carbon::now()->toDateString(); // Get the current date in YYYY-MM-DD format
        $user = Auth::user(); // Get the currently authenticated user
        $employees = User::where('role', 'Employee')->get();
        $clients = User::where('role', 'Client')->get();
       
    $policy = PolicyFile::latest()->get();
      $events = DB::table('events as e')
    ->join('users as u', 'u.id', '=', 'e.client_id')
    ->where('e.client_id', $user->id)
    ->whereDate('e.start', '>=', $today)
    ->select('title', DB::raw('MAX(start) as start'), DB::raw('MAX(description) as description'))
    ->groupBy('title')
    ->get();

            // dd($events);
        return view('user.dashboard.index', ['user' => $user,'policy' => $policy,'clientdata' => $clientdata ,'cli_announcements' => $cli_announcements,'events' => $events]);
    }
    public function auditpro()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $audit = StoreAudit::all();
        $user = Auth::user();
       return view('user.Audit-pro.Audit-pro',compact('cli_announcements','audit','user'));
    }
	
    public function companystoreprofile(Request $request)
    {
       
// dd($request);
        $user_id = $request->input('user_id');
        // Validate the input data, including PAN and CIN validation
        // $request->validate([
           
        //     'CIN' => ['required', 'string', 'regex:/^([A-Z]{5}[0-9]{4}[A-Z]{1}[0-9]{6})$/', 'unique:users,cin,' . auth()->id()], // CIN format validation
        //     'PAN' => ['required', 'string', 'regex:/^([A-Z]{5}[0-9]{4}[A-Z]{1})$/', 'unique:users,pan,' . auth()->id()], // PAN format validation
        //     'Email' => 'required|email|unique:users,email,' . $user_id, // Ensure the email is unique except for the current user
        //     'phone' => 'required|string|max:15|unique:users,phone,' . $user_id, // Ensure the phone is unique except for the current user
            
        // ]);
    
        // Get the authenticated user
        $user = User::find($user_id);
    
        if ($user) {
            // Update the User model
            $user->update([
                'state' => $request->input('state'),
               'industry' => $request->input('industry'),
               'employees' => $request->input('employee_count'),
                'backupemail' => $request->input('Email'),
                'joining_date' => $request->input('DOI'),
                'phone' => $request->input('phone'),
                'CIN' => $request->input('CIN'),
                'PAN' => $request->input('PAN'),
                'authorized_capital' => $request->input('authorized_capital'),
                'paid_up_capital' => $request->input('paid_up_capital'),
            ]);
    // dd($user);
            // Find the associated UserInfo record
            $userInfo = UserInfo::where('user_id', $user_id)->first();
    
            if ($userInfo) {
                // Update existing UserInfo
                $userInfo->update([
                    'state' => $request->input('state'),
               'industry' => $request->input('industry'),
               'employees' => $request->input('employee_count'),
                'backupemail' => $request->input('Email'),
                'joining_date' => $request->input('DOI'),
                'phone' => $request->input('phone'),
                'CIN' => $request->input('CIN'),
                'PAN' => $request->input('PAN'),
                'authorized_capital' => $request->input('authorized_capital'),
                'paid_up_capital' => $request->input('paid_up_capital'),
                ]);
            } else {
                // If no UserInfo record exists, you can choose to return an error message
                return redirect()->back()->with('error', 'User information record not found.');
            }
        } else {
            // If user not found, you can choose to return an error message
            return redirect()->back()->with('error', 'User not found.');
        }
    
        // Return a redirect with a success message
        return redirect()->back()->with('success', 'Profile updated successfully');
    }
    
// In web.php (routes file)


// In UserController.php
public function checkUserExistence(Request $request)
{
    $emailExists = User::where('backupemail', $request->email)->exists();
    $phoneExists = User::where('phone', $request->phone)->exists();

    return response()->json([
        'emailExists' => $emailExists,
        'phoneExists' => $phoneExists
    ]);
}

//    public function storeregister(Request $request){
//     dd($request);
//    }

    public function storedirector(Request $request)
    {
      
    
        // Handle file upload
       
        $file = $request->file('file');
        $fileName = $file->getClientOriginalName();
        
        
        // Move the uploaded file to the public directory
        $file->move(public_path('director_images'), $fileName);
        
        // Get the file path relative to the public directory
        $imagePath = 'director_images/' . $fileName;
    
        // Create DirectorStore model and save data
        DirectorStore::create([
            'dname' => $request->dname,
            'drfile' => $imagePath,
            'status' => $request->status,
            'expiredate' => $request->expiredate ?? null,
            'activedate' => $request->activedate ?? null,
            'location' => $request->location,
        ]);
    
        // Redirect or return response as needed
        return redirect()->back()->with('success', 'Director information stored successfully.');
    }

    public function dirupdate(Request $request)
    {
       

        // Get the file and store it in a directory
        $file = $request->file('aadharcard_filepath');
        $filePath = $file->store('uploads'); // Adjust directory path as needed

        // Update the record in the database
        $directorStore = DirectorStore::findOrFail($request->input('hidden_id'));
        $directorStore->aadharcard_filepath = $filePath;
        $directorStore->save();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'File uploaded successfully.');
    }
    public function dirupdate3(Request $request)
    {
       

        // Get the file and store it in a directory
        $file = $request->file('passport_filepath');
        $filePath = $file->store('uploads'); // Adjust directory path as needed

        // Update the record in the database
        $directorStore = DirectorStore::findOrFail($request->input('hidden_id'));
        $directorStore->passpost_filepath = $filePath;
        $directorStore->save();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'File uploaded successfully.');
    }
    public function dirupdate1(Request $request)
    {
       

        // Get the file and store it in a directory
        $file = $request->file('voterid_filepath');
        $filePath = $file->store('uploads'); // Adjust directory path as needed

        // Update the record in the database
        $directorStore = DirectorStore::findOrFail($request->input('hidden_id'));
        $directorStore->voterid_filepath = $filePath;
        $directorStore->save();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'File uploaded successfully.');
    }

    public function downloadaadharFile1($id)
    {
        $file = DirectorStore::findOrFail($id);
        
        // For example, if the file is stored in the storage/app/uploads directory
        $filePath = storage_path('app/' . $file->aadharcard_filepath);
        
        return response()->download($filePath, $file->real_file_name);
    }
    public function downloadpanFile1($id)
    {
        $file = DirectorStore::findOrFail($id);
        
        // For example, if the file is stored in the storage/app/uploads directory
        $filePath = storage_path('app/' . $file->pancard_filepath);
        
        return response()->download($filePath, $file->real_file_name);
    }
    public function downloadvoterFile1($id)
    {
        $file = DirectorStore::findOrFail($id);
        
        // For example, if the file is stored in the storage/app/uploads directory
        $filePath = storage_path('app/' . $file->voterid_filepath);
        
        return response()->download($filePath, $file->real_file_name);
    }
    public function downloadpassportFile1($id)
    {
        $file = DirectorStore::findOrFail($id);
        
        // For example, if the file is stored in the storage/app/uploads directory
        $filePath = storage_path('app/' . $file->passpost_filepath);
        
        return response()->download($filePath, $file->real_file_name);
    }
    public function voterfile($id)
    {
        $director = DirectorStore::find($id);

        if (!$director) {
            return redirect()->back()->with('error', 'Record not found.');
        }
    
        // Get the file path
        $filePath = storage_path('app/' . $director->voterid_filepath);
    
        // Check if the file exists
        if (file_exists($filePath)) {
            // Delete the file
            unlink($filePath);
        }
    
        // Update the database record with null for the file path
        $director->voterid_filepath = NULL;
        $director->save();
    
        return redirect()->back()->with('success', 'File deleted successfully.');
    }
    public function passportfile($id)
    {
        // Find the user by ID
        $director = DirectorStore::find($id);

        if (!$director) {
            return redirect()->back()->with('error', 'Record not found.');
        }
    
        // Get the file path
        $filePath = storage_path('app/' . $director->passpost_filepath);
    
        // Check if the file exists
        if (file_exists($filePath)) {
            // Delete the file
            unlink($filePath);
        }
    
        // Update the database record with null for the file path
        $director->passpost_filepath = NULL;
        $director->save();
    
        return redirect()->back()->with('success', 'File deleted successfully.');
    }
    public function aadharfile($id)
    {
        $director = DirectorStore::find($id);

    if (!$director) {
        return redirect()->back()->with('error', 'Record not found.');
    }

    // Get the file path
    $filePath = storage_path('app/' . $director->aadharcard_filepath);

    // Check if the file exists
    if (file_exists($filePath)) {
        // Delete the file
        unlink($filePath);
    }

    // Update the database record with null for the file path
    $director->aadharcard_filepath = NULL;
    $director->save();

    return redirect()->back()->with('success', 'File deleted successfully.');
    }
    public function panfile($id)
    {
        $director = DirectorStore::find($id);

        if (!$director) {
            return redirect()->back()->with('error', 'Record not found.');
        }
    
        // Get the file path
        $filePath = storage_path('app/' . $director->pancard_filepath);
    
        // Check if the file exists
        if (file_exists($filePath)) {
            // Delete the file
            unlink($filePath);
        }
    
        // Update the database record with null for the file path
        $director->pancard_filepath = NULL;
        $director->save();
    
        return redirect()->back()->with('success', 'File deleted successfully.');
    }

    public function customdocupss(Request $request)
    {
        // Get the file and store it in a directory
        $file = $request->file('custom_file');
        $filename = $request->input('file_name');
        $filePath = $file->store('uploads'); // Adjust directory path as needed
    
        // Create a new record in the database
        $directorStore = new CustomDirectorStore();
        $directorStore->director_id = $request->input('director_id');
        $directorStore->custom_file = $filePath;
        $directorStore->file_name = $filename;
        $directorStore->save();
    
        // Redirect back with a success message
        return redirect()->back()->with('success', 'File uploaded successfully.');
    }
    
    public function dirupdate2(Request $request)
    {
       

        // Get the file and store it in a directory
        $file = $request->file('pancard_filepath');
        $filePath = $file->store('uploads'); // Adjust directory path as needed

        // Update the record in the database
        $directorStore = DirectorStore::findOrFail($request->input('hidden_id'));
        $directorStore->pancard_filepath = $filePath;
        $directorStore->save();

        // Redirect back with a success message
        return redirect()->back()->with('success', 'File uploaded successfully.');
    }
    
    public function Complianceregulator()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        
       return view('user.Document-Repository.compliance-regulator',compact('cli_announcements'));
    }

    public function fixedManagement()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $contractNamesArray = StoreContract::pluck('contract_name')->toArray();
        $user = Auth::user();
        $fixed = StoreFixedAsset::all();
       return view('user.fixed-management.fixed-management',compact('cli_announcements','contractNamesArray','fixed','user'));
    }

    // public function storeevent(Request $request)
    // {
    //     $validatedData = $request->validate([
    //         'eventName' => 'required|string',
    //         'eventDate' => 'required|date',
    //         'repeat' => 'required|string|in:yearly,monthly,daily',
    //         'eventType' => 'required|string|in:anniversary,reminder',
    //     ]);
    
    //     // Create and store the event
    //     $event = new AdminEventCal();
    //     $event->eventName = $validatedData['eventName'];
    //     $event->eventDate = $validatedData['eventDate'];
    //     $event->repeat = $validatedData['repeat'];
    //     $event->eventType = $validatedData['eventType'];
    //     $event->save();
    
    //     // Return a redirect with success message
    //     return redirect()->back()->with('success', 'Event created successfully');
    // }
    public function storeevent(Request $request)
{
    $validatedData = $request->validate([
        'eventName' => 'required|string',
        'eventDate' => 'required|date',
        'repeat' => 'required|string|in:yearly,monthly,daily',
        'eventType' => 'required|string|in:anniversary,reminder',
    ]);

    // Create and store the event
    $event = new AdminEventCal();
    $event->eventName = $validatedData['eventName'];
    $event->eventDate = $validatedData['eventDate'];
    $event->repeat = $validatedData['repeat'];
    $event->eventType = $validatedData['eventType'];
    $event->save();

    // If the event repeats yearly, create events for each year
    if ($validatedData['repeat'] === 'yearly') {
        // Create events for the next 10 years (adjust as needed)
        for ($i = 1; $i <= 100; $i++) {
            $newEvent = new AdminEventCal();
            $newEvent->eventName = $validatedData['eventName'];
            $newEvent->eventDate = date('Y-m-d', strtotime($validatedData['eventDate'] . ' + ' . $i . ' year'));
            $newEvent->repeat = 'yearly';
            $newEvent->eventType = $validatedData['eventType'];
            $newEvent->save();
        }
    }

    // If the event repeats monthly, create events for each month
    if ($validatedData['repeat'] === 'monthly') {
        // Create events for the next 12 months (adjust as needed)
        for ($i = 1; $i <= 12; $i++) {
            $newEvent = new AdminEventCal();
            $newEvent->eventName = $validatedData['eventName'];
            $newEvent->eventDate = date('Y-m-d', strtotime($validatedData['eventDate'] . ' + ' . $i . ' month'));
            $newEvent->repeat = 'monthly';
            $newEvent->eventType = $validatedData['eventType'];
            $newEvent->save();
        }
    }

    // If the event repeats daily, create events for each day
    if ($validatedData['repeat'] === 'daily') {
        // Create events for the next 30 days (adjust as needed)
        for ($i = 1; $i <= 30; $i++) {
            $newEvent = new AdminEventCal();
            $newEvent->eventName = $validatedData['eventName'];
            $newEvent->eventDate = date('Y-m-d', strtotime($validatedData['eventDate'] . ' + ' . $i . ' day'));
            $newEvent->repeat = 'daily';
            $newEvent->eventType = $validatedData['eventType'];
            $newEvent->save();
        }
    }

    // Return a redirect with success message
    return redirect()->back()->with('success', 'Event(s) created successfully');
}

public function userimg(Request $request)
{
    // Validate the request to ensure a file and user ID is provided
    $request->validate([
        'use_id' => 'required|exists:users,id',
        'profile_image' => 'required|image|max:2048', // Optional validation for image size and type
    ]);

    // Get the user ID from the request
    $userId = $request->input('use_id');

    // Get the uploaded profile image
    $profileImage = $request->file('profile_image');

    // Generate a unique filename
    $fileName = time() . '_' . $profileImage->getClientOriginalName();

    // Move the file to the public/uploads/profile_images directory
    $profileImage->move(public_path('uploads/profile_images'), $fileName);

    // Update the User model
    $user = User::find($userId);

    if ($user) {
        // Update the user's profile image
        $user->profile_picture = 'uploads/profile_images/' . $fileName;
        $user->save();
    }

    // Update the UserInfo model
    $userInfo = UserInfo::where('user_id', $userId)->first();
    if ($userInfo) {
        // Update the user's profile image in the user_info table
        $userInfo->profile_picture = 'uploads/profile_images/' . $fileName;
        $userInfo->save();
    }

    // Redirect back or return a response
    return redirect()->back()->with('success', 'Profile image updated successfully');
}



    public function getEvents()
    {
        $events = AdminEventCal::all(); // Assuming AdminEventCal is your model for events
        return response()->json($events);
    }
    public function store(Request $request)
{
   
    
    
    if (Session::has('email_otp') && Session::get('email_otp') == $request->email_otp) {
            // Clear the email OTP from the session
            Session::forget('email_otp');

            // Check if a user with the provided email already exists
            $existingUser = User::where('email', $request->email)->first();

            // If the user does not exist, create a new account and log in the user
            if (!$existingUser) {
                // Create the user account
                $user = User::create([
                    'phone' => $request->phone,
                    'email' => $request->email,
                    'password' => Hash::make($request->password),
                    'role' => 'founder',
                    'designation' => $request->designation,
                    'name_of_the_business' => $request->name_of_the_business,
                    'industry' => $request->industry,
                    'employees' => $request->employees,
                    'name' =>$request->first_name.$request->last_name,
                    'cin_no' => $request->cin_no,
                ]);

                // Debugging: Check if user creation was successful
                if (!$user) {
                    Log::error('User creation failed.');
                    return redirect()->back()->with('error', 'User creation failed.');
                }

                // Retrieve the user ID
                $userId = $user->id;

                // Store additional user information in the user_info table
                UserInfo::create([
                    'user_id' => $userId,
                    'phone' => $request->phone,
                    'email' => $request->email,
                    'password' => $request->password,
                    'role' => 'founder',
                    'designation' => $request->designation,
                    'name_of_the_business' => $request->name_of_the_business,
                    'industry' => $request->industry,
                    'employees' => $request->employees,
                    'name' =>$request->first_name.$request->last_name,
                    'cin_no' => $request->cin_no,
                ]);

                

                return redirect()->route('login'); // Redirect to the user dashboard view
            } else {
                // User with the provided email already exists
                return redirect()->back()->with('error', 'User with this email already exists.');
            }
        } else {
            // OTP mismatch
            return redirect()->back()->with('error', 'Invalid OTP.');
        }
    
}

public function whiteboard()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
   return view('user.vandor-management.whiteboard',compact('cli_announcements','user'));
}


public function masteradmin()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    $user_id= $user->id;
    // dd($user_id);
    // dd($user);
    if($user_id==1 or $user_id==269){
        

        // Monthly Active Users (MAU)
        $mau = DB::table('user_logs')
        // ->select(DB::raw('DATE_FORMAT(logged_in_at, "%Y-%m") as month, COUNT(user_id) as active_users'))
        ->select(DB::raw('DATE_FORMAT(logged_in_at, "%Y-%m") as month, COUNT(DISTINCT user_id) as active_users'))
        ->groupBy('month')
        ->orderBy('month', 'ASC')
        ->get();
    
        // dd($mau);
        $dau = DB::table('user_logs')
        ->select(DB::raw('DATE(logged_in_at) as date, COUNT(DISTINCT user_id) as active_users'))
        // ->select(DB::raw('DATE(logged_in_at) as date, COUNT( user_id) as active_users'))
        ->groupBy('date')
        ->orderBy('date', 'ASC')
        ->get();
    
        // return response()->json([
        //     // 'dau' => $dau,
        //     'mau' => $mau,
        // ]);
       return view('master_admin.dashboard.dashboard',compact('cli_announcements', 'user' , 'mau' , 'dau'));

    }
    else{
        return redirect()->back()->with('error', 'You are not authorized to access this page');
    }
   
}

// sandeep added code here for MAU DAU   start 20 November 2024

// public function getUserActivityData()
// {
//     // Daily Active Users (DAU)
//     // $dau = DB::table('user_logs')
//     //     ->select(DB::raw('DATE(logged_in_at) as date, COUNT(DISTINCT user_id) as active_users'))
//     //     ->groupBy('date')
//     //     ->orderBy('date', 'ASC')
//     //     ->get();

//     // Monthly Active Users (MAU)
//     $mau = DB::table('user_logs')
//         ->select(DB::raw('DATE_FORMAT(logged_in_at, "%Y-%m") as month, COUNT(DISTINCT user_id) as active_users'))
//         ->groupBy('month')
//         ->orderBy('month', 'ASC')
//         ->get();

//     return response()->json([
//         'dau' => $dau,
//         'mau' => $mau,
//     ]);
// }

// sandeep added code here for MAU DAU   end 20 November 2024


public function masterclientanagement()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    $user_id= $user->id;
    // dd($user_id);
    // dd($user);
    if($user_id==1 or $user_id==269){

        $clients  = User::whereNotNull('name_of_the_business')
        ->whereNull('is_delete') // Use whereNull() for checking NULL values
        ->get();

        // dd($clients->pluck('id')->toArray());
        $clients_arr= $clients->pluck('id')->toArray();
        // dd($clients_arr);
    
        // return response()->json([
        //     // 'dau' => $dau,
        //     'mau' => $mau,
        // ]);
         // daily activity tracking start sandeep 22 November 2024

        $time_arr=[];

        $last14Days = collect();
            for ($i = 13; $i >= 0; $i--) {
                $date = Carbon::now()->subDays($i);
                $last14Days[$date->format('D') . ' ' . $date->format('Y-m-d')] = 0; // Example: MON 2024-11-08 => 0
            }

        foreach($clients_arr as $key){
            // dd($key);
          $client_user_ids = User::where('createdby_id', $key)->pluck('id'); // Get all related user IDs
          $client_user_ids[]=$key;
        //   dd($client_user_ids);

            

            // Query to calculate the time difference in minutes
            $timeDifferences = DB::table('user_logs')
            ->selectRaw(
                'DATE(logged_in_at) as log_date, SUM(TIMESTAMPDIFF(MINUTE, logged_in_at, last_activity_at)) as total_minutes'
            )
            ->whereIn('user_id', $client_user_ids)  // Filter by user IDs
            ->where('logged_in_at', '>=', Carbon::now()->subDays(14)) // Last 14 days
            ->groupBy('log_date')
            ->get()
            ->mapWithKeys(function ($item) {
                $date = Carbon::parse($item->log_date);
                return [$date->format('D') . ' ' . $date->format('Y-m-d') => (int)$item->total_minutes];
            });

            // Merge the time differences into the initialized array
            $finalDataTime = $last14Days->mapWithKeys(function ($count, $day) use ($timeDifferences) {
            return [$day => $timeDifferences->get($day, 0)]; // Use the calculated total minutes or 0
            });

            // Convert collection to array
            $finalDataTimeArray = $finalDataTime->toArray();

            // Extract labels and data
            $labels_durations = array_keys($finalDataTimeArray);
            $data_durations = array_values($finalDataTimeArray);
            $total_minutes = array_sum($data_durations); // Total time difference in minutes
            
            // Convert total minutes to hours and minutes
            $hours = intdiv($total_minutes, 60); // Get the number of hours
            $minutes = $total_minutes % 60; // Get the remaining minutes

            // Format the result
            $time_formatted = "{$hours}h {$minutes}m";
            $time_arr[] = $time_formatted;

        }
        // dd($time_arr);

       

        return view('master_admin.client_management.client_management',compact('cli_announcements', 'user' , 'clients','time_formatted', 'time_arr'));
    }
    else{
        return redirect()->back()->with('error', 'You are not authorized to access this page');
    }
//    return view('master_admin.client_management.client_management',compact('cli_announcements', 'user'));
}

public function masterclientanagementdetail($id)
{
    // dd($id);
    $user = Auth::user();
    $user_id= $user->id;
    // dd($user_id);
    // dd($user);
    if($user_id==1 or $user_id==269){
        // Fetch the client by ID
        $client = User::find($id);
          // Check if client exists
        if (!$client) {
            abort(404, 'Client not found');
        }
      
        $totalStorage = 3.0; // Assume total storage in GB
        $usedStorageBytes = CommonTable::where('user_id', $client->id)->sum('file_size'); // Example sum in bytes

        $client_user_ids = User::where('createdby_id', $client->id)->pluck('id'); // Get all related user IDs

        $usedStorageBytes+= CommonTable::whereIn('user_id', $client_user_ids)->sum('file_size'); // Sum file_size for those user IDs
        //   dd($client_user_ids); 
        
        $usedStorage = round($usedStorageBytes / (1024 * 1024 * 1024), 2); // Convert to GB
        $percentage = round(($usedStorage / $totalStorage) * 100, 2); // Calculate percentage

        // dd($fileSizeSum);
        // client and client_users login counts start
        // $loginCounts = DB::table('user_logs')
        // ->selectRaw('DATE(logged_in_at) as login_date, COUNT(*) as login_count')
        // ->where('user_id', $client->id)
        // ->where('logged_in_at', '>=', Carbon::now()->subDays(14)) // Last 14 days
        // ->groupBy('login_date')
        // ->orderBy('login_date', 'asc')
        // ->get();

        // Initialize an array for the last 14 days
        $last14Days = collect();
        for ($i = 13; $i >= 0; $i--) {
            $date = Carbon::now()->subDays($i);
            $last14Days[$date->format('D') . ' ' . $date->format('Y-m-d')] = 0; // Example: MON 2024-11-08 => 0
        }

        $client_user_ids[] = $client->id;  // or array_push($client_user_ids, $client->id);

        $loginCounts = DB::table('user_logs')
        ->selectRaw('DATE(logged_in_at) as log_date, COUNT(*) as login_count')
        // ->where('user_id', $client->id)
        ->whereIn('user_id', $client_user_ids)  // Filter by user IDs
        ->where('logged_in_at', '>=', Carbon::now()->subDays(14))
        ->groupBy('log_date')
        ->get()
        ->mapWithKeys(function ($item) {
            $date = Carbon::parse($item->log_date);
            return [$date->format('D') . ' ' . $date->format('Y-m-d') => $item->login_count];
        });

        // Merge the login counts into the initialized array
        $finalData = $last14Days->mapWithKeys(function ($count, $day) use ($loginCounts) {
            return [$day => $loginCounts->get($day, 0)]; // Replace 0 with actual count if available
        });

        // Convert collection to array
        $finalDataArray = $finalData->toArray();

        // Extract labels and data
        $labels_logins = array_keys($finalDataArray);
        $data_logins = array_values($finalDataArray);
        $total_login_count = array_sum($data_logins);


        // dd($finalData);
        // client and client_users login counts end

        // daily activity tracking start sandeep 22 November 2024

        // Query to calculate the time difference in minutes
        $timeDifferences = DB::table('user_logs')
        ->selectRaw(
            'DATE(logged_in_at) as log_date, SUM(TIMESTAMPDIFF(MINUTE, logged_in_at, last_activity_at)) as total_minutes'
        )
        ->whereIn('user_id', $client_user_ids)  // Filter by user IDs
        ->where('logged_in_at', '>=', Carbon::now()->subDays(14)) // Last 14 days
        ->groupBy('log_date')
        ->get()
        ->mapWithKeys(function ($item) {
            $date = Carbon::parse($item->log_date);
            return [$date->format('D') . ' ' . $date->format('Y-m-d') => (int)$item->total_minutes];
        });

        // Merge the time differences into the initialized array
        $finalDataTime = $last14Days->mapWithKeys(function ($count, $day) use ($timeDifferences) {
        return [$day => $timeDifferences->get($day, 0)]; // Use the calculated total minutes or 0
        });

        // Convert collection to array
        $finalDataTimeArray = $finalDataTime->toArray();

        // Extract labels and data
        $labels_durations = array_keys($finalDataTimeArray);
        $data_durations = array_values($finalDataTimeArray);
        $total_minutes = array_sum($data_durations); // Total time difference in minutes
        
        // Convert total minutes to hours and minutes
        $hours = intdiv($total_minutes, 60); // Get the number of hours
        $minutes = $total_minutes % 60; // Get the remaining minutes

        // Format the result
        $time_formatted = "{$hours} h {$minutes} m";

        





        // daily activity tracking end sandeep 22 November 2024



        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        return view('master_admin.client_management.client_management_detail',compact('cli_announcements', 'user' , 'client' , 'totalStorage', 'usedStorage','percentage','labels_logins','data_logins','total_login_count','labels_durations','data_durations','time_formatted'));
    }
    else{
        return redirect()->back()->with('error', 'You are not authorized to access this page');
    }
}

public function publicclink()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    
   return view('user.public_view.publiclink',compact('cli_announcements'));
}

public function advsearch()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
     $category = '';
    $section = '';
    $subsection = '';
  

    // Return the view with both cli_announcements and results
    return view('user.public_view.advancesearch', compact('cli_announcements','category','section','subsection')); 
}

public function showAdvSearch(Request $request)
{
    // Get the query parameters
    $category = $request->query('category');
    $section = $request->query('section');
    $subsection = $request->query('subsection');
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = auth()->user();

    // Initialize an empty array to hold the results
    $results = [];

    // Define table names and their respective aliases
    $tables = [
        'common_table' => 'common_table'
    ];

    // Determine the selected table and location filter based on the query parameters
    $selectedTable = null;
    $locationFilter = null;
    $realFileNameFilter = null;

    if ($category === 'Secretarial' && $section === 'Board Meetings') {
        switch ($subsection) {
            case 'Notices':
                $selectedTable = 'common_table';
                $locationFilter = 'Board Meetings';
                $realFileNameFilter = 'Notices';
                break;
                case 'Minute Book':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Board Meetings';
                    $realFileNameFilter = 'Minute Book';
                    break;
                    case 'Attendance sheet':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Board Meetings';
                        $realFileNameFilter = 'Attendance sheet';
                        break;
            case 'Resolutions':
                $selectedTable = 'common_table';
                $locationFilter = 'Board Meetings';
                $realFileNameFilter = 'Resolutions';
                break;
           
            
            default:
                $selectedTable = null;
                break;
        }
    }
    else if ($category === 'Secretarial' && $section === 'Annual Filings') {
        switch ($subsection) {
            case 'AoC-4 (Annual Filing Statement Form)':
                $selectedTable = 'common_table';
                $locationFilter = 'Annual Filings';
                $realFileNameFilter = 'AoC-4 (Annual Filing Statement Form)';
                break;
                case 'AoC-4 (CFS) (Form for filing consolidated financial statements and other documents with the Registrar)':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Annual Filings';
                    $realFileNameFilter = 'AoC-4 (CFS) (Form for filing consolidated financial statements and other documents with the Registrar)';
                    break;
                    case 'MGT-7/ (Annual Return of a company)':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Annual Filings';
                        $realFileNameFilter = 'MGT-7/ (Annual Return of a company)';
                        break;
            case 'MGT-7A (Annual Return of a small company)':
                $selectedTable = 'common_table';
                $locationFilter = 'Annual Filings';
                $realFileNameFilter = 'MGT-7A (Annual Return of a small company)';
                break;
           
            
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Secretarial' && $section === 'Annual General Meeting') {
        switch ($subsection) {
            case 'Notices':
                $selectedTable = 'common_table';
                $locationFilter = 'Annual General Meeting';
                $realFileNameFilter = 'Notices';
                break;
                case 'Minute Book':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Annual General Meeting';
                    $realFileNameFilter = 'Minute Book';
                    break;
                    case 'Attendance sheet':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Annual General Meeting';
                        $realFileNameFilter = 'Attendance sheet';
                        break;
            case 'Resolutions':
                $selectedTable = 'common_table';
                $locationFilter = 'Annual General Meeting';
                $realFileNameFilter = 'Resolutions';
                break;
           
            
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Secretarial' && $section === 'Auditor Appointments') {
        switch ($subsection) {
            case 'Board Resolution for the appointment of Auditor':
                $selectedTable = 'common_table';
                $locationFilter = 'Auditor Appointments';
                $realFileNameFilter = 'Board Resolution for the appointment of Auditor';
                break;
                case 'Intimation to auditor':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Auditor Appointments';
                    $realFileNameFilter = 'Intimation to auditor';
                    break;
                    case 'Letter of appointment':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Auditor Appointments';
                        $realFileNameFilter = 'Letter of appointment';
                        break;
            case 'Certificate as per Rule 4 and consent by Auditor for his appointment':
                $selectedTable = 'common_table';
                $locationFilter = 'Auditor Appointments';
                $realFileNameFilter = 'Certificate as per Rule 4 and consent by Auditor for his appointment';
                break;
                case 'Acceptance letter for appointment':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Auditor Appointments';
                    $realFileNameFilter = 'Acceptance letter for appointment';
                    break;

                    case 'Special Resolution':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Auditor Appointments';
                        $realFileNameFilter = 'Special Resolution';
                        break;
            
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Secretarial' && $section === 'Auditor Exits') {
        switch ($subsection) {
            case 'ADT-3 form':
                $selectedTable = 'common_table';
                $locationFilter = 'Auditor Exits';
                $realFileNameFilter = 'ADT-3 form';
                break;
                case 'Resignation letter by auditor':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Auditor Exits';
                    $realFileNameFilter = 'Resignation letter by auditor';
                    break;
                    case 'Details of the grounds for seeking removal of auditor':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Auditor Exits';
                        $realFileNameFilter = 'Details of the grounds for seeking removal of auditor';
                        break;
            case 'Special Resolution':
                $selectedTable = 'common_table';
                $locationFilter = 'Auditor Exits';
                $realFileNameFilter = 'Special Resolution';
                break;
                case 'ADT-2 (Application for removal of auditor(s) before expiry of term)':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Auditor Exits';
                    $realFileNameFilter = 'ADT-2 (Application for removal of auditor(s) before expiry of term)';
                    break;

                    
            
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Secretarial' && $section === 'Deposit Undertakings') {
        switch ($subsection) {
            case 'Form DPT-3':
                $selectedTable = 'common_table';
                $locationFilter = 'Deposit Undertakings';
                $realFileNameFilter = 'Form DPT-3';
                break;
                

                    
            
            default:
                $selectedTable = null;
                break;
        }
    }


    
    else if ($category === 'Secretarial' && $section === 'Director Appointments') {
        switch ($subsection) {
            case 'DIR-3 form/ DIN number':
                $selectedTable = 'common_table';
                $locationFilter = 'Director Appointments';
                $realFileNameFilter = 'DIR-3 form/ DIN number';
                break;
                
                case 'DIR-3 KYC':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Director Appointments';
                    $realFileNameFilter = 'DIR-3 KYC';
                    break;

                    case 'DIR-6 form':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Director Appointments';
                        $realFileNameFilter = 'DIR-6 form';
                        break;
                    
                        case 'DIR-12 form':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Director Appointments';
                            $realFileNameFilter = 'DIR-12 form';
                            break;
            default:
                $selectedTable = null;
                break;
        }
    }


    else if ($category === 'Secretarial' && $section === 'Director Resignation Removal') {
        switch ($subsection) {
            case 'DIR-11 form':
                $selectedTable = 'common_table';
                $locationFilter = 'Director Resignation Removal';
                $realFileNameFilter = 'DIR-11 form';
                break;
                
                case 'DIR-12 form':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Director Resignation Removal';
                    $realFileNameFilter = 'DIR-12 form';
                    break;

                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Secretarial' && $section === 'Extra Ordinary General Meeting') {
        switch ($subsection) {
            case 'Notices':
                $selectedTable = 'common_table';
                $locationFilter = 'Extra Ordinary General Meeting';
                $realFileNameFilter = 'Notices';
                break;
                
                case 'Minute Book':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Extra Ordinary General Meeting';
                    $realFileNameFilter = 'Minute Book';
                    break;

                    case 'Attendance sheet':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Extra Ordinary General Meeting';
                        $realFileNameFilter = 'Attendance sheet';
                        break;

                        case 'Resolutions':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Extra Ordinary General Meeting';
                            $realFileNameFilter = 'Resolutions';
                            break;

                    
            default:
                $selectedTable = null;
                break;
        }
    }


    else if ($category === 'Secretarial' && $section === 'Incorporation') {
        switch ($subsection) {
            case 'RUN Form (Reserve Unique Name)':
                $selectedTable = 'common_table';
                $locationFilter = 'Incorporation';
                $realFileNameFilter = 'RUN Form (Reserve Unique Name)';
                break;
                
                case 'INC-9 (Declaration of Subscribers and First Directors)':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Incorporation';
                    $realFileNameFilter = 'INC-9 (Declaration of Subscribers and First Directors)';
                    break;

                    case 'SPICe+Part B (Simplified Proforma for Incorporating Company Electronically)':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Incorporation';
                        $realFileNameFilter = 'SPICe+Part B (Simplified Proforma for Incorporating Company Electronically)';
                        break;

                        case 'INC-33 SPICe MoA (e-Momorandum of Association)':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Incorporation';
                            $realFileNameFilter = 'INC-33 SPICe MoA (e-Momorandum of Association)';
                            break;

                            case 'INC-34 SPICe AoA (e-Articles of Association)':
                                $selectedTable = 'common_table';
                                $locationFilter = 'Incorporation';
                                $realFileNameFilter = 'INC-34 SPICe AoA (e-Articles of Association)';
                                break;
                                case 'INC-35 AGILE-PRO-s':
                                    $selectedTable = 'common_table';
                                    $locationFilter = 'Incorporation';
                                    $realFileNameFilter = 'INC-35 AGILE-PRO-s';
                                    break;

                                    case 'INC-22 (Notice of situation or change of situation of registered office)':
                                        $selectedTable = 'common_table';
                                        $locationFilter = 'Incorporation';
                                        $realFileNameFilter = 'INC-22 (Notice of situation or change of situation of registered office)';
                                        break;

                                        case 'INC-20A (Commencement of Business)':
                                            $selectedTable = 'common_table';
                                            $locationFilter = 'Incorporation';
                                            $realFileNameFilter = 'INC-20A (Commencement of Business)';
                                            break;

                    
            default:
                $selectedTable = null;
                break;
        }
    }


    else if ($category === 'Secretarial' && $section === 'Statutory Registers') {
        switch ($subsection) {
            case 'Register of Members':
                $selectedTable = 'common_table';
                $locationFilter = 'Statutory Registers';
                $realFileNameFilter = 'Register of Members';
                break;
                
                case 'Register of Other Security Holders':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Statutory Registers';
                    $realFileNameFilter = 'Register of Other Security Holders';
                    break;

                    case '⁠Foreign Register':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Statutory Registers';
                        $realFileNameFilter = '⁠Foreign Register';
                        break;

                        case 'Register of Directors and KMP':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Statutory Registers';
                            $realFileNameFilter = 'Register of Directors and KMP';
                            break;

                            case '⁠Register of Charges':
                                $selectedTable = 'common_table';
                                $locationFilter = 'Statutory Registers';
                                $realFileNameFilter = '⁠Register of Charges';
                                break;
                                case 'Register of Deposits':
                                    $selectedTable = 'common_table';
                                    $locationFilter = 'Statutory Registers';
                                    $realFileNameFilter = 'Register of Deposits';
                                    break;

                                    case 'Register of Loans, Guarantees and Securities':
                                        $selectedTable = 'common_table';
                                        $locationFilter = 'Statutory Registers';
                                        $realFileNameFilter = 'Register of Loans, Guarantees and Securities';
                                        break;

                                        case 'Register of Investments not held in Company’s name':
                                            $selectedTable = 'common_table';
                                            $locationFilter = 'Statutory Registers';
                                            $realFileNameFilter = 'Register of Investments not held in Company’s name';
                                            break;

                                            case 'Register of Contracts in which Directors are interested':
                                                $selectedTable = 'common_table';
                                                $locationFilter = 'Statutory Registers';
                                                $realFileNameFilter = 'Register of Contracts in which Directors are interested';
                                                break;

                                                case 'Register of Sweat Equity Shares':
                                                    $selectedTable = 'common_table';
                                                    $locationFilter = 'Statutory Registers';
                                                    $realFileNameFilter = 'Register of Sweat Equity Shares';
                                                    break;

                                                    case 'Register of Employee Stock Options':
                                                        $selectedTable = 'common_table';
                                                        $locationFilter = 'Statutory Registers';
                                                        $realFileNameFilter = 'Register of Employee Stock Options';
                                                        break;

                                                        case 'Register of Securities Bought Back':
                                                            $selectedTable = 'common_table';
                                                            $locationFilter = 'Statutory Registers';
                                                            $realFileNameFilter = 'Register of Securities Bought Back';
                                                            break;
                                                            case 'Register of Renewed or Duplicate Share Certificates':
                                                                $selectedTable = 'common_table';
                                                                $locationFilter = 'Statutory Registers';
                                                                $realFileNameFilter = 'Register of Renewed or Duplicate Share Certificates';
                                                                break;
                                                                case 'Register of SBO':
                                                                    $selectedTable = 'common_table';
                                                                    $locationFilter = 'Statutory Registers';
                                                                    $realFileNameFilter = 'Register of SBO';
                                                                    break;

                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Director Details') {
        switch ($subsection) {
            case 'Photo':
                $selectedTable = 'common_table';
                $locationFilter = 'Director Details';
                $realFileNameFilter = 'Photo';
                break;
                
                case 'Signature image':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Director Details';
                    $realFileNameFilter = 'Signature image';
                    break;

                    case 'Aadhar KYC':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Director Details';
                        $realFileNameFilter = '⁠Aadhar KYC';
                        break;

                        case 'PAN KYC':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Director Details';
                            $realFileNameFilter = 'PAN KYC';
                            break;

                            case '⁠Address Proof':
                                $selectedTable = 'common_table';
                                $locationFilter = 'Director Details';
                                $realFileNameFilter = 'Address Proof';
                                break;
                                case 'Contact Details':
                                    $selectedTable = 'common_table';
                                    $locationFilter = 'Director Details';
                                    $realFileNameFilter = 'Contact Details';
                                    break;

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Incorporation') {
        switch ($subsection) {
            case 'Memorandum of Association':
                $selectedTable = 'common_table';
                $locationFilter = 'Incorporation';
                $realFileNameFilter = 'Memorandum of Association';
                break;
                
                case 'Articles of Association':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Incorporation';
                    $realFileNameFilter = 'Articles of Association';
                    break;

                    case 'Certificate of incorporation':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Incorporation';
                        $realFileNameFilter = 'Certificate of incorporation';
                        break;

                        case 'Partnership deed':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Incorporation';
                            $realFileNameFilter = 'Partnership deed';
                            break;

                            case 'LLP Agreement':
                                $selectedTable = 'common_table';
                                $locationFilter = 'Incorporation';
                                $realFileNameFilter = 'LLP Agreement';
                                break;
                                case 'Trust Deed':
                                    $selectedTable = 'common_table';
                                    $locationFilter = 'Incorporation';
                                    $realFileNameFilter = 'Trust Deed';
                                    break;

                                    case 'Share certificates':
                                        $selectedTable = 'common_table';
                                        $locationFilter = 'Incorporation';
                                        $realFileNameFilter = 'Share certificates';
                                        break;

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Registrations') {
        switch ($subsection) {
            case 'PAN certificate':
                $selectedTable = 'common_table';
                $locationFilter = 'Registrations';
                $realFileNameFilter = 'PAN certificate';
                break;
                
                case 'TAN certificate':
                    $selectedTable = 'common_table';
                    $locationFilter = 'Registrations';
                    $realFileNameFilter = 'TAN certificate';
                    break;

                    case 'GSTIN certificate':
                        $selectedTable = 'common_table';
                        $locationFilter = 'Registrations';
                        $realFileNameFilter = 'GSTIN certificate';
                        break;

                        case 'MSME certificate':
                            $selectedTable = 'common_table';
                            $locationFilter = 'Registrations';
                            $realFileNameFilter = 'MSME certificate';
                            break;

                            case 'Trademark':
                                $selectedTable = 'common_table';
                                $locationFilter = 'Registrations';
                                $realFileNameFilter = 'Trademark';
                                break;
                                case 'Provident Fund certificate':
                                    $selectedTable = 'common_table';
                                    $locationFilter = 'Registrations';
                                    $realFileNameFilter = 'Provident Fund certificate';
                                    break;

                                    case 'Employee State Insurance certificate':
                                        $selectedTable = 'common_table';
                                        $locationFilter = 'Registrations';
                                        $realFileNameFilter = 'Employee State Insurance certificate';
                                        break;
                                        case 'Professional Tax certificate':
                                            $selectedTable = 'common_table';
                                            $locationFilter = 'Registrations';
                                            $realFileNameFilter = 'Professional Tax certificate';
                                            break;
                                            case 'Labour Welfare Fund certificate':
                                                $selectedTable = 'common_table';
                                                $locationFilter = 'Registrations';
                                                $realFileNameFilter = 'Labour Welfare Fund certificate';
                                                break;
                                                case 'POSH Policy':
                                                    $selectedTable = 'common_table';
                                                    $locationFilter = 'Registrations';
                                                    $realFileNameFilter = 'POSH Policy';
                                                    break;

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Bank Account Statements') {
        switch ($subsection) {
            case 'Bank Account Statement':
                $selectedTable = 'common_table';
                $locationFilter = 'Bank Account Statements';
                $realFileNameFilter = 'Bank Account Statement';
                break;
                
               

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Credit Card Statements') {
        switch ($subsection) {
            case 'Add Credit Card Statements':
                $selectedTable = 'common_table';
                $locationFilter = 'Credit Card Statements';
                $realFileNameFilter = 'Add Credit Card Statements';
                break;
                
               

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    else if ($category === 'Accounting Taxation' && $section === 'Mutual Fund Statements') {
        switch ($subsection) {
            case 'Add Mutual Fund Statements':
                $selectedTable = 'common_table';
                $locationFilter = 'Mutual Fund Statements';
                $realFileNameFilter = 'Add Mutual Fund Statements';
                break;
                
               

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }


    else if ($category === 'Accounting Taxation' && $section === 'Fixed Deposit Statements') {
        switch ($subsection) {
            case 'Fixed Deposit Account Statement':
                $selectedTable = 'common_table';
                $locationFilter = 'Fixed Deposit Statements';
                $realFileNameFilter = 'Fixed Deposit Account Statement';
                break;
                
               

                                    
                                                       
                    
            default:
                $selectedTable = null;
                break;
        }
    }

    // Fetch data for the selected table if available and filter by location and real_file_name
    if ($selectedTable && array_key_exists($selectedTable, $tables)) {
        $tableData = DB::table($selectedTable)
            ->select(
                DB::raw("'{$tables[$selectedTable]}' AS source_table"), 
                'id', 
                'file_name as name', 
                'user_name', 
                'fyear', 
                'Tags', 
                'file_size', 
                'created_at', 
                'real_file_name', 
                'location'
            )
            ->where('user_id', $user->id)
            ->where('is_delete', 0)
            ->where('location', 'like', "%{$locationFilter}%")
            ->where('real_file_name', $realFileNameFilter)
            ->get();

        $results = $tableData->toArray();
    }

    // Respond with JSON if the request is made via AJAX
    if ($request->ajax()) {
        return response()->json([
            'results' => $results,
        ]);
    }

    // Otherwise, return the view
    return view('user.public_view.advancesearch', [
        'category' => $category,
        'section' => $section,
        'subsection' => $subsection,
        'cli_announcements' => $cli_announcements,
        'results' => $results,
    ]);
}







public function liveSearch(Request $request)
    {
        $query = $request->get('query');
        $fyear = $request->get('fyear'); // Get the selected financial year
        $userId = Auth::id();

        // Base query for files
        $filesQuery = Files::where('user_id', $userId)
                           ->where('file_name', 'LIKE', "%{$query}%");

        if ($fyear) {
            $filesQuery->where('fyear', $fyear); // Apply financial year filter
        }

        $files = $filesQuery->get(['id', 'file_name as name', 'file_size', 'created_at', 'user_name', 'fyear', 'Tags', 'real_file_name', 'location']);

        // Queries for each board table
        $boardNotice = DB::table('board_notice')
            ->select(DB::raw("'board_notice' AS source_table"), 'id', 'file_name as name', 'user_name','fyear', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
            ->where('user_id', $userId)
            ->where('file_name', 'LIKE', "%{$query}%");

        if ($fyear) {
            $boardNotice->where('fyear', $fyear); // Apply financial year filter
        }

        $boardReso = DB::table('board_reso')
            ->select(DB::raw("'board_reso' AS source_table"), 'id', 'file_name as name', 'user_name','fyear', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
            ->where('user_id', $userId)
            ->where('file_name', 'LIKE', "%{$query}%");

        if ($fyear) {
            $boardReso->where('fyear', $fyear); // Apply financial year filter
        }

        $boardMinuteBook = DB::table('board_minute_book')
            ->select(DB::raw("'board_minute_book' AS source_table"), 'id', 'file_name as name', 'user_name','fyear', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
            ->where('user_id', $userId)
            ->where('file_name', 'LIKE', "%{$query}%");

        if ($fyear) {
            $boardMinuteBook->where('fyear', $fyear); // Apply financial year filter
        }

        $boardAs = DB::table('board_as')
            ->select(DB::raw("'board_as' AS source_table"), 'id', 'file_name as name', 'user_name','fyear', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
            ->where('user_id', $userId)
            ->where('file_name', 'LIKE', "%{$query}%");

        if ($fyear) {
            $boardAs->where('fyear', $fyear); // Apply financial year filter
        }

        $results = $boardNotice
            ->unionAll($boardReso)
            ->unionAll($boardMinuteBook)
            ->unionAll($boardAs)
            ->get();

        $formattedResults = $files->map(function ($file) {
            return [
                'id' => $file->id,
                'name' => $file->name,
                'fyear' => $file->fyear,
                'user_name' => $file->user_name,
                'file_size' => $file->file_size,
                'Tags' => $file->Tags,
                'created_at' => $file->created_at,
                'real_file_name' => $file->real_file_name,
                'location' => $file->location,
                'source_table' => null
            ];
        })->merge($results->map(function ($result) {
            return [
                'id' => $result->id,
                'name' => $result->name,
                'fyear' => $result->fyear,
                'user_name' => $result->user_name,
                'file_size' => $result->file_size,
                'Tags' => $result->Tags,
                'created_at' => $result->created_at,
                'real_file_name' => $result->real_file_name,
                'location' => $result->location,
                'source_table' => $result->source_table
            ];
        }));

        return response()->json($formattedResults);
    }




public function exactSearch(Request $request)
{
    $query = $request->get('query');
    $userId = Auth::id();

    $files = Files::where('user_id', $userId)
                  ->where('file_name', '=', $query)
                  ->get(['id', 'file_name as name', 'file_size', 'created_at', 'user_name', 'Tags', 'real_file_name', 'location']);

    $boardNotice = DB::table('board_notice')
        ->select(DB::raw("'board_notice' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('file_name', '=', $query);

    $boardReso = DB::table('board_reso')
        ->select(DB::raw("'board_reso' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('file_name', '=', $query);

    $boardMinuteBook = DB::table('board_minute_book')
        ->select(DB::raw("'board_minute_book' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('file_name', '=', $query);

    $boardAs = DB::table('board_as')
        ->select(DB::raw("'board_as' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('file_name', '=', $query);

    $results = $boardNotice
        ->unionAll($boardReso)
        ->unionAll($boardMinuteBook)
        ->unionAll($boardAs)
        ->get();

    $formattedResults = $files->map(function ($file) {
        return [
            'id' => $file->id,
            'name' => $file->name,
            'user_name' => $file->user_name,
            'size' => $file->file_size,
            'Tags' => $file->Tags,
            'created_date' => $file->created_at,
            'real_file_name' => $file->real_file_name,
            'location' => $file->location,
            'source_table' => null // Adding source_table for consistency
        ];
    })->merge($results->map(function ($result) {
        return [
            'id' => $result->id,
            'name' => $result->name,
            'user_name' => $result->user_name,
            'size' => $result->file_size,
            'Tags' => $result->Tags,
            'created_date' => $result->created_at,
            'real_file_name' => $result->real_file_name,
            'location' => $result->location,
            'source_table' => $result->source_table
        ];
    }));

    return response()->json($formattedResults);
}

public function prefileSearch(Request $request)
{
   
    $userId = Auth::id();

   

    $boardNotice = DB::table('board_notice')
        ->select(DB::raw("'board_notice' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId);

    $boardReso = DB::table('board_reso')
        ->select(DB::raw("'board_reso' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId);

    $boardMinuteBook = DB::table('board_minute_book')
        ->select(DB::raw("'board_minute_book' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId);

    $boardAs = DB::table('board_as')
        ->select(DB::raw("'board_as' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId);

    $results = $boardNotice
        ->unionAll($boardReso)
        ->unionAll($boardMinuteBook)
        ->unionAll($boardAs)
        ->get();

    foreach ($results as $result) {
        $formattedResults[] = [
            'id' => $result->id,
            'name' => $result->name,
           
             'user_name' => $result->user_name,
             'Tags' => $result->Tags,
            'size' => $result->file_size,
            'created_date' => $result->created_at,
            'real_file_name' => $result->real_file_name,
            'location' => $result->location
        ];
    }

    return response()->json($formattedResults);

    
}


public function fetchfyeardata(Request $request)
{
    $query = $request->get('year'); // Changed from 'query' to 'year' to match AJAX request
    $userId = Auth::id();

    $boardNotice = DB::table('board_notice')
        ->select(DB::raw("'board_notice' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('fyear', '=', $query);

    $boardReso = DB::table('board_reso')
        ->select(DB::raw("'board_reso' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('fyear', '=', $query);

    $boardMinuteBook = DB::table('board_minute_book')
        ->select(DB::raw("'board_minute_book' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('fyear', '=', $query);

    $boardAs = DB::table('board_as')
        ->select(DB::raw("'board_as' AS source_table"), 'id', 'file_name as name', 'user_name', 'Tags', 'file_size', 'created_at', 'real_file_name', 'location')
        ->where('user_id', $userId)
        ->where('fyear', '=', $query);

    $results = $boardNotice
        ->unionAll($boardReso)
        ->unionAll($boardMinuteBook)
        ->unionAll($boardAs)
        ->get();

    $formattedResults = []; // Initialize array
    foreach ($results as $result) {
        $formattedResults[] = [
            'id' => $result->id,
            'name' => $result->name,
            'user_name' => $result->user_name,
            'Tags' => $result->Tags,
            'size' => $result->file_size,
            'created_date' => $result->created_at,
            'real_file_name' => $result->real_file_name,
            'location' => $result->location
        ];
    }

    return response()->json($formattedResults);
}




public function customSearch(Request $request)
{
    // Get the search query and user ID from the request
    $query = $request->get('query');
    $userId = Auth::id();

    // Fetch files based on the search query and user ID
    $files = Files::where('user_id', $userId)
        ->where(function ($subQuery) use ($query) {
            $subQuery->where('file_name', 'LIKE', "%{$query}%")
                     ->orWhere('Tags', 'LIKE', "%{$query}%");
        })
        ->get(['id', 'file_name as name', 'file_size', 'created_at', 'user_name', 'Tags', 'real_file_name', 'location']);

    // Return the results as a JSON response
    return response()->json($files);
}

public function customfileCount(Request $request)
{

 $userId = Auth::id();
    $count = Files::where('user_id', $userId)->count();
    return response()->json(['count' => $count]);
    
}

    

public function trashbox()
{
    $user = auth()->user();
        $userId = Auth::id();
        // dd($user->role);
        
        $role = User::where('id', $userId)
                        ->where('role', $user->role)
                        ->where('Trash_Panel_Access', 1)
                        ->first();
        // dd($role);
        
        if (!$role) {
            echo "You have no Access to Trash Panel , Please Contact to your Account Provider";
            abort(404);  // Abort if the role is not found or access is not granted
        } 
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = auth()->user();
   $files = CommonTable::where('user_id', $user->id)
                    ->where('is_delete', 2)
                     ->orderBy('created_at', 'desc')
                    ->get();
                    $totalCount = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 2)
    ->count();

                    
                    $filess = CommonTable::where('user_id', $user->id)
                    ->where('is_delete', 1)
                     ->orderBy('created_at', 'desc')
                    ->get();


                    $folders = Folder::with('user')
                    ->where('user_id', $user->id)
                    ->where('is_delete', 2)
                     ->orderBy('created_at', 'desc')
                    ->get();
                    
                    $totalCountfolder = Folder::where('user_id', $user->id)
    ->where('is_delete', 2)
    ->count();

                    
                    $delfolder = Folder::with('user')
                    ->where('user_id', $user->id)
                    ->where('is_delete', 1)
                     ->orderBy('created_at', 'desc')
                    ->get();
                    
                    
                        $user = auth()->user();
         $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();
    
   return view('user.Trash.trash',compact('cli_announcements','files','filess','totalCount','user','folders','totalCountfolder','delfolder'));
}

// public function update(Request $request)
// {
//     // Get the authenticated user's ID
    
    
//     $authUserId = Auth::id();

//     // Get role_id and role_name from the request
//     $roleId = $request->input('role_id');
//     $roleName = $request->input('role_name');

//     // Fetch all matching users where createdby_id and role match
//     $users = User::where('createdby_id', $roleId)
//                  ->where('role', $roleName)
//                  ->get();

//     // Fetch all matching user info records where createdby_id and role match
//     $userInfos = UserInfo::where('createdby_id', $roleId)
//                          ->where('role', $roleName)
//                          ->get();

//     // If no matching users or user info found, return failure response
//     if ($users->isEmpty() && $userInfos->isEmpty()) {
//         return response()->json(['success' => false, 'message' => 'No matching user or user info found']);
//     }

//     // Loop through and update all matching users
//     foreach ($users as $user) {
//         $user->Edit_Password = $request->input('Edit_Password', $user->Edit_Password);
//         $user->View_Exception_Reports = $request->input('View_Exception_Reports', $user->View_Exception_Reports);
//         $user->Document_Repository_Access = $request->input('Document_Repository_Access', $user->Document_Repository_Access);
//         $user->Promoters_Vault_Access = $request->input('Promoters_Vault_Access', $user->Promoters_Vault_Access);
//         $user->Coming_Soon_Access = $request->input('Coming_Soon_Access', $user->Coming_Soon_Access);
//         $user->Trash_Panel_Access = $request->input('Trash_Panel_Access', $user->Trash_Panel_Access);
//         $user->Role_Access = $request->input('Role_Access', $user->Role_Access);

//         // Save the updated user record
//         $user->save();
//     }

//     // Loop through and update all matching user info records
//     foreach ($userInfos as $userInfo) {
//         $userInfo->Edit_Password = $request->input('Edit_Password', $userInfo->Edit_Password);
//         $userInfo->View_Exception_Reports = $request->input('View_Exception_Reports', $userInfo->View_Exception_Reports);
//         $userInfo->Document_Repository_Access = $request->input('Document_Repository_Access', $userInfo->Document_Repository_Access);
//         $userInfo->Promoters_Vault_Access = $request->input('Promoters_Vault_Access', $userInfo->Promoters_Vault_Access);
//         $userInfo->Coming_Soon_Access = $request->input('Coming_Soon_Access', $userInfo->Coming_Soon_Access);
//         $userInfo->Trash_Panel_Access = $request->input('Trash_Panel_Access', $userInfo->Trash_Panel_Access);
//         $userInfo->Role_Access = $request->input('Role_Access', $userInfo->Role_Access);

//         // Save the updated user info record
//         $userInfo->save();
//     }

//     // Return success response after all updates
//     return response()->json(['success' => true, 'message' => 'Permissions updated successfully']);
// }




public function update(Request $request)
{
    // Get the authenticated user's ID
    $authUserId = Auth::id();

    // Get role_id and role_name from the request
    $roleId = $request->input('role_id');
    $roleName = $request->input('role_name');

    // Fetch all matching users where createdby_id matches role_id or it's the auth user, and role matches
    $users = User::where(function($query) use ($roleId, $authUserId) {
                    $query->where('main_role_id', $roleId);
                         
                })
                ->where('role', $roleName)
                ->get();

    // Fetch all matching user info records where createdby_id matches role_id or it's the auth user, and role matches
    $userInfos = UserInfo::where(function($query) use ($roleId, $authUserId) {
                        $query->where('main_role_id', $roleId);
                              
                    })
                    ->where('role', $roleName)
                    ->get();

    // If no matching users or user info found, return failure response
    if ($users->isEmpty() && $userInfos->isEmpty()) {
        return response()->json(['success' => false, 'message' => 'No matching user or user info found']);
    }

    // Loop through and update all matching users
    foreach ($users as $user) {
        $user->Edit_Password = $request->input('Edit_Password', $user->Edit_Password);
        $user->View_Exception_Reports = $request->input('View_Exception_Reports', $user->View_Exception_Reports);
        $user->Document_Repository_Access = $request->input('Document_Repository_Access', $user->Document_Repository_Access);
        $user->Promoters_Vault_Access = $request->input('Promoters_Vault_Access', $user->Promoters_Vault_Access);
        $user->Coming_Soon_Access = $request->input('Coming_Soon_Access', $user->Coming_Soon_Access);
        $user->Trash_Panel_Access = $request->input('Trash_Panel_Access', $user->Trash_Panel_Access);
        $user->Role_Access = $request->input('Role_Access', $user->Role_Access);

        // Save the updated user record  
        $user->save();
    }

    // Loop through and update all matching user info records
    foreach ($userInfos as $userInfo) {
        $userInfo->Edit_Password = $request->input('Edit_Password', $userInfo->Edit_Password);
        $userInfo->View_Exception_Reports = $request->input('View_Exception_Reports', $userInfo->View_Exception_Reports);
        $userInfo->Document_Repository_Access = $request->input('Document_Repository_Access', $userInfo->Document_Repository_Access);
        $userInfo->Promoters_Vault_Access = $request->input('Promoters_Vault_Access', $userInfo->Promoters_Vault_Access);
        $userInfo->Coming_Soon_Access = $request->input('Coming_Soon_Access', $userInfo->Coming_Soon_Access);
        $userInfo->Trash_Panel_Access = $request->input('Trash_Panel_Access', $userInfo->Trash_Panel_Access);
        $userInfo->Role_Access = $request->input('Role_Access', $userInfo->Role_Access);

        // Save the updated user info record
        $userInfo->save();
    }

    // Return success response after all updates
    return response()->json(['success' => true, 'message' => 'Permissions updated successfully']);
}




public function deletefilecommon($id)
{
    // $file = CommonTable::findOrFail($id);
    
  
    $totalCount = CommonTable::where('id', $id)
    ->where('is_delete', 2)
    ->update(['is_delete' => 1]);
  
   
   

    return redirect()->back()->with('success', 'File deleted successfully.');
}

public function rejectfolder($id)
{
    // Find the folder by its ID
    $file = Folder::findOrFail($id);

    // Get the employee_id associated with the folder
    $employeeId = $file->employee_id;

    $directorId = $file->director_id;

    // Perform the reject action on the folder by setting is_delete to 1
    $totalCount = Folder::where('id', $id)
        ->where('is_delete', 2) // Assuming 2 is the current status that allows deletion
        ->update(['is_delete' => 1]);

    // Check if the folder was successfully updated
    if ($totalCount > 0) {
        // Find the corresponding employee and update their is_delete status to 1 as well
        $employee = StoreCompanyEmployee::where('id', $employeeId)->first();

        $director = StoreCompanyDirector::where('id', $directorId)->first();
        
        if ($employee) {
            // Update the is_delete status in the storecompanyemployee table
            $employee->update(['is_delete' => 1]);
        }

        if ($director) {
            // Update the is_delete status in the storecompanyemployee table
            $director->update(['is_delete' => 1]);
        }

        // Return a success message after successfully deleting the folder and updating employee status
        return redirect()->back()->with('success', 'Folder and employee status marked as deleted successfully.');
    } else {
        // In case the folder was not found or not updated
        return redirect()->back()->with('error', 'Failed to delete folder. The folder may not be in the correct state.');
    }
}

// BoardNoticeController.php
public function fetchBoardNoticesCount()
{
    $userId = auth()->id(); // Or get the user ID in another way
    $totalCount = CommonTable::where('user_id', $userId)
        ->where('is_delete', 2)
        ->count();

    return response()->json(['totalCount' => $totalCount]);
}

public function restore($id)
{
    $file = CommonTable::findOrFail($id);

    // Perform restore action
    $file->update(['is_delete' => 0]);

    return redirect()->back()->with('success', 'File restored successfully.');
}

public function restorefold($id)
{
    // Find the folder by its ID
    $file = Folder::findOrFail($id);

    // Get the employee_id from the folder
    $employeeId = $file->employee_id;

    $directorId = $file->director_id;

    // Perform the restore action on the folder by setting is_delete to 0
    $file->update(['is_delete' => 0]);

    // Also restore the is_delete status in the storecompanyemployee table where employee_id matches
    $employee = StoreCompanyEmployee::where('id', $employeeId)->first();

    $director = StoreCompanyDirector::where('id', $directorId)->first();


    if ($employee) {
        // Update the is_delete status in storecompanyemployee to 0 as well
        $employee->update(['is_delete' => 0]);
    }

    if ($director) {
        // Update the is_delete status in storecompanyemployee to 0 as well
        $director->update(['is_delete' => 0]);
    }

    // Redirect back with a success message
    return redirect()->back()->with('success', 'Folder and employee status restored successfully.');
}


// public function restorefile($id)
// {
//     $file = BoardNotice::findOrFail($id);

//     // Perform restore action
//     $file->update(['is_delete' => 2]);

//     return redirect()->back()->with('success', 'File restored request successfully.');
// }

public function restorefile($id)
{
    $userId = auth()->id();
   

    // Fetch the file from all tables
    $fileCommon = DB::table('common_table')->where('id', $id)->where('user_id', $userId)->first();
   
   

    // Determine which table to update
    if ($fileCommon) {
      
            DB::table('common_table')->where('id', $id)->where('user_id', $userId)->update(['is_delete' => 2]);
           
            return redirect()->back()->with('success', 'File restore requested successfully.');
       
    }

   

    Log::error("File not found or permission denied for ID: {$id} and user ID: {$userId}");
    return redirect()->back()->with('error', 'File not found or you do not have permission to restore it.');
}


public function restorefolder($id)
{
    $userId = auth()->id();
   

    // Fetch the file from all tables
    $folderCommon = DB::table('folders')->where('id', $id)->where('user_id', $userId)->first();
   
   

    // Determine which table to update
    if ($folderCommon) {
      
            DB::table('folders')->where('id', $id)->where('user_id', $userId)->update(['is_delete' => 2]);
           
            return redirect()->back()->with('success', 'Folder restore requested successfully.');
       
    }

   

    Log::error("Folder not found or permission denied for ID: {$id} and user ID: {$userId}");
    return redirect()->back()->with('error', 'Folder not found or you do not have permission to restore it.');
}







public function venderlist()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    
   return view('user.vandor-management.vendor-listing',compact('cli_announcements','user'));
}

public function bankingdoc()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $bankdoc =  StoreBankDoc::all();
    $user = Auth::user();
   return view('user.banking.bankingdoc',compact('cli_announcements','bankdoc','user'));
}

public function bankingcredit()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    
   return view('user.banking.bankingcredit',compact('cli_announcements','user'));
}
public function tickting()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    
   return view('user.ticket.ticket',compact('cli_announcements','user'));
}
    public function Employeedetails($id)
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $emplife = StoreEmployeeprofile::where('id', $id)->get();
        
        $employees = StoreEmployeeDetail::join('store_employee_profile', 'store_employee_detail.employee_id', '=', 'store_employee_profile.id')
    ->where('store_employee_detail.employee_id', $id)
    ->select('store_employee_detail.id as detail_id','store_employee_detail.startdate as sd','store_employee_detail.file_size as sz', 'store_employee_detail.*', 'store_employee_profile.*')
    ->get();
  
// dd($employees);
       return view('user.HRM.lifecycle-details',compact('cli_announcements','emplife','employees'));
    }
    public function exportContracts()
    {
        // Fetch the contract data for the authenticated user
        $contracts = StoreContract::where('user_id', auth()->id())->where('contracttype' , 'normalcontract')->get();


        $filename = 'contracts_' . date('Ymd') . '.csv';

        // Create a file pointer connected to the output stream
        $handle = fopen('php://output', 'w');

        // Set the headers for the CSV download
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="' . $filename . '"');

        // Add the CSV column headers
        fputcsv($handle, [
            'ID', 
            'File Type', 
            'File Size', 
            'Real File Name', 
            'File Path', 
            'User Name', 
            'Contract Name', 
            'Contract Type', 
            'Division', 
            'Vendor Name', 
            'Legal Entity Status', 
            'Start Date', 
            'End Date', 
            'Contract Value', 
            'Signing Status', 
            'Renewal Terms', 
            'Payment Terms', 
            'Fee Escalation Clause', 
            'User ID', 
            'Created At', 
            'Updated At'
        ]);

        // Loop through the contracts and add them to the CSV
        foreach ($contracts as $contract) {
            fputcsv($handle, [
                $contract->id,
                $contract->file_type,
                $contract->file_size,
                $contract->real_file_name,
                $contract->file_path,
                $contract->user_name,
                $contract->contract_name,
                $contract->contracttype,
                $contract->divison,
                $contract->vendor_name,
                $contract->legal_entity_status,
                $contract->startdate,
                $contract->startend,
                $contract->contract_value,
                $contract->signing_status,
                $contract->renewal_terms,
                $contract->payment_terms,
                $contract->fee_escalation_clause,
                $contract->user_id,
                $contract->created_at,
                $contract->updated_at,
            ]);
        }

        // Close the file pointer
        fclose($handle);
        exit; // Terminate the script
    }

    public function exportContractsss()
    {
        // Fetch the contract data for the authenticated user
        $contracts = StoreContract::where('user_id', auth()->id())->where('contracttype' , 'customercontract')->get();


        $filename = 'contracts_' . date('Ymd') . '.csv';

        // Create a file pointer connected to the output stream
        $handle = fopen('php://output', 'w');

        // Set the headers for the CSV download
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="' . $filename . '"');

        // Add the CSV column headers
        fputcsv($handle, [
            'ID', 
            'File Type', 
            'File Size', 
            'Real File Name', 
            'File Path', 
            'User Name', 
            'Contract Name', 
            'Contract Type', 
            'Division', 
            'Vendor Name', 
            'Legal Entity Status', 
            'Start Date', 
            'End Date', 
            'Contract Value', 
            'Signing Status', 
            'Renewal Terms', 
            'Payment Terms', 
            'Fee Escalation Clause', 
            'User ID', 
            'Created At', 
            'Updated At'
        ]);

        // Loop through the contracts and add them to the CSV
        foreach ($contracts as $contract) {
            fputcsv($handle, [
                $contract->id,
                $contract->file_type,
                $contract->file_size,
                $contract->real_file_name,
                $contract->file_path,
                $contract->user_name,
                $contract->contract_name,
                $contract->contracttype,
                $contract->divison,
                $contract->vendor_name,
                $contract->legal_entity_status,
                $contract->startdate,
                $contract->startend,
                $contract->contract_value,
                $contract->signing_status,
                $contract->renewal_terms,
                $contract->payment_terms,
                $contract->fee_escalation_clause,
                $contract->user_id,
                $contract->created_at,
                $contract->updated_at,
            ]);
        }

        // Close the file pointer
        fclose($handle);
        exit; // Terminate the script
    }
    public function ContractManagement()
    {
        $contracts = StoreContract::where('user_id', auth()->id())->where('contracttype' , 'normalcontract')->get();
        // dd($contracts);
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $contract = StoreContract::where('user_id', auth()->id())->get();
         $user = auth()->user();
         $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();
       return view('user.Contract-Management.Contract-Management',compact('cli_announcements','contract','user'));
    }

    public function contractmanage()
    {
        $customer = Customer::where('customer_created_by', auth()->id())->get();
        $customercount = Customer::where('customer_created_by', auth()->id())->count();
        // dd($customer);
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = auth()->user();
       return view('user.Contract-Management.contract-manage',compact('cli_announcements','user','customer','customercount'));
    }

    public function contractmanagedetail($id)
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = auth()->user();
        $customerrecord = Customer::find($id);

        // dd($customerrecord);

       
       return view('user.Contract-Management.contract-manage-detail',compact('cli_announcements','user','customerrecord'));
    }

    public function Sop()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        
       return view('user.Document-Repository.sop',compact('cli_announcements'));
    }
	
    public function repcalander()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        
       return view('user.Document-Repository.rep-calander',compact('cli_announcements'));
    }

    public function loginpassedit()
    {
        $user = auth()->user();
        $userId = $user->id;
        $role = User::where('id', $userId)
        ->where('role', $user->role)
        ->where('Edit_Password', 1)
        ->first();
// dd($role);

if (!$role) {
echo "You have no Access to Edit Password , Please Contact to your Account Provider";
abort(403);  // Abort if the role is not found or access is not granted
}
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = auth()->user();
       return view('user.login-pass-edit.login-pass-edit',compact('cli_announcements', 'user'));
    }

    public function changeemppassword(Request $request)
{
    

    // Get the currently authenticated user
    $user = Auth::user(); // Or use User::find($request->user_id) if not using Auth

    // Check if the old password matches
    if (!Hash::check($request->old_password, $user->password)) {
        return redirect()->back()->withErrors(['old_password' => 'Old password is incorrect.']);
    }

    // Check if new password and confirm password match
    if ($request->new_password !== $request->confirm_password) {
        return redirect()->back()->withErrors(['confirm_password' => 'New password and confirm password do not match.']);
    }

    // Update the password in the User model
    $user->password = Hash::make($request->new_password);
    $user->save();

    // Update the password in the UserInfo model
    $userInfo = UserInfo::where('user_id', $user->id)->first();

    if ($userInfo) {
        // Update the password in the UserInfo model if needed
        $userInfo->password = $request->new_password;
        $userInfo->save();
    }

    // Redirect back with a success message
    return redirect()->back()->with('success', 'Password changed successfully.');
}

	
public function rolemanagement()
{
      $user = auth()->user();
        $userId = Auth::id();
        // dd($user->role);
         $rolesexit = UserRole::where('user_id', $user->id)->get();
        $role = User::where('id', $userId)
                        ->where('role', $user->role)
                        ->where('Role_Access', 1)
                        ->first();
        // dd($role);
        
        if (!$role) {
            echo "You have no Access to Role Management , Please Contact to your Account Provider";
            abort(404);  // Abort if the role is not found or access is not granted
        }
 
    
    
    $user_id = $user->id;
    // dd($user_id);
    
    // Fetch the roles created by the authenticated user
    $roles = UserRole::where('user_id', $user->id)->where('is_deleted', 0)->get();

    // Fetch the "Admin" role explicitly
    $adminRole = UserRole::where('role', 'Admin')->where('is_deleted', 0)->first();

    // If the Admin role exists, combine it with the user's created roles
    // $roles = $userCreatedRoles;
    // if ($adminRole) {
    //     $roles = $roles->merge(collect([$adminRole]));
    // }
    
    
    // Debugging to view the roles being returned
    // dd($roles);

    // Fetch client announcements (assuming this is separate logic)
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();

    // Fetch all users with a role (optional)
    $userRoleR = User::whereNotNull('role')->get();

    // Group users by their role (only for the authenticated user's data)
    $usersByRole = User::whereNotNull('role')
                        ->where('id', $user->id) // Fetch only the authenticated user's role-related data
                        ->get()
                        ->groupBy('role');

    // Fetch the current user's role record (if needed elsewhere)
    $userRoleRecord = UserRole::where('role', $user->role)->where('is_deleted', 0)->first();

    // Pass all data to the view
    return view('user.role-management.role-management', [
        'cli_announcements' => $cli_announcements,
        'roles' => $roles, // Pass the combined roles (user-created + Admin)
        'userRoleRecord' => $userRoleRecord,
        'userRoleR' => $userRoleR,
        'usersByRole' => $usersByRole, // Pass the users by role to the view
        'user' => $user,
        'rolesexit' => $rolesexit
    ]);
}



    
    
    
    
public function addroles(Request $request)
{
    // Get the logged-in user ID
    $userId = auth()->user()->id;

    // Check if the user has already created this role
    $existingRole = UserRole::where('user_id', $userId)
                            ->where('role', $request->role)
                            ->first();

    // If the role already exists for the current user, return an error
    if ($existingRole) {
        return redirect()->back()->with('error', 'You have already created this role.');
    }

    // If no role exists for this user, create a new role
    $userroleModel = new UserRole([
        'role' => $request->role,
        'Edit_Password' => "0",
        'View_Exception_Reports' => "0",
        'user_id' => $userId,
    ]);

    // Save the new role to the database
    $userroleModel->save();

    // Return a success message
    return redirect()->back()->with('success', 'Role created successfully.');
}
public function checkRoleExistence(Request $request)
{
    // Get the logged-in user ID
    $userId = auth()->user()->id;

    // Check if the user has already created this role
    $roleExists = UserRole::where('user_id', $userId)
                          ->where('role', $request->role)
                          ->exists();

    // Return JSON response to indicate whether the role exists
    return response()->json(['exists' => $roleExists]);
}


public function members(Request $request)
{
    // dd($request);
  $validatedData = $request->validate([
    'fname' => 'required|string|max:255',
    'lname' => 'required|string|max:255',
    'email' => 'required|string|email|max:255|unique:members',
    'password' => 'required|string|min:8',
    'phone' => 'required|string|max:15',
    'personal_email_id' => 'required|string|email|max:255',
    'Role' => 'required|string',
    'profile_picture' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
]);

if (User::where('email', $request->email)->exists()) {
        return response()->json([
            'status' => 'error',
            'message' => 'Email already exists.',
        ], 400);
    }
$user = Auth::user();
$user_id = $user->id;
$user_name = $this->generateUniqueUsername($request->fname, $request->lname);

$member = new User;
$member->name = $request->input('fname') . ' ' . $request->input('lname');
$member->email = $request->email;
$member->password = Hash::make($request->password);
$member->user_name = $user_name;
$member->phone = $request->phone;
$member->personal_email_id = $request->personal_email_id;
$member->role = $request->Role;
$member->createdby_id = $user_id;
$member->main_role_id = $request->main_role_id;
$member->Edit_Password = 1;
$member->View_Exception_Reports = 1;
$member->Document_Repository_Access = 1;
$member->Promoters_Vault_Access = 1;
$member->Coming_Soon_Access = 1;
$member->Role_Access = 0;
$member->Trash_Panel_Access = 1;
$member->user_status = 1;
$member->user_onboard = 1;
$member->video_status = 1;

// Check if a profile picture is uploaded
if ($request->hasFile('profile_picture')) {
    $file = $request->file('profile_picture');
    $fileName = time() . '_' . $file->getClientOriginalName();
    
    // Move the file to the public/uploads/profile_images directory
    $file->move(public_path('uploads/profile_images'), $fileName);
    
    // Store the filename in the member's profile picture field
    $member->profile_picture = 'uploads/profile_images/' . $fileName;

    // Insert the file details into the profile_images table
    
}

$member->save();

UserInfo::create([
    'user_id' => $member->id,
    'email' => $request->email,
    'password' => $request->password,
    'user_name' => $member->user_name,
    'personal_email_id' => $request->personal_email_id,
    'role' => $request->Role,
    'fname' => $request->fname,
    'lname' => $request->lname,
    'phone' => $request->phone,
    'profile_picture' =>'uploads/profile_images/' . $member->profile_picture,
    'createdby_id' => $user_id,
    'main_role_id' => $request->main_role_id,
    'Edit_Password' => 1,
    'View_Exception_Reports'  => 1,
    'Document_Repository_Access' => 1,
    'Promoters_Vault_Access'  => 1,
    'Coming_Soon_Access' => 1,
    'Role_Access' => 0,
    'Trash_Panel_Access' => 1,
    'user_status' => 1,
    'user_onboard' => 1,
    'video_status' => 1,
]);

Member::create([
    'emp_id' => $member->id,
    'email' => $request->email,
    'password' => $request->password,
    'user_name' => $member->user_name,
    'personal_email_id' => $request->personal_email_id,
    'role' => $request->Role,
    'fname' => $request->fname,
    'lname' => $request->lname,
    'phone' => $request->phone,
    'profile_picture' => 'uploads/profile_images/' . $member->profile_picture,
    'createdby_id' => $user_id,
    'main_role_id' => $request->main_role_id,
    'Edit_Password' => 1,
    'View_Exception_Reports'  => 1,
    'Document_Repository_Access' => 1,
    'Promoters_Vault_Access'  => 1,
    'Coming_Soon_Access' => 1,
    'Role_Access' => 0,
    'Trash_Panel_Access' => 1,
    'user_status' => 1,
    'user_onboard' => 1,
    'video_status' => 1,
]);


$mailersend = new MailerSend(['api_key' => 'mlsn.3cf1d191812b63e38d5edf34dd0146657c403d79af8c2cf2609e26f5b09c0a64']);


        $recipients = [
            new Recipient($request->personal_email_id, "{$request->fname} {$request->lname}"),
        ];

        $emailParams = (new EmailParams())
            ->setFrom('admin@milliondox.in')
            ->setFromName('Admin')
            ->setRecipients($recipients)
            ->setSubject('Your Account Details')
            ->setHtml("<html>
                <head>
        <title>Welcome Onboard</title>
    </head>
  <body style='font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5;'>
<table width='100%' cellpadding='0' cellspacing='0' border='0'>
    <tr>
        <td>
            <table class='email-container' cellpadding='0' cellspacing='0' border='0' style='width: 100%;  max-width: 600px;    margin: 0 auto;   background-color: #ffffff;
            border-radius: 8px;  overflow: hidden;  border: 1px solid #dddddd;'>
                
                 <!-- Banner -->
                 <tr>
                    <td class='banner'>
                        <img src='https://milliondox.in/assets/images/welcome_onboard.png' alt='img' style='max-width: 100%;  margin: 0 auto;'>
                    </td>
                </tr>

                <!-- Content -->
                <tr>
                    <td class='content' style='padding: 20px; color: #333333;'>
                        <p class='user_title' style='font-weight: 800;'>Dear {$request->fname} {$request->lname}!,</p>
                        <p>We hope this message finds you well.</p>
                        <p>We are writing to provide you with your account credentials. For security reasons, please ensure that you handle this information with care.</p>
                        <table cellpadding='0' cellspacing='0' border='0' style=' width: 100%;  border-collapse: collapse;'>
                            <tr>
                                <td style='padding: 10px;  border: 1px solid #dddddd; background-color: #f9f9f9;'><strong>Username:</strong> {$member->user_name}</td>
                            </tr>
                            <tr>
                                <td style='padding: 10px;  border: 1px solid #dddddd; background-color: #f9f9f9;'><strong>Password:</strong>  {$request->password}</td>
                            </tr>
                            <tr>
                                <td style='padding: 10px;  border: 1px solid #dddddd; background-color: #f9f9f9;'><strong>E-mail:</strong>  {$request->email}</td>
                            </tr>
                        </table>
                        <a href='https://milliondox.in/login' class='login_me' style=' display: inline-block;   padding: 12px 60px;   color: #FFF;     border-radius: 50px;
                        margin: 20px 0px 0px;   background: #fc8c92;   text-decoration: none;'>Login</a>
                        <p>For your security, we recommend changing your password as soon as you log in. If you have any questions or need further assistance, please do not hesitate to contact our support team.</p>
                    </td>
                </tr>
                <!-- Footer -->
                <tr>
                    <td class='footer' style='background-color: #f98b93;    color: #ffffff;   text-align: center;   padding: 20px;'>
                        <p class='thanks' style='font-weight: bold;'>Thank you for choosing Milliondox!</p>
                        <p class='important' style='color: #fdbcbc;  font-weight: 800;'>Important Notice:</p>
                        <p>Please do not share your password with anyone. If you suspect that your account may be compromised, please contact us immediately.</p>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>
</body>
            </html>");
        
        $mailersend->email->send($emailParams);

// dd($mailersend->email->send($emailParams));

    return response()->json([
        'status' => 'success',
        'message' => 'Member added successfully.',
    ], 201);

    // return redirect()->back()->with('success', 'Member created successfully.');

}


private function generateUniqueUsername($fname, $lname)
{
    $base_username = strtolower($fname[0] . $lname);
    $username = $base_username . rand(1000, 9999);

    while (User::where('user_name', $username)->exists()) {
        $username = $base_username . rand(1000, 9999);
    }

    return $username;
}






	
    
	public function share($id)
{
    $document = Document::findOrFail($id);
    
    // Generate a unique token for the shared link
    $token = Str::random(32);

    // Set the expiration time (e.g., 1 hour from now)
    $expiration = Carbon::now()->addHour();

    // Generate the shared link
    $sharedLink = route('documents.download', $document->id, ['token' => $token]);

    // Store the token and expiration time in the database
    $document->shared_token = $token;
    $document->shared_expires_at = $expiration;
    $document->save();

    return response()->json(['shared_link' => $sharedLink]);
}
	
	
	  public function Employeelifecycle()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();
        $emplife = StoreEmployeeprofile::where('user_id', $user->id)->get();
       return view('user.HRM.employee-lifecycle',compact('cli_announcements','emplife','user'));
    }
    public function manageprofile()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();
        
       return view('user.management.profile',compact('cli_announcements','user'));
    }

    public function managestore(Request $request)
{
    // Validate the incoming request data
    $validatedData = $request->validate([
        'user_id' => 'required|integer',
        'parent_id' => 'required|integer',
        'name' => 'required|string|max:255',
        'description' => 'nullable|string|max:255',
        // Add other validation rules as needed
    ]);

    // Create a new OrganizationChart instance and fill it with validated data
    $organizationChart = new OrganizationChart();
    $organizationChart->user_id = $validatedData['user_id'];
    $organizationChart->parent_id = $validatedData['parent_id'];
    $organizationChart->name = $validatedData['name'];
    $organizationChart->description = $validatedData['description'];

    // Save the organization chart data to the database
    $organizationChart->save();

    // Return a JSON response indicating success
    return response()->json(['success' => true]);
}
    public function Management()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();

       return view('user.management.management',compact('cli_announcements','user'));
    }
    public function directorsinfo()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        
       return view('user.Administration.Directorinfo',compact('cli_announcements'));
    }

    public function calender()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        
       return view('user.Administration.calender',compact('cli_announcements'));
    }
    public function trademark()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $iptd =  StoreIpFile::all();
        $user = Auth::user();
       return view('user.trademark.trademark',compact('cli_announcements','iptd','user'));
    }
    
     public function director()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
       $dr = DirectorStore::latest()->get();
       $customDirectorStores = DB::table('custom_director_store as cs')
    ->leftJoin('director_store as ds', 'ds.id', '=', 'cs.director_id')
    ->select('cs.*')
    ->get();
        
       return view('user.Administration.director',compact('cli_announcements','dr','customDirectorStores'));
    }

    public function updatedirectordt(Request $request)
    {
        $empid = $request->input('dr_id');
    
    // Find the employee profile record by empid
    $employee = DirectorStore::findOrFail($empid);

    // Update the employee profile fields
    $employee->status = $request->input('status');
    $employee->expiredate = $request->input('expiredate');
    $employee->activedate = $request->input('activedate');
    $employee->location = $request->input('location'); // Make sure to use the correct input name
    

    

    

    // Save the changes to the database
    $employee->save();

    return redirect()->back()->with('success', 'DSC  updated successfully.');
    }
    public function evedelete(Request $request)
    {
        // Validate the request data
        $request->validate([
            'eventId' => 'required|integer', // Ensure eventId is an integer
        ]);
    
        // Find the event to delete
        $event = AdminEventCal::find($request->eventId);
    
        if (!$event) {
            return response()->json(['message' => 'Event not found.'], 404);
        }

        // Delete the event
        $event->delete();
    
        // Return a success response
        $request->session()->flash('success', 'Event deleted successfully.');

    // Return response
    return response()->json(['message' => 'Event deleted successfully.']);
    }
    


    public function downloadcustomFile1($id)
    {
        $file = CustomDirectorStore::findOrFail($id);
        
        // For example, if the file is stored in the storage/app/uploads directory
        $filePath = storage_path('app/' . $file->custom_file);
        
        return response()->download($filePath, $file->file_name);
    }

    public function customfilecd($id)
{
    // Find the user by ID
    $user = CustomDirectorStore::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Record not found.');
    }

    // Delete the user record
    $user->delete();

    

    return redirect()->back()->with('success', 'Record deleted successfully.');
}
    public function otpform(Request $request){
        // dd($request);
    }
    public function markAllAsRead(Request $request)
    {
        // Get the ID of the authenticated user
        $userId = auth()->user()->id;
    
        // Fetch announcements
        $announcements = Announcement::latest()->get();
    
        // Iterate over each announcement
        foreach ($announcements as $announcement) {
            // Get the existing user IDs as an array
            if ($announcement->user_id !== null) {
                $existingUserIds = json_decode($announcement->user_id, true);
            } else {
                $existingUserIds = [];
            }
    
            // Handle case where JSON decoding fails
            if (json_last_error() !== JSON_ERROR_NONE) {
                // Log the error or handle it as needed
                continue; // Skip this announcement and proceed to the next one
            }
    
            // If user_ids is null or decoding failed, initialize it as an empty array
            if ($existingUserIds === null) {
                $existingUserIds = [];
            }
    
            // Check if the user ID already exists in the array
            if (!in_array($userId, $existingUserIds)) {
                // If the user ID doesn't exist, add it to the array
                $existingUserIds[] = $userId;
    
                // Update the announcement with the updated user IDs
                $announcement->update([
                    'read_status' => 1,
                    'user_id' => json_encode($existingUserIds),
                ]);
            }
        }
    
        return response()->json(['success' => true]);
    }
    

    
    public function markAllAsReademp(Request $request)
{
    // Mark all announcements as read for the authenticated employee
    $userId = auth()->user()->id; // Assuming you have authentication and user ID is retrievable
    Announcement::where('role', 'Employee')->where('user_id', $userId)->update(['read_status' => 1]);
    
    // Update the status of the authenticated employee
    EmployeeStatus::updateOrCreate(
        ['user_id' => $userId],
        ['is_all_read' => 1]
    );

    return response()->json(['success' => true]);
}

    public function adminnotification()
    {
       $announcements = Announcement::latest()->get();
       return view('admin.notification.notification',compact('announcements'));
    }
    public function usertemplate()
    {
        $user = auth()->user();
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $template = TemplateFile::latest()->get();
       return view('user.template.template',compact('cli_announcements','template','user'));
    }

    // public function userincorporationdocs()
    // {

    //     $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    //     $files = UploadedFile::all();
        
    //     dd($files);
    //     return view('user.Charter-Documents.Incorporation-Docs', compact('cli_announcements', 'files'));
    // }
    public function getFilesss(Request $request)
    {
        // Validate the request
        $request->validate([
            'folder' => 'required|string',
        ]);
    
        // Get the folder name from the request
        $folder = $request->input('folder');
    
        // Construct the directory path
        $directory = public_path('uploads/' . $folder);
    
        // Fetch files from the specified directory
        $files = [];
        if (is_dir($directory)) {
            $fileNames = scandir($directory);
            foreach ($fileNames as $fileName) {
                if ($fileName !== '.' && $fileName !== '..') {
                    $files[] = ['name' => $fileName];
                }
            }
        }
    
        // Return JSON response containing file names
        return response()->json($files);
    }
    
    public function userregistrationlicences()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $files = RegUploadedFile::all();
        $chardoc = RegCharteredDoc::all();
        $coi = RegCOI::all();
        $pan = RegPAN::all();
        $tan = RegTAN::all();
        $inc = RegINC::all();
        $spicedoc = RegSpiceDoc::all();
        $customdoc = RegCustomDoc::all();
        $pfdoc = PFDOC::all();
        $esidoc = ESIDOC::all();
        $ptdoc = PTDOC::all();
        $tldoc = TLDOC::all();
        $urdoc = URDOC::all();
         $user = auth()->user();
        
       return view('user.Charter-Documents.Registrations-Licences',compact('cli_announcements','user', 'files','chardoc','coi','pan','tan','inc','spicedoc','customdoc','pfdoc','esidoc','ptdoc','tldoc','urdoc'));
    }
    // public function docrepostry()
    // {
    //     $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    //     $folders = Folder::all(); // Fetch all folders from the database
        
    //     return view('user.Document-Repository.document-repository', compact('cli_announcements', 'folders'));
    // }

    public function docurepo(Request $request)
    {
        
        $user = auth()->user();
        $userId = Auth::id();
        // dd($user->role);
        
        $role = User::where('id', $userId)
                        ->where('role', $user->role)
                        ->where('Document_Repository_Access', 1)
                        ->first();
        // dd($role);
        
        if (!$role) {
            echo "You have no Access to Document Repository , Please Contact to your Account Provider";
            abort(403);  // Abort if the role is not found or access is not granted
        }
        
        
        
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $commonFolders = Folder::where('common_folder', 1)
                        ->orderBy('name')
                        ->get();

// Fetch the authenticated user's folders
$userFolders = Folder::where('user_id', Auth::id())
                        ->orderBy('name')
                        ->get();

$RealFileFolders = Folder::where('user_id', Auth::id())
    ->orWhere('common_folder', 1)
    ->whereNull('is_bank')
    ->whereNotNull('real_file_name')
    ->orderBy('name')
    ->get();

// dd($RealFileFolders);

$RealFileFoldersBank = Folder::where('common_folder', 1)
->where('is_bank', 1)
->whereNotNull('real_file_name')
->orderBy('name')
->get();
// dd($RealFileFolders);

// Combine both results
$folders = $commonFolders->merge($userFolders);
        
    
        $allFolders = Folder::where('common_folder', 1) ->orwhere('user_id', Auth::id())->orderBy('name')->get();
        $parentFolders = $allFolders->whereNull('parent_name'); 
        $latestFolderPath = Folder::where('user_id', Auth::id())->latest()->value('path');
        $userId = Auth::id();
        $commondataroom = DataRoom::where('user_id', Auth::id())->get();

   $user = auth()->user();
//   $files = BoardNotice::where('user_id', $user->id)
//                     ->where('is_delete', 1)
//                     ->orderBy('updated_at', 'desc')
//                     ->get();
                    
//                     $files3 = BoardMinuteBook::where('user_id', $user->id)
//                     ->where('is_delete', 1)
//                     ->orderBy('updated_at', 'desc')
//                     ->get();
                    
                    
//                     $files3 = BoardResolutions::where('user_id', $user->id)
//                     ->where('is_delete', 1)
//                     ->orderBy('updated_at', 'desc')
//                     ->get();
                    
//                     $files4 = BoardAttendencesheet::where('user_id', $user->id)
//                     ->where('is_delete', 1)
//                     ->orderBy('updated_at', 'desc')
//                     ->get();
                    
//                     dd($files4);


$user_id = $user->id;

// Create individual queries for each table
$commonColumns = [
    'id',
    DB::raw('COALESCE(file_name, "N/A") as file_name'),
    DB::raw('COALESCE(file_type, "N/A") as file_type'),
    DB::raw('COALESCE(real_file_name, "N/A") as real_file_name'),
    DB::raw('COALESCE(file_size, 0) as file_size'),
    DB::raw('COALESCE(file_path, "N/A") as file_path'),
    DB::raw('COALESCE(user_name, "N/A") as user_name'),
    'user_id',
    DB::raw('COALESCE(file_status, 0) as file_status'),
    DB::raw('COALESCE(fyear, "N/A") as fyear'),
    DB::raw('COALESCE(Month, "N/A") as Month'),
    DB::raw('COALESCE(Tags, "N/A") as Tags'),
    DB::raw('COALESCE(location, "N/A") as location'),
    'created_at',
    'updated_at'
];




$files4 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 1)
    ->get();


    $deleteFolder = Folder::with('user')
    ->where('user_id', $user->id)
    ->where('is_delete', 1)
    ->get();


    // dd($deleteFolder);

    $folderLocation = $request->query('folder');
    // dd($folderLocation);
    // 2024-2025November301_Accounting%20%26%20Taxation%2F2024-2025November301_Indirect%20Tax%2F2024-2025November301_Indirect%2F2024-2025November301_GST%2F2024-2025Nov


    // $folderPath = $request->query('folderPath');

    // Ensure the parameter is not null or empty before proceeding

    // dd($request);


    // Decode the folder parameter
    $decodedFolderLocation = urldecode($folderLocation);  
    // dd($decodedFolderLocation);
    // 2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST/2024-2025November301_Litigations

    $iamhereSKY = false;

    if($request->query('folderPath') ){
        $decodedFolderLocation =  $request->query('folderPath');  
        // dd("i am here INSIDE");
        // folderPath: 2024-2025November301_Legal/2024-2025November301_Secretarial/2024-2025November301_Annual Filings
        $decodedFolderLocation = str_replace("folderPath: ", "", $decodedFolderLocation);
        $iamhereSKY = true;
        // dd("i AM HERE INSIDE ::   ".$decodedFolderLocation);
        // 2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST/2024-2025November301_Litigations

    }
    // dd("I AM OUTSIDE");


                    
        // $filess = BoardMinuteBook::where('user_id', $userId)->get();
        $moadoc = MOA::all();
        $user = auth()->user();

        $entries = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Notices')
    ->get();

    // dd($entries);



        $count = $entries->count();
        $totalSizeBytes = $entries->sum('file_size');
        $totalSizeKB = round($totalSizeBytes / 1024, 2);

        // dd($count);



        $entriesMinbook =CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Minute Book')
    ->get();
        $countMinbooks = $entriesMinbook->count(); // Count of entries
        $totalSizeBytesentriesMinbook = $entriesMinbook->sum('file_size'); // Sum of file sizes
        $totalSizeKBMinbooks = round($totalSizeBytesentriesMinbook / 1024, 2); // Convert to KB and round
        
        
          $entriesreso = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Resolutions')
    ->get();
        $countentriesreso = $entriesreso->count(); // Count of entries
        $totalSizeBytesentriesreso = $entriesreso->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesreso = round($totalSizeBytesentriesreso / 1024, 2); // Convert to KB and round
        
        
        
        $entriesas = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
        $countentriesas = $entriesas->count(); // Count of entries
        $totalSizeBytesentriesas = $entriesas->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesas = round($totalSizeBytesentriesas / 1024, 2); // Convert to KB and round
        
        $fileCount = 0;

// Increment fileCount for each entry with at least one file
if ($count > 0) {
    $fileCount++;
}

if ($countMinbooks > 0) {
    $fileCount++;
}

if ($countentriesreso > 0) {
    $fileCount++;
}

if ($countentriesas > 0) {
    $fileCount++;
}

        
        
        
        $entriesnomeet = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Notices')
    ->get();
        $countentriesnomeet = $entriesnomeet->count(); // Count of entries
        $totalSizeBytesentriesnomeet = $entriesnomeet->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesnomeet = round($totalSizeBytesentriesnomeet / 1024, 2); // Convert to KB and round
        
        
        $entriesminbookmeet = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Minute Book')
    ->get();
        $countentriesminbookmeet = $entriesminbookmeet->count(); // Count of entries
        $totalSizeBytesentriesminbookmeet = $entriesminbookmeet->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesminbookmeet = round($totalSizeBytesentriesminbookmeet / 1024, 2); // Convert to KB and round
        
        
         $entriesasmeet = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
        $countentriesasmeet = $entriesasmeet->count(); // Count of entries
        $totalSizeBytesentriesasmeet = $entriesasmeet->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesasmeet = round($totalSizeBytesentriesasmeet / 1024, 2); // Convert to KB and round
        
        
        $entriesresomeet = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Resolutions')
    ->get();
        $countentriesresomeet = $entriesresomeet->count(); // Count of entries
        $totalSizeBytesentriesresomeet = $entriesresomeet->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesresomeet = round($totalSizeBytesentriesresomeet / 1024, 2); // Convert to KB and round
        
        
        
             $fileCount1 = 0;

// Increment fileCount for each entry with at least one file
if ($countentriesnomeet > 0) {
    $fileCount1++;
}

if ($countentriesminbookmeet > 0) {
    $fileCount1++;
}

if ($countentriesasmeet > 0) {
    $fileCount1++;
}

if ($countentriesresomeet > 0) {
    $fileCount1++;
}
        
         $entriesordernotice = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Notices')
    ->get();
        $countentriesordernotice = $entriesordernotice->count(); // Count of entries
        $totalSizeBytesentriesordernotice = $entriesordernotice->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesordernotice = round($totalSizeBytesentriesordernotice / 1024, 2); // Convert to KB and round
        
        
        $entriesorderminbook = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Minute Book')
    ->get();
        $countentriesorderminbook = $entriesorderminbook->count(); // Count of entries
        $totalSizeBytesentriesorderminbook = $entriesorderminbook->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesorderminbook = round($totalSizeBytesentriesorderminbook / 1024, 2); // Convert to KB and round
        
        $entriesorderAttend = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Attendance sheet')
    ->get();
        $countentriesorderAttend = $entriesorderAttend->count(); // Count of entries
        $totalSizeBytesentriesorderAttend = $entriesorderAttend->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesorderAttend = round($totalSizeBytesentriesorderAttend / 1024, 2); // Convert to KB and round
        
            $entriesorderreso = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Resolutions')
    ->get();
        $countentriesorderreso = $entriesorderreso->count(); // Count of entries
        $totalSizeBytesentriesorderreso = $entriesorderreso->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriesorderreso = round($totalSizeBytesentriesorderreso / 1024, 2); // Convert to KB and round
        
        
          $entriesinnerrun = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'RUN Form (Reserve Unique Name)')
    ->get();
            $countinnerrun = $entriesinnerrun->count();
            $totalSizeinnerrun = $entriesinnerrun->sum('file_size');
$totalSizeKBinnerrun = round($totalSizeinnerrun / 1024, 2); // Convert to KB and round

$entriesinc9 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-9 (Declaration of Subscribers and First Directors)')
    ->get();
        $countentriesinc9 = $entriesinc9->count(); // Count of entries
        $totalSizeBytesentriesinc9 = $entriesinc9->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinc9 = round($totalSizeBytesentriesinc9 / 1024, 2); // Convert to KB and round
        
        
        
         $entriesinnerspice = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'SPICe+Part B (Simplified Proforma for Incorporating Company Electronically)')
    ->get();
        $countentriesinnerspice = $entriesinnerspice->count(); // Count of entries
        $totalSizeBytesentriesinnerspice = $entriesinnerspice->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerspice = round($totalSizeBytesentriesinnerspice / 1024, 2); // Convert to KB and round
        
        
         $entriesinnerinc33 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-33 SPICe MoA (e-Momorandum of Association)')
    ->get();
        $countentriesinnerinc33 = $entriesinnerinc33->count(); // Count of entries
        $totalSizeBytesentriesinnerinc33 = $entriesinnerinc33->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerinc33 = round($totalSizeBytesentriesinnerinc33 / 1024, 2); // Convert to KB and round
        
        
        $entriesinnerinc34 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-34 SPICe AoA (e-Articles of Association)')
    ->get();
        $countentriesinnerinc34 = $entriesinnerinc34->count(); // Count of entries
        $totalSizeBytesentriesinnerinc34 = $entriesinnerinc34->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerinc34 = round($totalSizeBytesentriesinnerinc34 / 1024, 2); // Convert to KB and round
        
        $entriesinnerinc35 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-35 AGILE-PRO-s')
    ->get();
        $countentriesinnerinc35 = $entriesinnerinc35->count(); // Count of entries
        $totalSizeBytesentriesinnerinc35 = $entriesinnerinc35->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerinc35 = round($totalSizeBytesentriesinnerinc35 / 1024, 2); // Convert to KB and round
        
            $entriesinnerinc22 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-22 (Notice of situation or change of situation of registered office)')
    ->get();
        $countentriesinnerinc22 = $entriesinnerinc22->count(); // Count of entries
        $totalSizeBytesentriesinnerinc22 = $entriesinnerinc22->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerinc22 = round($totalSizeBytesentriesinnerinc22 / 1024, 2); // Convert to KB and round
        
        
        
        $entriesinnerinc20a = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'INC-20A (Commencement of Business)')
    ->get();
        $countentriesinnerinc20a = $entriesinnerinc20a->count(); // Count of entries
        $totalSizeBytesentriesinnerinc20a = $entriesinnerinc20a->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieinnerinc20a = round($totalSizeBytesentriesinnerinc20a / 1024, 2); // Convert to KB and round
        
        
         $entriesafs = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'AoC-4 (Annual Filing Statement Form)')
    ->get();
        $countentriesafs = $entriesafs->count(); // Count of entries
        $totalSizeBytesentriesafs = $entriesafs->sum('file_size'); // Sum of file sizes
        $totalSizeKBentrieafs = round($totalSizeBytesentriesafs / 1024, 2); // Convert to KB and round

        // dd($countentriesafs);
        
        
         $entriescfs = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'AoC-4 (CFS) (Form for filing consolidated financial statements and other documents with the Registrar)')
    ->get();
        $countentriescfs = $entriescfs->count(); // Count of entries
        $totalSizeBytesentriescfs = $entriescfs->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriecfs = round($totalSizeBytesentriescfs / 1024, 2); // Convert to KB and round
        
        
        $entriesmgt7 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'MGT-7/ (Annual Return of a company)')
    ->get();
        $countentriesmgt7 = $entriesmgt7->count(); // Count of entries
        $totalSizeBytesentriesmgt7 = $entriesmgt7->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriemgt7 = round($totalSizeBytesentriesmgt7 / 1024, 2); // Convert to KB and round
        
         $entriesmgt7a = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'MGT-7A (Annual Return of a small company)')
    ->get();
        $countentriesmgt7a = $entriesmgt7a->count(); // Count of entries
        $totalSizeBytesentriesmgt7a = $entriesmgt7a->sum('file_size'); // Sum of file sizes
        $totalSizeKBentriemgt7a = round($totalSizeBytesentriesmgt7a / 1024, 2); // Convert to KB and round
        
        $entriesbank = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Bank Account Statements%')
    // ->where('location', $decodedFolderLocation)
   
        ->where('real_file_name', 'Bank account statement')
    ->get();
        $countbank = $entriesbank->count();
        $totalSizeBytesbank = $entriesbank->sum('file_size');
        $totalSizeKBbank = round($totalSizeBytesbank / 1024, 2);
        
        
        
        
        
        $entriesdirectorappointmentsdir3din = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-3 form/ DIN number')
    ->get();
        $countdirectorappointmentsdir3din = $entriesdirectorappointmentsdir3din->count();
        $totalSizeBytesdirectorappointmentsdir3din = $entriesdirectorappointmentsdir3din->sum('file_size');
        $totalSizeKBdirectorappointmentsdir3din = round($totalSizeBytesdirectorappointmentsdir3din / 1024, 2);
        
        
        
        $entriesdirectorappointmentsdir3 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-3 KYC')
    ->get();
        $countdirectorappointmentsdir3 = $entriesdirectorappointmentsdir3->count();
        $totalSizeBytesdirectorappointmentsdir3 = $entriesdirectorappointmentsdir3->sum('file_size');
        $totalSizeKBdirectorappointmentsdir3 = round($totalSizeBytesdirectorappointmentsdir3 / 1024, 2);
        
        
        $entriesdirectorappointmentsdir6 =CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-6 form')
    ->get();
        $countdirectorappointmentsdir6 = $entriesdirectorappointmentsdir6->count();
        $totalSizeBytesdirectorappointmentsdir6 = $entriesdirectorappointmentsdir6->sum('file_size');
        $totalSizeKBdirectorappointmentsdir6 = round($totalSizeBytesdirectorappointmentsdir6 / 1024, 2);
        
        $entriesdirectorappointmentsdir12 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-12 form')
    ->get();
        $countdirectorappointmentsdir12 = $entriesdirectorappointmentsdir12->count();
        $totalSizeBytesdirectorappointmentsdir12 = $entriesdirectorappointmentsdir12->sum('file_size');
        $totalSizeKBdirectorappointmentsdir12 = round($totalSizeBytesdirectorappointmentsdir12 / 1024, 2);
        
        
         $entriescreditcardstatement = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Credit Card Statement%')
    // ->where('location', $decodedFolderLocation)
    
        ->where('real_file_name', 'Add Credit Card Statements')
    ->get();
        $countdcreditcardstatement = $entriescreditcardstatement->count();
        $totalSizeBytescreditcardstatement = $entriescreditcardstatement->sum('file_size');
        $totalSizeKBcreditcardstatement = round($totalSizeBytescreditcardstatement / 1024, 2);
        
        $entriesfixeddepoiststatement = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Fixed Deposit Statements%')
    // ->where('location', 'LIKE', $decodedFolderLocation)
    
    ->where('real_file_name', 'Fixed Deposit Account Statement')
    ->get();
        $countfixeddepoiststatement = $entriesfixeddepoiststatement->count();
        $totalSizeBytesfixeddepoiststatement = $entriesfixeddepoiststatement->sum('file_size');
        $totalSizeKBfixeddepoiststatement = round($totalSizeBytesfixeddepoiststatement / 1024, 2);
        
        
        $entriesmutualfundstatement = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', 'LIKE', '%Mutual Fund Statements%')
    // ->where('location', 'LIKE', $decodedFolderLocation)
    ->where('real_file_name', 'Add Mutual Fund Statements')
    ->get();
        $countmutualfundstatement = $entriesmutualfundstatement->count();
        $totalSizeBytesmutualfundstatement = $entriesmutualfundstatement->sum('file_size');
        $totalSizeKBmutualfundstatement = round($totalSizeBytesmutualfundstatement / 1024, 2);
        
        
      $entriesdirectorresignationdir11 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-11 form')
    ->get();
        $countdirectorresignationdir11 = $entriesdirectorresignationdir11->count();
        $totalSizeBytesdirectorresignationdir11 = $entriesdirectorresignationdir11->sum('file_size');
        $totalSizeKBdirectorresignationdir11 = round($totalSizeBytesdirectorresignationdir11 / 1024, 2);
        
        
        
        $entriesdirectorresignationdir12 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'DIR-12 form')
    ->get();
        $countdirectorresignationdir12 = $entriesdirectorresignationdir12->count();
        $totalSizeBytesdirectorresignationdir12 = $entriesdirectorresignationdir12->sum('file_size');
        $totalSizeKBdirectorresignationdir12 = round($totalSizeBytesdirectorresignationdir12 / 1024, 2);
        
        
        $entriesdepositundertakingsFormDPT3 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Form DPT-3')
    ->get();
        $countdepositundertakingsFormDPT3 = $entriesdepositundertakingsFormDPT3->count();
        $totalSizeBytesdepositundertakingsFormDPT3 = $entriesdepositundertakingsFormDPT3->sum('file_size');
        $totalSizeKBdepositundertakingsFormDPT3 = round($totalSizeBytesdepositundertakingsFormDPT3 / 1024, 2);   
        
        
        
         $entriesAuditorExitsADT3 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'ADT-3 form')
    ->get();
        $countAuditorExitsADT3 = $entriesAuditorExitsADT3->count();
        $totalSizeBytesAuditorExitsADT3 = $entriesAuditorExitsADT3->sum('file_size');
        $totalSizeKBAuditorExitsADT3 = round($totalSizeBytesAuditorExitsADT3 / 1024, 2);        
        
        
        
        $entriesAuditorExitsResignletteraud = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Resignation letter by auditor')
    ->get();
        $countAuditorExitsResignletteraud = $entriesAuditorExitsResignletteraud->count();
        $totalSizeBytesAuditorExitsResignletteraud = $entriesAuditorExitsResignletteraud->sum('file_size');
        $totalSizeKBAuditorExitsResignletteraud = round($totalSizeBytesAuditorExitsResignletteraud / 1024, 2); 
        
        
        
        $entriesAuditorExitsResignDetofgroundsseekremaud = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Details of the grounds for seeking removal of auditor')
    ->get();
        $countAuditorExitsResignDetofgroundsseekremaud = $entriesAuditorExitsResignDetofgroundsseekremaud->count();
        $totalSizeBytesAuditorExitsResignDetofgroundsseekremaud = $entriesAuditorExitsResignDetofgroundsseekremaud->sum('file_size');
        $totalSizeKBAuditorExitsResignDetofgroundsseekremaud = round($totalSizeBytesAuditorExitsResignDetofgroundsseekremaud / 1024, 2);       
        
        
        
        
        
        $entriesAuditorExitsSpecialResol = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Special Resolution')
    ->get();
        $countAuditorExitsSpecialResol = $entriesAuditorExitsSpecialResol->count();
        $totalSizeBytesAuditorExitsSpecialResol = $entriesAuditorExitsSpecialResol->sum('file_size');
        $totalSizeKBAuditorExitsSpecialResol = round($totalSizeBytesAuditorExitsSpecialResol / 1024, 2);
        
        
         $entriesAuditorExitsADT2 = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'ADT-2 (Application for removal of auditor(s) before expiry of term)')
    ->get();
        $countAuditorExitsADT2 = $entriesAuditorExitsADT2->count();
        $totalSizeBytesAuditorExitsADT2 = $entriesAuditorExitsADT2->sum('file_size');
        $totalSizeKBAuditorExitsADT2 = round($totalSizeBytesAuditorExitsADT2 / 1024, 2);
        
        
        
        
        $entriesDirector1AadharKYC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Aadhar KYC')
    
    ->get();
        $countDirector1AadharKYC = $entriesDirector1AadharKYC->count();
        $totalSizeBytesDirector1AadharKYC = $entriesDirector1AadharKYC->sum('file_size');
        $totalSizeKBDirector1AadharKYC = round($totalSizeBytesDirector1AadharKYC / 1024, 2);
        
        
        $entriesDirector1AddressProof = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Address Proof')
    ->get();
        $countDirector1AddressProof = $entriesDirector1AddressProof->count();
        $totalSizeBytesDirector1AddressProof = $entriesDirector1AddressProof->sum('file_size');
        $totalSizeKBDirector1AddressProof = round($totalSizeBytesDirector1AddressProof / 1024, 2);
        
        
        
        $entriesDirector1ContactDetails = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Contact Details')
    ->get();
        $countDirector1ContactDetails = $entriesDirector1ContactDetails->count();
        $totalSizeBytesDirector1ContactDetails = $entriesDirector1ContactDetails->sum('file_size');
        $totalSizeKBDirector1ContactDetails = round($totalSizeBytesDirector1ContactDetails / 1024, 2);
        
        
        
        $entriesDirector1PANKYC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'PAN KYC')
    ->get();
        $countDirector1PANKYC = $entriesDirector1PANKYC->count();
        $totalSizeBytesDirector1PANKYC = $entriesDirector1PANKYC->sum('file_size');
        $totalSizeKBDirector1PANKYC = round($totalSizeBytesDirector1PANKYC / 1024, 2);
        
        
        $entriesDirector1Photo = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Photo')
    ->get();
        $countDirector1Photo = $entriesDirector1Photo->count();
        $totalSizeBytesDirector1Photo = $entriesDirector1Photo->sum('file_size');
        $totalSizeKBDirector1Photo = round($totalSizeBytesDirector1Photo / 1024, 2);
        
        $entriesDirector1Signimg = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    ->where('location', $decodedFolderLocation)
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 1')
    ->where('real_file_name', 'Signature image')
    ->get();
        $countDirector1Signimg = $entriesDirector1Signimg->count();
        $totalSizeBytesDirector1Signimg = $entriesDirector1Signimg->sum('file_size');
        $totalSizeKBDirector1Signimg = round($totalSizeBytesDirector1Signimg / 1024, 2);
        
        
        
        
        
        
         $entriesDirector2AadharKYC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Aadhar KYC')
    ->get();
        $countDirector2AadharKYC = $entriesDirector2AadharKYC->count();
        $totalSizeBytesDirector2AadharKYC = $entriesDirector2AadharKYC->sum('file_size');
        $totalSizeKBDirector2AadharKYC = round($totalSizeBytesDirector2AadharKYC / 1024, 2);
        
        
        $entriesDirector2AddressProof = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Address Proof')
    ->get();
        $countDirector2AddressProof = $entriesDirector2AddressProof->count();
        $totalSizeBytesDirector2AddressProof = $entriesDirector2AddressProof->sum('file_size');
        $totalSizeKBDirector2AddressProof = round($totalSizeBytesDirector2AddressProof / 1024, 2);
        
        
        
        $entriesDirector2ContactDetails = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Contact Details')
    ->get();
        $countDirector2ContactDetails = $entriesDirector2ContactDetails->count();
        $totalSizeBytesDirector2ContactDetails = $entriesDirector2ContactDetails->sum('file_size');
        $totalSizeKBDirector2ContactDetails = round($totalSizeBytesDirector2ContactDetails / 1024, 2);
        
        
        
        $entriesDirector2PANKYC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'PAN KYC')
    ->get();
        $countDirector2PANKYC = $entriesDirector2PANKYC->count();
        $totalSizeBytesDirector2PANKYC = $entriesDirector2PANKYC->sum('file_size');
        $totalSizeKBDirector2PANKYC = round($totalSizeBytesDirector2PANKYC / 1024, 2);
        
        
        $entriesDirector2Photo = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')

    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Photo')
    ->get();
        $countDirector2Photo = $entriesDirector2Photo->count();
        $totalSizeBytesDirector2Photo = $entriesDirector2Photo->sum('file_size');
        $totalSizeKBDirector2Photo = round($totalSizeBytesDirector2Photo / 1024, 2);
        
        $entriesDirector2Signimg = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Director Details / Director 2')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Signature image')
    ->get();
        $countDirector2Signimg = $entriesDirector2Signimg->count();
        $totalSizeBytesDirector2Signimg = $entriesDirector2Signimg->sum('file_size');
        $totalSizeKBDirector2Signimg = round($totalSizeBytesDirector2Signimg / 1024, 2);
        
        
        $entriesIncorporationArtofAssoc = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Articles of Association')
    ->get();
        $countIncorporationArtofAssoc = $entriesIncorporationArtofAssoc->count();
        $totalSizeBytesIncorporationArtofAssoc = $entriesIncorporationArtofAssoc->sum('file_size');
        $totalSizeKBIncorporationArtofAssoc = round($totalSizeBytesIncorporationArtofAssoc / 1024, 2);
        
        // dd($entriesIncorporationArtofAssoc);
        $entriesIncorporationCertifofincorp = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Certificate of incorporation')
    ->get();
    // dd($entriesIncorporationCertifofincorp);
        $countIncorporationCertifofincorp = $entriesIncorporationCertifofincorp->count();
        $totalSizeBytesIncorporationCertifofincorp = $entriesIncorporationCertifofincorp->sum('file_size');
        $totalSizeKBIncorporationCertifofincorp = round($totalSizeBytesIncorporationCertifofincorp / 1024, 2);
        
        
        
        
        $entriesIncorporationMemoofAssoc = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Memorandum of Association')
    ->get();
        $countIncorporationMemoofAssoc = $entriesIncorporationMemoofAssoc->count();
        $totalSizeBytesIncorporationMemoofAssoc = $entriesIncorporationMemoofAssoc->sum('file_size');
        $totalSizeKBIncorporationMemoofAssoc = round($totalSizeBytesIncorporationMemoofAssoc / 1024, 2);
        
        
         $entriesIncorporationPartnerdeed = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Partnership deed')
    ->get();
        $countIncorporationPartnerdeed = $entriesIncorporationPartnerdeed->count();
        $totalSizeBytesIncorporationPartnerdeed = $entriesIncorporationPartnerdeed->sum('file_size');
        $totalSizeKBIncorporationPartnerdeed = round($totalSizeBytesIncorporationPartnerdeed / 1024, 2);
        
        
        $entriesIncorporationLLPAgreement = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'LLP Agreement')
    ->get();
        $countIncorporationLLPAgreement = $entriesIncorporationLLPAgreement->count();
        $totalSizeBytesIncorporationLLPAgreement = $entriesIncorporationLLPAgreement->sum('file_size');
        $totalSizeKBIncorporationLLPAgreement = round($totalSizeBytesIncorporationLLPAgreement / 1024, 2);
        
        
        $entriesIncorporationTrustDeed = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Trust Deed')
    ->get();
        $countIncorporationTrustDeed = $entriesIncorporationTrustDeed->count();
        $totalSizeBytesIncorporationTrustDeed = $entriesIncorporationTrustDeed->sum('file_size');
        $totalSizeKBIncorporationTrustDeed = round($totalSizeBytesIncorporationTrustDeed / 1024, 2);
        
        
        $entriesIncorporationSharecertifF = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Incorporation')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Share certificates')
    ->get();
        $countIncorporationSharecertifF = $entriesIncorporationSharecertifF->count();
        $totalSizeBytesIncorporationSharecertifF = $entriesIncorporationSharecertifF->sum('file_size');
        $totalSizeKBIncorporationSharecertifF = round($totalSizeBytesIncorporationSharecertifF / 1024, 2);
        
        
        
        
        
        $entriescharregpan = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'PAN certificate')
    ->get();
        $countcharregpan = $entriescharregpan->count();
        $totalSizeBytescharregpan = $entriescharregpan->sum('file_size');
        $totalSizeKBcharregpan = round($totalSizeBytescharregpan / 1024, 2);
        
        
        
        
        $entriescharregtan = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'TAN certificate')
    ->get();
        $countcharregtan = $entriescharregtan->count();
        $totalSizeBytescharregtan = $entriescharregtan->sum('file_size');
        $totalSizeKBcharregtan = round($totalSizeBytescharregtan / 1024, 2);
        
        
         $entriescharregGSTIN = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'GSTIN certificate')
    ->get();
        $countcharregGSTIN = $entriescharregGSTIN->count();
        $totalSizeBytescharregGSTIN = $entriescharregGSTIN->sum('file_size');
        $totalSizeKBcharregGSTIN = round($totalSizeBytescharregGSTIN / 1024, 2);
        
        
         $entriescharregMSME = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'MSME certificate')
    ->get();
        $countcharregMSME = $entriescharregMSME->count();
        $totalSizeBytescharregMSME = $entriescharregMSME->sum('file_size');
        $totalSizeKBcharregMSME = round($totalSizeBytescharregMSME / 1024, 2);
        
        
        
        $entriescharregTrademark = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Trademark')
    ->get();
        $countcharregTrademark = $entriescharregTrademark->count();
        $totalSizeBytescharregTrademark = $entriescharregTrademark->sum('file_size');
        $totalSizeKBcharregTrademark = round($totalSizeBytescharregTrademark / 1024, 2);
        
        
        
        $entriescharregPFC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Provident Fund certificate')
    ->get();
        $countcharregPFC = $entriescharregPFC->count();
        $totalSizeBytescharregPFC = $entriescharregPFC->sum('file_size');
        $totalSizeKBcharregPFC = round($totalSizeBytescharregPFC / 1024, 2);
        
        
        $entriescharregESIC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Employee State Insurance certificate')
    ->get();
        $countcharregESIC = $entriescharregESIC->count();
        $totalSizeBytescharregESIC = $entriescharregESIC->sum('file_size');
        $totalSizeKBcharregESIC = round($totalSizeBytescharregESIC / 1024, 2);
        
        
        $entriescharregPTC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Professional Tax certificate')
    ->get();
        $countcharregPTC = $entriescharregPTC->count();
        $totalSizeBytescharregPTC = $entriescharregPTC->sum('file_size');
        $totalSizeKBcharregPTC = round($totalSizeBytescharregPTC / 1024, 2);
        
        
        $entriescharregLWFC = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Labour Welfare Fund certificate')
    ->get();
        $countcharregLWFC = $entriescharregLWFC->count();
        $totalSizeBytescharregLWFC = $entriescharregLWFC->sum('file_size');
        $totalSizeKBcharregLWFC = round($totalSizeBytescharregLWFC / 1024, 2);
        
        
        $entriescharregPP = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'LIKE', '%Taxation / Charter documents / Registrations')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'POSH Policy')
    ->get();
        $countcharregPP = $entriescharregPP->count();
        $totalSizeBytescharregPP = $entriescharregPP->sum('file_size');
        $totalSizeKBcharregPP = round($totalSizeBytescharregPP / 1024, 2);
        
        
        
        $entriesSECAABRAA = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Board Resolution for the appointment of Auditor')
    ->get();
        $countSECAABRAA = $entriesSECAABRAA->count();
        $totalSizeBytesSECAABRAA = $entriesSECAABRAA->sum('file_size');
        $totalSizeKBSECAABRAA = round($totalSizeBytesSECAABRAA / 1024, 2);
        
        
         $entriesSECAAIA = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Intimation to auditor')
    ->get();
        $countSECAAIA = $entriesSECAAIA->count();
        $totalSizeBytesSECAAIA = $entriesSECAAIA->sum('file_size');
        $totalSizeKBSECAAIA = round($totalSizeBytesSECAAIA / 1024, 2);
        
        
        
          $entriesSECAALA = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Letter of appointment')
    ->get();
        $countSECAALA = $entriesSECAALA->count();
        $totalSizeBytesSECAALA = $entriesSECAALA->sum('file_size');
        $totalSizeKBSECAALA = round($totalSizeBytesSECAALA / 1024, 2);
        
        
        
         $entriesSECAACRCAA = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Certificate as per Rule 4 and consent by Auditor for his appointment')
    ->get();
        $countSECAACRCAA = $entriesSECAACRCAA->count();
        $totalSizeBytesSECAACRCAA = $entriesSECAACRCAA->sum('file_size');
        $totalSizeKBSECAACRCAA = round($totalSizeBytesSECAACRCAA / 1024, 2);
        
        
        
                 $entriesSECAAALA = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Acceptance letter for appointment')
    ->get();
        $countSECAAALA = $entriesSECAAALA->count();
        $totalSizeBytesSECAAALA = $entriesSECAAALA->sum('file_size');
        $totalSizeKBSECAAALA = round($totalSizeBytesSECAAALA / 1024, 2);
        
        
         $entriesSECAASR = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Auditor Appointment')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Special Resolution')
    ->get();
        $countSECAASR = $entriesSECAASR->count();
        $totalSizeBytesSECAASR = $entriesSECAASR->sum('file_size');
        $totalSizeKBSECAASR = round($totalSizeBytesSECAASR / 1024, 2);
        
        
        
         $entriesSECSRRM = CommonTable::where('user_id', $user->id)
    ->where('is_delete', 0)
    ->whereNull('is_replaced')
    // ->where('location', 'Legal / Secretarial / Statutory Registers')
    ->where('location', $decodedFolderLocation)
    ->where('real_file_name', 'Register of Members')
    ->get();
        $countSECSRRM = $entriesSECSRRM->count();
        $totalSizeBytesSECSRRM = $entriesSECSRRM->sum('file_size');
        $totalSizeKBSECSRRM = round($totalSizeBytesSECSRRM / 1024, 2);
        
        // sandeep start here 30 sept 2024 secreterial fix path 
        $entriesSECSRROSH = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Other Security Holders')
            ->get();
        $countSECSRROSH = $entriesSECSRROSH->count();
        $totalSizeBytesSECSRROSH = $entriesSECSRROSH->sum('file_size');
        $totalSizeKBSECSRROSH = round($totalSizeBytesSECSRROSH / 1024, 2);
        
        
        $entriesSECSRFR = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', '⁠Foreign Register')
            ->get();
        $countSECSRFR = $entriesSECSRFR->count();
        $totalSizeBytesSECSRFR = $entriesSECSRFR->sum('file_size');
        $totalSizeKBSECSRFR = round($totalSizeBytesSECSRFR / 1024, 2);
        
        
        $entriesSECSRRDKMPR = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Directors and KMP')
            ->get();
        $countSECSRRDKMPR = $entriesSECSRRDKMPR->count();
        $totalSizeBytesSECSRRDKMPR = $entriesSECSRRDKMPR->sum('file_size');
        $totalSizeKBSECSRRDKMPR = round($totalSizeBytesSECSRRDKMPR / 1024, 2);
        
        
        $entriesSECSRROC = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', '⁠Register of Charges')
            ->get();
        $countSECSRROC = $entriesSECSRROC->count();
        $totalSizeBytesSECSRROC = $entriesSECSRROC->sum('file_size');
        $totalSizeKBSECSRROC = round($totalSizeBytesSECSRROC / 1024, 2);
        
        
        $entriesSECSRROD = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Deposits')
            ->get();
        $countSECSRROD = $entriesSECSRROD->count();
        $totalSizeBytesSECSRROD = $entriesSECSRROD->sum('file_size');
        $totalSizeKBSECSRROD = round($totalSizeBytesSECSRROD / 1024, 2);
        
        
        $entriesSECSRRLGS = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Loans, Guarantees and Securities')
            ->get();
        $countSECSRRLGS = $entriesSECSRRLGS->count();
        $totalSizeBytesSECSRRLGS = $entriesSECSRRLGS->sum('file_size');
        $totalSizeKBSECSRRLGS = round($totalSizeBytesSECSRRLGS / 1024, 2);
        
        
         $entriesSECSRROINHCN = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Investments not held in Company’s name')
            ->get();
        $countSECSRROINHCN = $entriesSECSRROINHCN->count();
        $totalSizeBytesSECSRROINHCN = $entriesSECSRROINHCN->sum('file_size');
        $totalSizeKBSECSRROINHCN = round($totalSizeBytesSECSRROINHCN / 1024, 2);
        
        
        $entriesSECSRRCDI = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', '⁠Register of Contracts in which Directors are interested')
            ->get();
        $countSECSRRCDI = $entriesSECSRRCDI->count();
        $totalSizeBytesSECSRRCDI = $entriesSECSRRCDI->sum('file_size');
        $totalSizeKBSECSRRCDI = round($totalSizeBytesSECSRRCDI / 1024, 2);
        
        
        $entriesSECSRRSES = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Sweat Equity Shares')
            ->get();
        $countSECSRRSES = $entriesSECSRRSES->count();
        $totalSizeBytesSECSRRSES = $entriesSECSRRSES->sum('file_size');
        $totalSizeKBSECSRRSES = round($totalSizeBytesSECSRRSES / 1024, 2);
        
        
        $entriesSECSRRESO = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Employee Stock Options')
            ->get();
        $countSECSRRESO = $entriesSECSRRESO->count();
        $totalSizeBytesSECSRRESO = $entriesSECSRRESO->sum('file_size');
        $totalSizeKBSECSRRESO = round($totalSizeBytesSECSRRESO / 1024, 2);
        
        
        $entriesSECSRROSBB = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Securities Bought Back')
            ->get();
        $countSECSRROSBB = $entriesSECSRROSBB->count();
        $totalSizeBytesSECSRROSBB = $entriesSECSRROSBB->sum('file_size');
        $totalSizeKBSECSRROSBB = round($totalSizeBytesSECSRROSBB / 1024, 2);
        
        
        $entriesSECSRRRDSC = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Renewed or Duplicate Share Certificates')
            ->get();
        $countSECSRRRDSC = $entriesSECSRRRDSC->count();
        $totalSizeBytesSECSRRRDSC = $entriesSECSRRRDSC->sum('file_size');
        $totalSizeKBSECSRRRDSC = round($totalSizeBytesSECSRRRDSC / 1024, 2);
        
        
        $entriesSECSRRSBO = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of SBO')
            ->get();
        $countSECSRRSBO = $entriesSECSRRSBO->count();
        $totalSizeBytesSECSRRSBO = $entriesSECSRRSBO->sum('file_size');
        $totalSizeKBSECSRRSBO = round($totalSizeBytesSECSRRSBO / 1024, 2);
        
        
        $entriesSECSRRPB = CommonTable::where('user_id', $user->id)
            ->where('is_delete', 0)
            ->whereNull('is_replaced')
            // ->where('location', 'Legal / Secretarial / Statutory Registers')
            ->where('location', $decodedFolderLocation)
            ->where('real_file_name', 'Register of Postal Ballot')
            ->get();
        $countSECSRRPB = $entriesSECSRRPB->count();
        $totalSizeBytesSECSRRPB = $entriesSECSRRPB->sum('file_size');
        $totalSizeKBSECSRRPB = round($totalSizeBytesSECSRRPB / 1024, 2);
        

        $folderLocation = request()->query('folder');

    // Ensure the parameter is not null or empty before proceeding


    // Decode the folder parameter
    // $decodedFolderLocation = urldecode($folderLocation);

    // Fetch entries from the database based on the user ID, is_delete status, location, and real_file_name
    $entriesemponboard = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Offer Letter')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboard = $entriesemponboard->count();
        $totalSizeBytesemponboard = $entriesemponboard->sum('file_size');
        $totalSizeKBemponboard = round($totalSizeBytesemponboard / 1024, 2);

        // dd($totalSizeKBemponboard);
        
       
        // sandeep end here 30 sept 2024
        
        $entriesemponboardal = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acceptance Letter')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardal = $entriesemponboardal->count();
        $totalSizeBytesemponboardal = $entriesemponboardal->sum('file_size');
        $totalSizeKBemponboardal = round($totalSizeBytesemponboardal / 1024, 2);

        $entriesemponboardea = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Employment Agreement')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardea = $entriesemponboardea->count();
        $totalSizeBytesemponboardea = $entriesemponboardea->sum('file_size');
        $totalSizeKBemponboardea = round($totalSizeBytesemponboardea / 1024, 2);


        $entriesemponboardnda = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Non Disclosure Agreement')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardnda = $entriesemponboardnda->count();
        $totalSizeBytesemponboardnda = $entriesemponboardnda->sum('file_size');
        $totalSizeKBemponboardnda = round($totalSizeBytesemponboardnda / 1024, 2);

        $entriesemponboardnc = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Non-compete')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardnc = $entriesemponboardnc->count();
        $totalSizeBytesemponboardnc = $entriesemponboardnc->sum('file_size');
        $totalSizeKBemponboardnc = round($totalSizeBytesemponboardnc / 1024, 2);


        $entriesemponboardcb = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Contractual Bond')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardcb = $entriesemponboardcb->count();
        $totalSizeBytesemponboardcb = $entriesemponboardcb->sum('file_size');
        $totalSizeKBemponboardcb = round($totalSizeBytesemponboardcb / 1024, 2);


        $entriesemponboardepf = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Form 11 - EPF')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardepf = $entriesemponboardepf->count();
        $totalSizeBytesemponboardepf = $entriesemponboardepf->sum('file_size');
        $totalSizeKBemponboardepf = round($totalSizeBytesemponboardepf / 1024, 2);


        $entriesemponboardincometax = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Form 12BB - Income Tax')
        ->get();
            // dd($decodedFolderLocation);
        $countemponboardincometax = $entriesemponboardincometax->count();
        $totalSizeBytesemponboardincometax = $entriesemponboardincometax->sum('file_size');
        $totalSizeKBemponboardincometax = round($totalSizeBytesemponboardincometax / 1024, 2);


        $entrieskycphoto = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Photo')
        ->get();
            // dd($decodedFolderLocation);
        $countkycphoto = $entrieskycphoto->count();
        $totalSizeByteskycphoto = $entrieskycphoto->sum('file_size');
        $totalSizeKBkycphoto = round($totalSizeByteskycphoto / 1024, 2);

        $entrieskycaadhar = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Aadhar KYC')
        ->get();
            // dd($decodedFolderLocation);
        $countkycaadhar = $entrieskycaadhar->count();
        $totalSizeByteskycaadhar = $entrieskycaadhar->sum('file_size');
        $totalSizeKBkycaadhar = round($totalSizeByteskycaadhar / 1024, 2);


        $entrieskycpan = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'PAN KYC')
        ->get();
            // dd($decodedFolderLocation);
        $countkycpan = $entrieskycpan->count();
        $totalSizeByteskycpan = $entrieskycpan->sum('file_size');
        $totalSizeKBkycpan = round($totalSizeByteskycpan / 1024, 2);


        $entrieskycaddressproof = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Address Proof')
        ->get();
            // dd($decodedFolderLocation);
        $countkycaddressproof = $entrieskycaddressproof->count();
        $totalSizeByteskycaddressproof = $entrieskycaddressproof->sum('file_size');
        $totalSizeKBkycaddressproof = round($totalSizeByteskycaddressproof / 1024, 2);


        $entrieskyccontactdetails = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Contact Details')
        ->get();
            // dd($decodedFolderLocation);
        $countkyccontactdetails = $entrieskyccontactdetails->count();
        $totalSizeByteskyccontactdetails = $entrieskyccontactdetails->sum('file_size');
        $totalSizeKBkyccontactdetails = round($totalSizeByteskyccontactdetails  / 1024, 2);



        $entrieshrpayrim = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Reimbursement forms & Invoices')
        ->get();
            // dd($decodedFolderLocation);
        $counthrpayrim = $entrieshrpayrim->count();
        $totalSizeByteshrpayrim = $entrieshrpayrim->sum('file_size');
        $totalSizeKBhrpayrim = round($totalSizeByteshrpayrim  / 1024, 2);

        $entrieshrpayrimapprove = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Approvals')
        ->get();
            // dd($decodedFolderLocation);
        $counthrpayrimapprove = $entrieshrpayrimapprove->count();
        $totalSizeByteshrpayrimapprove = $entrieshrpayrimapprove->sum('file_size');
        $totalSizeKBhrpayrimapprove = round($totalSizeByteshrpayrimapprove  / 1024, 2);

        $entrieshrempdec = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Asset Declaration Forms')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrempdec = $entrieshrempdec->count();
        $totalSizeByteshrempdec = $entrieshrempdec->sum('file_size');
        $totalSizeKBhrempdec = round($totalSizeByteshrempdec  / 1024, 2);

        $entrieshrempdecmaster = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Employee Master')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrempdecmaster = $entrieshrempdecmaster->count();
        $totalSizeByteshrempdecmaster = $entrieshrempdecmaster->sum('file_size');
        $totalSizeKBhrempdecmaster = round($totalSizeByteshrempdecmaster  / 1024, 2);


        $entrieshrpaymoney1 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Attendance log')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrpaymoney1 = $entrieshrpaymoney1->count();
        $totalSizeByteshrpaymoney1 = $entrieshrpaymoney1->sum('file_size');
        $totalSizeKBhrpaymoney1 = round($totalSizeByteshrpaymoney1  / 1024, 2);


        $entrieshrpaymoney2 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Variable pays')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrpaymoney2 = $entrieshrpaymoney2->count();
        $totalSizeByteshrpaymoney2 = $entrieshrpaymoney2->sum('file_size');
        $totalSizeKBhrpaymoney2 = round($totalSizeByteshrpaymoney2  / 1024, 2);


        $entrieshrpaymoney3 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Terminations/ Exits')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrpaymoney3 = $entrieshrpaymoney3->count();
        $totalSizeByteshrpaymoney3 = $entrieshrpaymoney3->sum('file_size');
        $totalSizeKBhrpaymoney3 = round($totalSizeByteshrpaymoney3  / 1024, 2);


        $entrieshrpaymoney4 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'New Hires')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrpaymoney4 = $entrieshrpaymoney4->count();
        $totalSizeByteshrpaymoney4 = $entrieshrpaymoney4->sum('file_size');
        $totalSizeKBhrpaymoney4 = round($totalSizeByteshrpaymoney4  / 1024, 2);


        $entrieshrpaymoney5 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Pay Register')
        ->get();
            // dd($decodedFolderLocation);
        $counthrhrpaymoney5 = $entrieshrpaymoney5->count();
        $totalSizeByteshrpaymoney5 = $entrieshrpaymoney5->sum('file_size');
        $totalSizeKBhrpaymoney5 = round($totalSizeByteshrpaymoney5  / 1024, 2);



        $entrieshremppol1 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Policy')
        ->get();
            // dd($decodedFolderLocation);
        $counthremppol1 = $entrieshremppol1->count();
        $totalSizeByteshremppol1 = $entrieshremppol1->sum('file_size');
        $totalSizeKBhremppol1 = round($totalSizeByteshremppol1  / 1024, 2);


        $entrieshremppol2 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Grant Letters')
        ->get();
            // dd($decodedFolderLocation);
        $counthremppol2 = $entrieshremppol2->count();
        $totalSizeByteshremppol2 = $entrieshremppol2->sum('file_size');
        $totalSizeKBhremppol2 = round($totalSizeByteshremppol2  / 1024, 2);


        $entrieshremppol3 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acceptance Letters')
        ->get();
            // dd($decodedFolderLocation);
        $counthremppol3 = $entrieshremppol3->count();
        $totalSizeByteshremppol3 = $entrieshremppol3->sum('file_size');
        $totalSizeKBhremppol3 = round($totalSizeByteshremppol3  / 1024, 2);


        $entrieshremppol4 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Nominations')
        ->get();
            // dd($decodedFolderLocation);
        $counthremppol4 = $entrieshremppol4->count();
        $totalSizeByteshremppol4 = $entrieshremppol4->sum('file_size');
        $totalSizeKBhremppol4 = round($totalSizeByteshremppol4  / 1024, 2);



        $entrieshroff1 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Resignation letter')
        ->get();
            // dd($decodedFolderLocation);
        $counthroff1 = $entrieshroff1->count();
        $totalSizeByteshroff1 = $entrieshroff1->sum('file_size');
        $totalSizeKBhroff1 = round($totalSizeByteshroff1  / 1024, 2);


        $entrieshroff2 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Experience Letter')
        ->get();
            // dd($decodedFolderLocation);
        $counthroff2 = $entrieshroff2->count();
        $totalSizeByteshroff2 = $entrieshroff2->sum('file_size');
        $totalSizeKBhroff2 = round($totalSizeByteshroff2  / 1024, 2);


        $entrieshroff3 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'No Dues certificate')
        ->get();
            // dd($decodedFolderLocation);
        $counthroff3 = $entrieshroff3->count();
        $totalSizeByteshroff3 = $entrieshroff3->sum('file_size');
        $totalSizeKBhroff3 = round($totalSizeByteshroff3  / 1024, 2);


        $entrieshroff4 = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Character certificate')
        ->get();
            // dd($decodedFolderLocation);
        $counthroff4 = $entrieshroff4->count();
        $totalSizeByteshroff4 = $entrieshroff4->sum('file_size');
        $totalSizeKBhroff4 = round($totalSizeByteshroff4  / 1024, 2);



        $entriesdirecttaxmonthlyworking = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxmonthlyworking = $entriesdirecttaxmonthlyworking->count();
        $totalSizeBytesdirecttaxmonthlyworking = $entriesdirecttaxmonthlyworking->sum('file_size');
        $totalSizeKBdirecttaxmonthlyworking = round($totalSizeBytesdirecttaxmonthlyworking  / 1024, 2);



        $entriesdirecttaxmonthlyChallan = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Challan')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxmonthlyChallan = $entriesdirecttaxmonthlyChallan->count();
        $totalSizeBytesdirecttaxmonthlyChallan = $entriesdirecttaxmonthlyChallan->sum('file_size');
        $totalSizeKBdirecttaxmonthlyChallan = round($totalSizeBytesdirecttaxmonthlyChallan  / 1024, 2);


        $entriesdirecttaxQuarterlyFilingsWorkings = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxQuarterlyFilingsWorkings = $entriesdirecttaxQuarterlyFilingsWorkings->count();
        $totalSizeBytesdirecttaxQuarterlyFilingsWorkings = $entriesdirecttaxQuarterlyFilingsWorkings->sum('file_size');
        $totalSizeKBdirecttaxQuarterlyFilingsWorkings = round($totalSizeBytesdirecttaxQuarterlyFilingsWorkings  / 1024, 2);


        $entriesdirecttaxQuarterlyFilingsReturn = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxQuarterlyFilingsReturn = $entriesdirecttaxQuarterlyFilingsReturn->count();
        $totalSizeBytesdirecttaxQuarterlyFilingsReturn = $entriesdirecttaxQuarterlyFilingsReturn->sum('file_size');
        $totalSizeKBdirecttaxQuarterlyFilingsReturn = round($totalSizeBytesdirecttaxQuarterlyFilingsReturn  / 1024, 2);


        $entriesdirecttaxQuarterlyFilingsAcknowledgement = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxQuarterlyFilingsAcknowledgement = $entriesdirecttaxQuarterlyFilingsAcknowledgement->count();
        $totalSizeBytesdirecttaxQuarterlyFilingsAcknowledgement = $entriesdirecttaxQuarterlyFilingsAcknowledgement->sum('file_size');
        $totalSizeKBdirecttaxQuarterlyFilingsAcknowledgement = round($totalSizeBytesdirecttaxQuarterlyFilingsAcknowledgement  / 1024, 2);



        $entriesdirecttaxLitigationsNotices = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Notices')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxLitigationsNotices = $entriesdirecttaxLitigationsNotices->count();
        $totalSizeBytesdirecttaxLitigationsNotices = $entriesdirecttaxLitigationsNotices->sum('file_size');
        $totalSizeKBdirecttaxLitigationsNotices = round($totalSizeBytesdirecttaxLitigationsNotices  / 1024, 2);


        $entriesdirecttaxLitigationsResponses = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Responses')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxLitigationsResponses = $entriesdirecttaxLitigationsResponses->count();
        $totalSizeBytesdirecttaxLitigationsResponses = $entriesdirecttaxLitigationsResponses->sum('file_size');
        $totalSizeKBdirecttaxLitigationsResponses = round($totalSizeBytesdirecttaxLitigationsResponses  / 1024, 2);


        $entriesdirecttaxLitigationsOrders = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Orders')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxLitigationsOrders = $entriesdirecttaxLitigationsOrders->count();
        $totalSizeBytesdirecttaxLitigationsOrders = $entriesdirecttaxLitigationsOrders->sum('file_size');
        $totalSizeKBdirecttaxLitigationsOrders = round($totalSizeBytesdirecttaxLitigationsOrders  / 1024, 2);


        $entriesdirecttaxQuarterlyPaymentsWorkings = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxQuarterlyPaymentsWorkings = $entriesdirecttaxQuarterlyPaymentsWorkings->count();
        $totalSizeBytesdirecttaxQuarterlyPaymentsWorkings = $entriesdirecttaxQuarterlyPaymentsWorkings->sum('file_size');
        $totalSizeKBdirecttaxQuarterlyPaymentsWorkings = round($totalSizeBytesdirecttaxQuarterlyPaymentsWorkings  / 1024, 2);


        $entriesdirecttaxQuarterlyPaymentsChallan = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Challan')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxQuarterlyPaymentsChallan = $entriesdirecttaxQuarterlyPaymentsChallan->count();
        $totalSizeBytesdirecttaxQuarterlyPaymentsChallan = $entriesdirecttaxQuarterlyPaymentsChallan->sum('file_size');
        $totalSizeKBdirecttaxQuarterlyPaymentsChallan = round($totalSizeBytesdirecttaxQuarterlyPaymentsChallan  / 1024, 2);


        $entriesdirecttaxIncomeTaxAnnualReturnsFinancialStatements  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Financial Statements')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxIncomeTaxAnnualReturnsFinancialStatements = $entriesdirecttaxIncomeTaxAnnualReturnsFinancialStatements->count();
        $totalSizeBytesdirecttaxIncomeTaxAnnualReturnsFinancialStatements = $entriesdirecttaxIncomeTaxAnnualReturnsFinancialStatements->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxAnnualReturnsFinancialStatements = round($totalSizeBytesdirecttaxIncomeTaxAnnualReturnsFinancialStatements  / 1024, 2);


        $entriesdirecttaxIncomeTaxAnnualReturnsCOI  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'COI')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxIncomeTaxAnnualReturnsCOI = $entriesdirecttaxIncomeTaxAnnualReturnsCOI->count();
        $totalSizeBytesdirecttaxIncomeTaxAnnualReturnsCOI = $entriesdirecttaxIncomeTaxAnnualReturnsCOI->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxAnnualReturnsCOI = round($totalSizeBytesdirecttaxIncomeTaxAnnualReturnsCOI  / 1024, 2);

        $entriesdirecttaxIncomeTaxAnnualReturnsReturn  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxIncomeTaxAnnualReturnsReturn = $entriesdirecttaxIncomeTaxAnnualReturnsReturn->count();
        $totalSizeBytesdirecttaxIncomeTaxAnnualReturnsReturn = $entriesdirecttaxIncomeTaxAnnualReturnsReturn->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxAnnualReturnsReturn = round($totalSizeBytesdirecttaxIncomeTaxAnnualReturnsReturn  / 1024, 2);

        $entriesdirecttaxIncomeTaxAnnualReturnsAcknowledgement  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxIncomeTaxAnnualReturnsAcknowledgement = $entriesdirecttaxIncomeTaxAnnualReturnsAcknowledgement->count();
        $totalSizeBytesdirecttaxIncomeTaxAnnualReturnsAcknowledgement = $entriesdirecttaxIncomeTaxAnnualReturnsAcknowledgement->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxAnnualReturnsAcknowledgement = round($totalSizeBytesdirecttaxIncomeTaxAnnualReturnsAcknowledgement  / 1024, 2);


        $entriesdirecttaxIncomeTaxLitigationsNotices  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Notices')
        ->get();
            // dd($entriesdirecttaxIncomeTaxLitigationsNotices);
        $countdirecttaxIncomeTaxLitigationsNotices = $entriesdirecttaxIncomeTaxLitigationsNotices->count();
        $totalSizeBytesdirecttaxIncomeTaxLitigationsNotices = $entriesdirecttaxIncomeTaxLitigationsNotices->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxLitigationsNotices = round($totalSizeBytesdirecttaxIncomeTaxLitigationsNotices  / 1024, 2);


        $entriesdirecttaxIncomeTaxLitigationsResponses  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Responses')
        ->get();
            // dd($decodedFolderLocation);
        $countdirecttaxIncomeTaxLitigationsResponses = $entriesdirecttaxIncomeTaxLitigationsResponses->count();
        $totalSizeBytesdirecttaxIncomeTaxLitigationsResponses = $entriesdirecttaxIncomeTaxLitigationsResponses->sum('file_size');
        $totalSizeKBdirecttaxIncomeTaxLitigationsResponses = round($totalSizeBytesdirecttaxIncomeTaxLitigationsResponses  / 1024, 2);

        // dd($user->id);
        $entriesindirecttaxIncomeTaxLitigationsNotices  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Notices')
        ->get();

        // dd("Hey   i am herr  ::: ".$decodedFolderLocation);
        // $entriesindirecttaxIncomeTaxLitigationsNotices = CommonTable::where('user_id', $user->id)
        // ->where('is_delete', 0)
        // ->whereNull('is_replaced')
        // ->where('location', $decodedFolderLocation)
        // ->where('real_file_name', 'Notices');

        // // Print the query with bindings
        // $query = $entriesindirecttaxIncomeTaxLitigationsNotices->toSql();
        // $bindings = $entriesindirecttaxIncomeTaxLitigationsNotices->getBindings();

        // dd(vsprintf(str_replace('?', '%s', $query), array_map(fn($binding) => is_numeric($binding) ? $binding : "'$binding'", $bindings)));


            // dd($entriesindirecttaxIncomeTaxLitigationsNotices);
        $countindirecttaxIncomeTaxLitigationsNotices = $entriesindirecttaxIncomeTaxLitigationsNotices->count();
        // dd($countindirecttaxIncomeTaxLitigationsNotices);
        $totalSizeBytesindirecttaxIncomeTaxLitigationsNotices = $entriesindirecttaxIncomeTaxLitigationsNotices->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxLitigationsNotices = round($totalSizeBytesindirecttaxIncomeTaxLitigationsNotices  / 1024, 2);


        $entriesindirecttaxIncomeTaxLitigationsResponses  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Responses')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxLitigationsResponses = $entriesindirecttaxIncomeTaxLitigationsResponses->count();
        $totalSizeBytesindirecttaxIncomeTaxLitigationsResponses = $entriesindirecttaxIncomeTaxLitigationsResponses->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxLitigationsResponses = round($totalSizeBytesindirecttaxIncomeTaxLitigationsResponses  / 1024, 2);

        $entriesindirecttaxIncomeTaxLitigationsOrders  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Orders')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxLitigationsOrders = $entriesindirecttaxIncomeTaxLitigationsOrders->count();
        $totalSizeBytesindirecttaxIncomeTaxLitigationsOrders = $entriesindirecttaxIncomeTaxLitigationsOrders->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxLitigationsOrders = round($totalSizeBytesindirecttaxIncomeTaxLitigationsOrders  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR1Workings  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR1Workings = $entriesindirecttaxIncomeTaxGSTR1Workings->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR1Workings = $entriesindirecttaxIncomeTaxGSTR1Workings->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR1Workings = round($totalSizeBytesindirecttaxIncomeTaxGSTR1Workings  / 1024, 2);

        $entriesindirecttaxIncomeTaxGSTR1Return  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR1Return = $entriesindirecttaxIncomeTaxGSTR1Return->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR1Return = $entriesindirecttaxIncomeTaxGSTR1Return->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR1Return = round($totalSizeBytesindirecttaxIncomeTaxGSTR1Return  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR1Acknowledgement  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR1Acknowledgement = $entriesindirecttaxIncomeTaxGSTR1Acknowledgement->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR1Acknowledgement = $entriesindirecttaxIncomeTaxGSTR1Acknowledgement->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR1Acknowledgement = round($totalSizeBytesindirecttaxIncomeTaxGSTR1Acknowledgement  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR3bWorkings  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR3bWorkings = $entriesindirecttaxIncomeTaxGSTR3bWorkings->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR3bWorkings = $entriesindirecttaxIncomeTaxGSTR3bWorkings->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR3bWorkings = round($totalSizeBytesindirecttaxIncomeTaxGSTR3bWorkings  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR3bReturn  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR3bReturn = $entriesindirecttaxIncomeTaxGSTR3bReturn->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR3bReturn = $entriesindirecttaxIncomeTaxGSTR3bReturn->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR3bReturn = round($totalSizeBytesindirecttaxIncomeTaxGSTR3bReturn  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR3bChallanReceipt  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Challan & Receipt')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR3bChallanReceipt = $entriesindirecttaxIncomeTaxGSTR3bChallanReceipt->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR3bChallanReceipt = $entriesindirecttaxIncomeTaxGSTR3bChallanReceipt->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR3bChallanReceipt = round($totalSizeBytesindirecttaxIncomeTaxGSTR3bChallanReceipt  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR3bAcknowledgement  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR3bAcknowledgement = $entriesindirecttaxIncomeTaxGSTR3bAcknowledgement->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR3bAcknowledgement = $entriesindirecttaxIncomeTaxGSTR3bAcknowledgement->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR3bAcknowledgement = round($totalSizeBytesindirecttaxIncomeTaxGSTR3bAcknowledgement  / 1024, 2);




        $entriesindirecttaxIncomeTaxGSTR9Workings  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9Workings = $entriesindirecttaxIncomeTaxGSTR9Workings->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9Workings = $entriesindirecttaxIncomeTaxGSTR9Workings->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9Workings = round($totalSizeBytesindirecttaxIncomeTaxGSTR9Workings  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9Return  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9Return = $entriesindirecttaxIncomeTaxGSTR9Return->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9Return = $entriesindirecttaxIncomeTaxGSTR9Return->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9Return = round($totalSizeBytesindirecttaxIncomeTaxGSTR9Return  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9ChallanReceipt  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Challan & Receipt')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9ChallanReceipt = $entriesindirecttaxIncomeTaxGSTR9ChallanReceipt->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9ChallanReceipt = $entriesindirecttaxIncomeTaxGSTR9ChallanReceipt->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9ChallanReceipt = round($totalSizeBytesindirecttaxIncomeTaxGSTR9ChallanReceipt  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9Acknowledgement  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9Acknowledgement = $entriesindirecttaxIncomeTaxGSTR9Acknowledgement->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9Acknowledgement = $entriesindirecttaxIncomeTaxGSTR9Acknowledgement->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9Acknowledgement = round($totalSizeBytesindirecttaxIncomeTaxGSTR9Acknowledgement  / 1024, 2);





        $entriesindirecttaxIncomeTaxGSTR9cWorkings  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Workings')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9cWorkings = $entriesindirecttaxIncomeTaxGSTR9cWorkings->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9cWorkings = $entriesindirecttaxIncomeTaxGSTR9cWorkings->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9cWorkings = round($totalSizeBytesindirecttaxIncomeTaxGSTR9cWorkings  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9cReturn  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Return')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9cReturn = $entriesindirecttaxIncomeTaxGSTR9cReturn->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9cReturn = $entriesindirecttaxIncomeTaxGSTR9cReturn->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9cReturn = round($totalSizeBytesindirecttaxIncomeTaxGSTR9cReturn  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9cChallanReceipt  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Challan & Receipt')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9cChallanReceipt = $entriesindirecttaxIncomeTaxGSTR9cChallanReceipt->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9cChallanReceipt = $entriesindirecttaxIncomeTaxGSTR9cChallanReceipt->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9cChallanReceipt = round($totalSizeBytesindirecttaxIncomeTaxGSTR9cChallanReceipt  / 1024, 2);


        $entriesindirecttaxIncomeTaxGSTR9cAcknowledgement  = CommonTable::where('user_id', $user->id)
        ->where('is_delete', 0)
        ->whereNull('is_replaced')
        ->where('location', $decodedFolderLocation) // Use the decoded folder parameter here
        ->where('real_file_name', 'Acknowledgement')
        ->get();
            // dd($decodedFolderLocation);
        $countindirecttaxIncomeTaxGSTR9cAcknowledgement = $entriesindirecttaxIncomeTaxGSTR9cAcknowledgement->count();
        $totalSizeBytesindirecttaxIncomeTaxGSTR9cAcknowledgement = $entriesindirecttaxIncomeTaxGSTR9cAcknowledgement->sum('file_size');
        $totalSizeKBindirecttaxIncomeTaxGSTR9cAcknowledgement = round($totalSizeBytesindirecttaxIncomeTaxGSTR9cAcknowledgement  / 1024, 2);


        
        $user = auth()->user();
         $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();

    if($iamhereSKY == true){
        return response()->json([


            'countindirecttaxIncomeTaxGSTR9cAcknowledgement' => $countindirecttaxIncomeTaxGSTR9cAcknowledgement,
            'totalSizeKBindirecttaxIncomeTaxGSTR9cAcknowledgement' => $totalSizeKBindirecttaxIncomeTaxGSTR9cAcknowledgement,

            'countindirecttaxIncomeTaxGSTR9cChallanReceipt' => $countindirecttaxIncomeTaxGSTR9cChallanReceipt,
            'totalSizeKBindirecttaxIncomeTaxGSTR9cChallanReceipt' => $totalSizeKBindirecttaxIncomeTaxGSTR9cChallanReceipt,

            'countindirecttaxIncomeTaxGSTR9cReturn' => $countindirecttaxIncomeTaxGSTR9cReturn,
            'totalSizeKBindirecttaxIncomeTaxGSTR9cReturn' => $totalSizeKBindirecttaxIncomeTaxGSTR9cReturn,


            'countindirecttaxIncomeTaxGSTR9cWorkings' => $countindirecttaxIncomeTaxGSTR9cWorkings,
            'totalSizeKBindirecttaxIncomeTaxGSTR9cWorkings' => $totalSizeKBindirecttaxIncomeTaxGSTR9cWorkings,



            'countindirecttaxIncomeTaxGSTR9Acknowledgement' => $countindirecttaxIncomeTaxGSTR9Acknowledgement,
            'totalSizeKBindirecttaxIncomeTaxGSTR9Acknowledgement' => $totalSizeKBindirecttaxIncomeTaxGSTR9Acknowledgement,

            'countindirecttaxIncomeTaxGSTR9ChallanReceipt' => $countindirecttaxIncomeTaxGSTR9ChallanReceipt,
            'totalSizeKBindirecttaxIncomeTaxGSTR9ChallanReceipt' => $totalSizeKBindirecttaxIncomeTaxGSTR9ChallanReceipt,

            'countindirecttaxIncomeTaxGSTR9Return' => $countindirecttaxIncomeTaxGSTR9Return,
            'totalSizeKBindirecttaxIncomeTaxGSTR9Return' => $totalSizeKBindirecttaxIncomeTaxGSTR9Return,


            'countindirecttaxIncomeTaxGSTR9Workings' => $countindirecttaxIncomeTaxGSTR9Workings,
            'totalSizeKBindirecttaxIncomeTaxGSTR9Workings' => $totalSizeKBindirecttaxIncomeTaxGSTR9Workings,



            'countindirecttaxIncomeTaxGSTR3bAcknowledgement' => $countindirecttaxIncomeTaxGSTR3bAcknowledgement,
            'totalSizeKBindirecttaxIncomeTaxGSTR3bAcknowledgement' => $totalSizeKBindirecttaxIncomeTaxGSTR3bAcknowledgement,

            'countindirecttaxIncomeTaxGSTR3bChallanReceipt' => $countindirecttaxIncomeTaxGSTR3bChallanReceipt,
            'totalSizeKBindirecttaxIncomeTaxGSTR3bChallanReceipt' => $totalSizeKBindirecttaxIncomeTaxGSTR3bChallanReceipt,

            'countindirecttaxIncomeTaxGSTR3bReturn' => $countindirecttaxIncomeTaxGSTR3bReturn,
            'totalSizeKBindirecttaxIncomeTaxGSTR3bReturn' => $totalSizeKBindirecttaxIncomeTaxGSTR3bReturn,


            'countindirecttaxIncomeTaxGSTR3bWorkings' => $countindirecttaxIncomeTaxGSTR3bWorkings,
            'totalSizeKBindirecttaxIncomeTaxGSTR3bWorkings' => $totalSizeKBindirecttaxIncomeTaxGSTR3bWorkings,


            'countindirecttaxIncomeTaxGSTR1Acknowledgement' => $countindirecttaxIncomeTaxGSTR1Acknowledgement,
            'totalSizeKBindirecttaxIncomeTaxGSTR1Acknowledgement' => $totalSizeKBindirecttaxIncomeTaxGSTR1Acknowledgement,


            'countindirecttaxIncomeTaxGSTR1Return' => $countindirecttaxIncomeTaxGSTR1Return,
            'totalSizeKBindirecttaxIncomeTaxGSTR1Return' => $totalSizeKBindirecttaxIncomeTaxGSTR1Return,

            'countindirecttaxIncomeTaxGSTR1Workings' => $countindirecttaxIncomeTaxGSTR1Workings,
            'totalSizeKBindirecttaxIncomeTaxGSTR1Workings' => $totalSizeKBindirecttaxIncomeTaxGSTR1Workings,

            'countindirecttaxIncomeTaxLitigationsOrders' => $countindirecttaxIncomeTaxLitigationsOrders,
            'totalSizeKBindirecttaxIncomeTaxLitigationsOrders' => $totalSizeKBindirecttaxIncomeTaxLitigationsOrders,



            'countindirecttaxIncomeTaxLitigationsResponses' => $countindirecttaxIncomeTaxLitigationsResponses,
            'totalSizeKBindirecttaxIncomeTaxLitigationsResponses' => $totalSizeKBindirecttaxIncomeTaxLitigationsResponses,

            'countindirecttaxIncomeTaxLitigationsNotices' => $countindirecttaxIncomeTaxLitigationsNotices,
            'totalSizeKBindirecttaxIncomeTaxLitigationsNotices' => $totalSizeKBindirecttaxIncomeTaxLitigationsNotices,


            'countdirecttaxIncomeTaxLitigationsResponses' => $countdirecttaxIncomeTaxLitigationsResponses,
            'totalSizeKBdirecttaxIncomeTaxLitigationsResponses' => $totalSizeKBdirecttaxIncomeTaxLitigationsResponses,

            'countdirecttaxIncomeTaxLitigationsNotices' => $countdirecttaxIncomeTaxLitigationsNotices,
            'totalSizeKBdirecttaxIncomeTaxLitigationsNotices' => $totalSizeKBdirecttaxIncomeTaxLitigationsNotices,


            'countdirecttaxIncomeTaxAnnualReturnsAcknowledgement' => $countdirecttaxIncomeTaxAnnualReturnsAcknowledgement,
            'totalSizeKBdirecttaxIncomeTaxAnnualReturnsAcknowledgement' => $totalSizeKBdirecttaxIncomeTaxAnnualReturnsAcknowledgement,

            'countdirecttaxIncomeTaxAnnualReturnsReturn' => $countdirecttaxIncomeTaxAnnualReturnsReturn,
            'totalSizeKBdirecttaxIncomeTaxAnnualReturnsReturn' => $totalSizeKBdirecttaxIncomeTaxAnnualReturnsReturn,

            'countdirecttaxIncomeTaxAnnualReturnsCOI' => $countdirecttaxIncomeTaxAnnualReturnsCOI,
            'totalSizeKBdirecttaxIncomeTaxAnnualReturnsCOI' => $totalSizeKBdirecttaxIncomeTaxAnnualReturnsCOI,

            'countdirecttaxIncomeTaxAnnualReturnsFinancialStatements' => $countdirecttaxIncomeTaxAnnualReturnsFinancialStatements,
            'totalSizeKBdirecttaxIncomeTaxAnnualReturnsFinancialStatements' => $totalSizeKBdirecttaxIncomeTaxAnnualReturnsFinancialStatements,

            'countdirecttaxQuarterlyPaymentsChallan' => $countdirecttaxQuarterlyPaymentsChallan,
            'totalSizeKBdirecttaxQuarterlyPaymentsChallan' => $totalSizeKBdirecttaxQuarterlyPaymentsChallan,

            'countdirecttaxQuarterlyPaymentsWorkings' => $countdirecttaxQuarterlyPaymentsWorkings,
            'totalSizeKBdirecttaxQuarterlyPaymentsWorkings' => $totalSizeKBdirecttaxQuarterlyPaymentsWorkings,

            'countdirecttaxLitigationsOrders' => $countdirecttaxLitigationsOrders,
            'totalSizeKBdirecttaxLitigationsOrders' => $totalSizeKBdirecttaxLitigationsOrders,

            'countdirecttaxLitigationsResponses' => $countdirecttaxLitigationsResponses,
            'totalSizeKBdirecttaxLitigationsResponses' => $totalSizeKBdirecttaxLitigationsResponses,

            'countdirecttaxLitigationsNotices' => $countdirecttaxLitigationsNotices,
            'totalSizeKBdirecttaxLitigationsNotices' => $totalSizeKBdirecttaxLitigationsNotices,

            'countdirecttaxQuarterlyFilingsAcknowledgement' => $countdirecttaxQuarterlyFilingsAcknowledgement,
            'totalSizeKBdirecttaxQuarterlyFilingsAcknowledgement' => $totalSizeKBdirecttaxQuarterlyFilingsAcknowledgement,

            'countdirecttaxQuarterlyFilingsReturn' => $countdirecttaxQuarterlyFilingsReturn,
            'totalSizeKBdirecttaxQuarterlyFilingsReturn' => $totalSizeKBdirecttaxQuarterlyFilingsReturn,

            'countdirecttaxQuarterlyFilingsWorkings' => $countdirecttaxQuarterlyFilingsWorkings,
            'totalSizeKBdirecttaxQuarterlyFilingsWorkings' => $totalSizeKBdirecttaxQuarterlyFilingsWorkings,

            'countdirecttaxmonthlyChallan' => $countdirecttaxmonthlyChallan,
            'totalSizeKBdirecttaxmonthlyChallan' => $totalSizeKBdirecttaxmonthlyChallan,


            'countdirecttaxmonthlyworking' => $countdirecttaxmonthlyworking,
            'totalSizeKBdirecttaxmonthlyworking' => $totalSizeKBdirecttaxmonthlyworking,
            'counthroff4' => $counthroff4,
            'totalSizeKBhroff4' => $totalSizeKBhroff4,
            'counthroff3' => $counthroff3,
            'totalSizeKBhroff3' => $totalSizeKBhroff3,
            'counthroff2' => $counthroff2,
            'totalSizeKBhroff2' => $totalSizeKBhroff2,
            'counthroff1' => $counthroff1,
            'totalSizeKBhroff1' => $totalSizeKBhroff1,
            'counthremppol4' => $counthremppol4,
            'totalSizeKBhremppol4' => $totalSizeKBhremppol4,
            'counthremppol3' => $counthremppol3,
            'totalSizeKBhremppol3' => $totalSizeKBhremppol3,
            'counthremppol2' => $counthremppol2,
            'totalSizeKBhremppol2' => $totalSizeKBhremppol2,
            'counthremppol1' => $counthremppol1,
            'totalSizeKBhremppol1' => $totalSizeKBhremppol1,
            'counthrhrpaymoney5' => $counthrhrpaymoney5,
            'totalSizeKBhrpaymoney5' => $totalSizeKBhrpaymoney5,
            'counthrhrpaymoney4' => $counthrhrpaymoney4,
            'totalSizeKBhrpaymoney4' => $totalSizeKBhrpaymoney4,
            'counthrhrpaymoney3' => $counthrhrpaymoney3,
            'totalSizeKBhrpaymoney3' => $totalSizeKBhrpaymoney3,
            'counthrhrpaymoney2' => $counthrhrpaymoney2,
            'totalSizeKBhrpaymoney2' => $totalSizeKBhrpaymoney2,
            'counthrhrpaymoney1' => $counthrhrpaymoney1,
            'totalSizeKBhrpaymoney1' => $totalSizeKBhrpaymoney1,
            'counthrhrempdecmaster' => $counthrhrempdecmaster,
            'totalSizeKBhrempdecmaster' => $totalSizeKBhrempdecmaster,
            'counthrhrempdec' => $counthrhrempdec,
            'totalSizeKBhrempdec' => $totalSizeKBhrempdec,
            'counthrpayrimapprove' => $counthrpayrimapprove,
            'totalSizeKBhrpayrimapprove' => $totalSizeKBhrpayrimapprove,
            'counthrpayrim' => $counthrpayrim,
            'totalSizeKBhrpayrim' => $totalSizeKBhrpayrim,
            'countkyccontactdetails' => $countkyccontactdetails,
            'totalSizeKBkyccontactdetails' => $totalSizeKBkyccontactdetails,
            'countkycaddressproof' => $countkycaddressproof,
            'totalSizeKBkycaddressproof' => $totalSizeKBkycaddressproof,
            'countkycpan' => $countkycpan,
            'totalSizeKBkycpan' => $totalSizeKBkycpan,
            'countkycaadhar' => $countkycaadhar,
            'totalSizeKBkycaadhar' => $totalSizeKBkycaadhar,
            'countkycphoto' => $countkycphoto,
            'totalSizeKBkycphoto' => $totalSizeKBkycphoto,
            'countemponboardincometax' => $countemponboardincometax,
            'totalSizeKBemponboardincometax' => $totalSizeKBemponboardincometax,
            'countemponboardepf' => $countemponboardepf,
            'totalSizeKBemponboardepf' => $totalSizeKBemponboardepf,
            'countemponboardcb' => $countemponboardcb,
            'totalSizeKBemponboardcb' => $countemponboardcb,
            'countemponboardnc' => $countemponboardnc,
            'totalSizeKBemponboardnc' => $totalSizeKBemponboardnc,
            'countemponboardnda' => $countemponboardnda,
            'totalSizeKBemponboardnda' => $totalSizeKBemponboardnda,
            'countemponboardea' => $countemponboardea,
            'totalSizeKBemponboardea' => $totalSizeKBemponboardea,
            'countemponboardal' => $countemponboardal,
            'totalSizeKBemponboardal' => $totalSizeKBemponboardal,
            'totalSizeKBemponboard' => $totalSizeKBemponboard,
            'countemponboard' => $countemponboard,
            'totalSizeKBdirectorappointmentsdir3din' => $totalSizeKBdirectorappointmentsdir3din,
            'countdirectorappointmentsdir3din' => $countdirectorappointmentsdir3din,
            'countSECAASR' => $countSECAASR,
            'totalSizeKBSECAASR' => $totalSizeKBSECAASR,
            'countSECAAALA' => $countSECAAALA,
            'totalSizeKBSECAAALA' => $totalSizeKBSECAAALA,
            'countSECAACRCAA' => $countSECAACRCAA,
            'totalSizeKBSECAACRCAA' => $totalSizeKBSECAACRCAA,
            'countSECAALA' => $countSECAALA,
            'totalSizeKBSECAALA' => $totalSizeKBSECAALA,
            'countSECAAIA' => $countSECAAIA,
            'totalSizeKBSECAAIA' => $totalSizeKBSECAAIA,
            'countSECAABRAA' => $countSECAABRAA,
            'totalSizeKBSECAABRAA' => $totalSizeKBSECAABRAA,
            'countcharregPP' => $countcharregPP,
            'totalSizeKBcharregPP' => $totalSizeKBcharregPP,
            'countcharregLWFC' => $countcharregLWFC,
            'totalSizeKBcharregLWFC' => $totalSizeKBcharregLWFC,
            'countcharregPTC' => $countcharregPTC,
            'totalSizeKBcharregPTC' => $totalSizeKBcharregPTC,
            'countcharregESIC' => $countcharregESIC,
            'totalSizeKBcharregESIC' => $totalSizeKBcharregESIC,
            'countcharregPFC' => $countcharregPFC,
            'totalSizeKBcharregPFC' => $totalSizeKBcharregPFC,
            'countcharregTrademark' => $countcharregTrademark,
            'totalSizeKBcharregTrademark' => $totalSizeKBcharregTrademark,
            'countcharregMSME' => $countcharregMSME,
            'totalSizeKBcharregMSME' => $totalSizeKBcharregMSME,
            'countcharregGSTIN' => $countcharregGSTIN,
            'totalSizeKBcharregGSTIN' => $totalSizeKBcharregGSTIN,
            'countcharregtan' => $countcharregtan,
            'totalSizeKBcharregtan' => $totalSizeKBcharregtan,
            'countcharregpan' => $countcharregpan,
            'totalSizeKBcharregpan' => $totalSizeKBcharregpan,
            'countIncorporationSharecertifF' => $countIncorporationSharecertifF,
            'totalSizeKBIncorporationSharecertifF' => $totalSizeKBIncorporationSharecertifF,
            'countIncorporationTrustDeed' => $countIncorporationTrustDeed,
            'totalSizeKBIncorporationTrustDeed' => $totalSizeKBIncorporationTrustDeed,
            'countIncorporationLLPAgreement' => $countIncorporationLLPAgreement,
            'totalSizeKBIncorporationLLPAgreement' => $totalSizeKBIncorporationLLPAgreement,
            'countIncorporationPartnerdeed' => $countIncorporationPartnerdeed,
            'totalSizeKBIncorporationPartnerdeed' => $totalSizeKBIncorporationPartnerdeed,
            'countIncorporationMemoofAssoc' => $countIncorporationMemoofAssoc,
            'totalSizeKBIncorporationMemoofAssoc' => $totalSizeKBIncorporationMemoofAssoc,
            'countIncorporationCertifofincorp' => $countIncorporationCertifofincorp,
            'totalSizeKBIncorporationCertifofincorp' => $totalSizeKBIncorporationCertifofincorp,
            'countIncorporationArtofAssoc' => $countIncorporationArtofAssoc, 
            'totalSizeKBIncorporationArtofAssoc' => $totalSizeKBIncorporationArtofAssoc,
            'countDirector2Signimg'  => $countDirector2Signimg,
            'totalSizeKBDirector2Signimg' => $totalSizeKBDirector2Signimg, 
            'countDirector2Photo' => $countDirector2Photo,
            'totalSizeKBDirector2Photo' => $totalSizeKBDirector2Photo,
            'countDirector2PANKYC' => $countDirector2PANKYC,
            'totalSizeKBDirector2PANKYC' => $totalSizeKBDirector2PANKYC,
            'countDirector2AddressProof' => $countDirector2AddressProof,
            'countDirector2ContactDetails' => $countDirector2ContactDetails,
            'totalSizeKBDirector2ContactDetails' => $totalSizeKBDirector2ContactDetails,
            'totalSizeKBDirector2AddressProof' => $totalSizeKBDirector2AddressProof,
            'countDirector2AadharKYC' => $countDirector2AadharKYC,
            'totalSizeKBDirector2AadharKYC' => $totalSizeKBDirector2AadharKYC,
            'countDirector1Signimg' => $countDirector1Signimg,
            'totalSizeKBDirector1Signimg' => $totalSizeKBDirector1Signimg,
            'countDirector1Photo' => $countDirector1Photo,
            'totalSizeKBDirector1Photo' => $totalSizeKBDirector1Photo,
            'countDirector1PANKYC' => $countDirector1PANKYC,
            'totalSizeKBDirector1PANKYC' => $totalSizeKBDirector1PANKYC,
            'countDirector1AddressProof' => $countDirector1AddressProof,
            'countDirector1ContactDetails' => $countDirector1ContactDetails,
            'totalSizeKBDirector1ContactDetails' => $totalSizeKBDirector1ContactDetails,
            'totalSizeKBDirector1AddressProof' => $totalSizeKBDirector1AddressProof,
            'countDirector1AadharKYC' => $countDirector1AadharKYC,
            'totalSizeKBDirector1AadharKYC' => $totalSizeKBDirector1AadharKYC,
            'countAuditorExitsADT2' => $countAuditorExitsADT2,
            'totalSizeKBAuditorExitsADT2' => $totalSizeKBAuditorExitsADT2,
            'countAuditorExitsSpecialResol' => $countAuditorExitsSpecialResol,
            'totalSizeKBAuditorExitsSpecialResol' => $totalSizeKBAuditorExitsSpecialResol,
            'countAuditorExitsResignDetofgroundsseekremaud' => $countAuditorExitsResignDetofgroundsseekremaud,
            'totalSizeKBAuditorExitsResignDetofgroundsseekremaud' => $totalSizeKBAuditorExitsResignDetofgroundsseekremaud,
            'countAuditorExitsADT3' => $countAuditorExitsADT3,
            'countAuditorExitsResignletteraud' => $countAuditorExitsResignletteraud,
            'totalSizeKBAuditorExitsResignletteraud' => $totalSizeKBAuditorExitsResignletteraud,
            'totalSizeKBAuditorExitsADT3' => $totalSizeKBAuditorExitsResignletteraud,
            'countdepositundertakingsFormDPT3' => $countdepositundertakingsFormDPT3,
            'totalSizeKBdepositundertakingsFormDPT3' => $totalSizeKBdepositundertakingsFormDPT3,
            'countdirectorresignationdir11' => $countdirectorresignationdir11,
            'totalSizeKBdirectorresignationdir11' => $totalSizeKBdirectorresignationdir11,
            'countdirectorresignationdir12' => $countdirectorresignationdir12,
            'totalSizeKBdirectorresignationdir12' => $totalSizeKBdirectorresignationdir12,
            'countmutualfundstatement' => $countmutualfundstatement,
            'totalSizeKBmutualfundstatement' => $totalSizeKBmutualfundstatement,
            'countfixeddepoiststatement' => $countfixeddepoiststatement,
            'totalSizeKBfixeddepoiststatement' => $totalSizeKBfixeddepoiststatement,
            'countdcreditcardstatement' => $countdcreditcardstatement,
            'totalSizeKBcreditcardstatement' => $totalSizeKBcreditcardstatement, 
            'countdirectorappointmentsdir12' => $countdirectorappointmentsdir12,
            'totalSizeKBdirectorappointmentsdir12' => $totalSizeKBdirectorappointmentsdir12,
            'countdirectorappointmentsdir6' => $countdirectorappointmentsdir6, 
            'totalSizeKBdirectorappointmentsdir6' => $totalSizeKBdirectorappointmentsdir6,
            'countdirectorappointmentsdir3' => $countdirectorappointmentsdir3,
            'totalSizeKBdirectorappointmentsdir3' => $totalSizeKBdirectorappointmentsdir3,
            'countbank' => $countbank,
            'totalSizeKBbank' => $totalSizeKBbank, 
            'countentriesmgt7a' => $countentriesmgt7a,
            'totalSizeKBentriemgt7a' => $totalSizeKBentriemgt7a,
            'countentriesmgt7' => $countentriesmgt7, 
            'totalSizeKBentriemgt7' => $totalSizeKBentriemgt7,
            'countentriescfs' => $countentriescfs,
            'totalSizeKBentriecfs' => $totalSizeKBentriecfs, 
            'countentriesafs' => $countentriesafs,
            'countentriesinnerinc20a' => $countentriesinnerinc20a,
            'totalSizeKBentrieafs' => $totalSizeKBentrieafs, 
            'totalSizeKBentrieinnerinc20a' => $totalSizeKBentrieinnerinc20a,
            'totalSizeKBentrieinnerinc22' => $totalSizeKBentrieinnerinc22,
            'countentriesinnerinc22' => $countentriesinnerinc22,
            'countentriesinnerinc35' => $countentriesinnerinc35,
            'totalSizeKBentrieinnerinc35' => $totalSizeKBentrieinnerinc35, 
            'countentriesinnerinc34' => $countentriesinnerinc34,
            'totalSizeKBentrieinnerinc34' => $totalSizeKBentrieinnerinc34,
            'countentriesinnerinc33' => $countentriesinnerinc33, 
            'totalSizeKBentrieinnerinc33' => $totalSizeKBentrieinnerinc33,
            'countentriesinnerspice' => $countentriesinnerspice,
            'totalSizeKBentrieinnerspice' => $totalSizeKBentrieinnerspice,
            'totalSizeKBentrieinc9' => $totalSizeKBentrieinc9,
            'countentriesinc9' => $countentriesinc9,
            'countinnerrun' => $countinnerrun,
            'totalSizeKBinnerrun' => $totalSizeKBinnerrun,
            'count' => $count, 
            'totalSizeKB' => $totalSizeKB,
            'totalSizeKBMinbooks' => $totalSizeKBMinbooks,
            'countMinbooks' => $countMinbooks,
            'countentriesreso' => $countentriesreso, 
            'totalSizeKBentriesreso' => $totalSizeKBentriesreso,
            'countentriesas' => $countentriesas,
            'totalSizeKBentriesas' => $totalSizeKBentriesas,
            'countentriesnomeet' => $countentriesnomeet, 
            'totalSizeKBentriesnomeet' => $totalSizeKBentriesnomeet,
            'countentriesminbookmeet' => $countentriesminbookmeet,
            'totalSizeKBentriesminbookmeet' => $totalSizeKBentriesminbookmeet,
            'countentriesasmeet' => $countentriesasmeet,
            'totalSizeKBentriesasmeet' => $totalSizeKBentriesasmeet,
            'countentriesresomeet' => $countentriesresomeet, 
            'totalSizeKBentriesresomeet' => $totalSizeKBentriesresomeet,
            'countentriesordernotice' => $countentriesordernotice,
            'totalSizeKBentriesordernotice' => $totalSizeKBentriesordernotice, 
            'countentriesorderminbook' => $countentriesorderminbook,
            'totalSizeKBentriesorderminbook' => $totalSizeKBentriesorderminbook,
            'countentriesorderAttend' => $countentriesorderAttend, 
            'totalSizeKBentriesorderAttend' => $totalSizeKBentriesorderAttend,
            'countentriesorderreso' => $countentriesorderreso,
            'totalSizeKBentriesorderreso' => $totalSizeKBentriesorderreso,
            'countSECSRRM' => $countSECSRRM,
            'totalSizeKBSECSRRM' => $totalSizeKBSECSRRM, 
            'countSECSRROSH' => $countSECSRROSH,
            'totalSizeKBSECSRROSH' => $totalSizeKBSECSRROSH,
            'countSECSRFR' => $countSECSRFR,
            'totalSizeKBSECSRFR' => $totalSizeKBSECSRFR,
            'countSECSRRDKMPR' => $countSECSRRDKMPR,
            'totalSizeKBSECSRRDKMPR' => $totalSizeKBSECSRRDKMPR,
            'countSECSRROC' => $countSECSRROC,
            'totalSizeKBSECSRROC' => $totalSizeKBSECSRROC,
            'countSECSRROD' => $countSECSRROD,
            'totalSizeKBSECSRROD' => $totalSizeKBSECSRROD,
            'countSECSRRLGS' => $countSECSRRLGS,
            'totalSizeKBSECSRRLGS' => $totalSizeKBSECSRRLGS,
            'countSECSRROINHCN' => $countSECSRROINHCN,
            'totalSizeKBSECSRROINHCN' => $totalSizeKBSECSRROINHCN,
            'countSECSRRCDI' => $countSECSRRCDI,
            'totalSizeKBSECSRRCDI' => $totalSizeKBSECSRRCDI,
            'countSECSRRSES' => $countSECSRRSES,
            'totalSizeKBSECSRRSES' => $totalSizeKBSECSRRSES, 
            'countSECSRRESO' => $countSECSRRESO,
            'totalSizeKBSECSRRESO' => $totalSizeKBSECSRRESO,
            'countSECSRROSBB' => $countSECSRROSBB,
            'totalSizeKBSECSRROSBB' => $totalSizeKBSECSRROSBB,
            'countSECSRRRDSC' => $countSECSRRRDSC,
            'totalSizeKBSECSRRRDSC' => $totalSizeKBSECSRRRDSC,
            'countSECSRRSBO' => $countSECSRRSBO,
            'totalSizeKBSECSRRSBO' => $totalSizeKBSECSRRSBO,
            'countSECSRRPB' => $countSECSRRPB,
            'totalSizeKBSECSRRPB' => $totalSizeKBSECSRRPB
          
        ]);
    }

   

    // return view('Secretarial_Annual_Filings', compact('countentriesafs','countentriescfs', 'countentriesmgt7','countentriesmgt7a','totalSizeKBentrieafs','totalSizeKBentriecfs', 'totalSizeKBentriemgt7', 'totalSizeKBentriemgt7a'));
        
        
        return view('docurepo', compact('countindirecttaxIncomeTaxGSTR9cAcknowledgement','totalSizeKBindirecttaxIncomeTaxGSTR9cAcknowledgement','countindirecttaxIncomeTaxGSTR9cChallanReceipt','totalSizeKBindirecttaxIncomeTaxGSTR9cChallanReceipt','countindirecttaxIncomeTaxGSTR9cReturn','totalSizeKBindirecttaxIncomeTaxGSTR9cReturn','countindirecttaxIncomeTaxGSTR9cWorkings','totalSizeKBindirecttaxIncomeTaxGSTR9cWorkings',
            
            'countindirecttaxIncomeTaxGSTR9Acknowledgement','totalSizeKBindirecttaxIncomeTaxGSTR9Acknowledgement','countindirecttaxIncomeTaxGSTR9ChallanReceipt','totalSizeKBindirecttaxIncomeTaxGSTR9ChallanReceipt','countindirecttaxIncomeTaxGSTR9Return','totalSizeKBindirecttaxIncomeTaxGSTR9Return','countindirecttaxIncomeTaxGSTR9Workings','totalSizeKBindirecttaxIncomeTaxGSTR9Workings',
            
            'countindirecttaxIncomeTaxGSTR3bAcknowledgement','totalSizeKBindirecttaxIncomeTaxGSTR3bAcknowledgement','countindirecttaxIncomeTaxGSTR3bChallanReceipt','totalSizeKBindirecttaxIncomeTaxGSTR3bChallanReceipt','countindirecttaxIncomeTaxGSTR3bReturn','totalSizeKBindirecttaxIncomeTaxGSTR3bReturn','countindirecttaxIncomeTaxGSTR3bWorkings','totalSizeKBindirecttaxIncomeTaxGSTR3bWorkings','countindirecttaxIncomeTaxGSTR1Acknowledgement','totalSizeKBindirecttaxIncomeTaxGSTR1Acknowledgement','countindirecttaxIncomeTaxGSTR1Return','totalSizeKBindirecttaxIncomeTaxGSTR1Return','countindirecttaxIncomeTaxGSTR1Workings','totalSizeKBindirecttaxIncomeTaxGSTR1Workings','countindirecttaxIncomeTaxLitigationsOrders','totalSizeKBindirecttaxIncomeTaxLitigationsOrders','countindirecttaxIncomeTaxLitigationsResponses','totalSizeKBindirecttaxIncomeTaxLitigationsResponses','countindirecttaxIncomeTaxLitigationsNotices','totalSizeKBindirecttaxIncomeTaxLitigationsNotices','countdirecttaxIncomeTaxLitigationsResponses','totalSizeKBdirecttaxIncomeTaxLitigationsResponses','countdirecttaxIncomeTaxLitigationsNotices','totalSizeKBdirecttaxIncomeTaxLitigationsNotices','countdirecttaxIncomeTaxAnnualReturnsAcknowledgement','totalSizeKBdirecttaxIncomeTaxAnnualReturnsAcknowledgement','countdirecttaxIncomeTaxAnnualReturnsReturn','totalSizeKBdirecttaxIncomeTaxAnnualReturnsReturn','countdirecttaxIncomeTaxAnnualReturnsCOI','totalSizeKBdirecttaxIncomeTaxAnnualReturnsCOI','countdirecttaxIncomeTaxAnnualReturnsFinancialStatements','totalSizeKBdirecttaxIncomeTaxAnnualReturnsFinancialStatements','countdirecttaxQuarterlyPaymentsChallan','totalSizeKBdirecttaxQuarterlyPaymentsChallan','countdirecttaxQuarterlyPaymentsWorkings','totalSizeKBdirecttaxQuarterlyPaymentsWorkings','countdirecttaxLitigationsResponses','totalSizeKBdirecttaxLitigationsResponses','countdirecttaxLitigationsOrders','totalSizeKBdirecttaxLitigationsOrders','countdirecttaxLitigationsNotices','totalSizeKBdirecttaxLitigationsNotices','countdirecttaxQuarterlyFilingsAcknowledgement','totalSizeKBdirecttaxQuarterlyFilingsAcknowledgement','countdirecttaxQuarterlyFilingsWorkings','totalSizeKBdirecttaxQuarterlyFilingsWorkings','countdirecttaxQuarterlyFilingsReturn','totalSizeKBdirecttaxQuarterlyFilingsReturn','countdirecttaxmonthlyChallan','totalSizeKBdirecttaxmonthlyChallan','countdirecttaxmonthlyworking','totalSizeKBdirecttaxmonthlyworking','deleteFolder','RealFileFoldersBank','RealFileFolders','counthroff4','totalSizeKBhroff4','counthroff3','totalSizeKBhroff3','counthroff2','totalSizeKBhroff2','counthroff1','totalSizeKBhroff1','counthremppol4','totalSizeKBhremppol4','counthremppol3','totalSizeKBhremppol3','counthremppol2','totalSizeKBhremppol2','counthremppol1','totalSizeKBhremppol1','counthrhrpaymoney5','totalSizeKBhrpaymoney5','counthrhrpaymoney4','totalSizeKBhrpaymoney4','counthrhrpaymoney3','totalSizeKBhrpaymoney3','counthrhrpaymoney2','totalSizeKBhrpaymoney2','counthrhrpaymoney1','totalSizeKBhrpaymoney1','counthrhrempdecmaster','totalSizeKBhrempdecmaster','counthrhrempdec','totalSizeKBhrempdec','counthrpayrimapprove','totalSizeKBhrpayrimapprove','counthrpayrim','totalSizeKBhrpayrim','countkyccontactdetails','totalSizeKBkyccontactdetails','countkycaddressproof','totalSizeKBkycaddressproof','countkycpan','totalSizeKBkycpan','countkycaadhar','totalSizeKBkycaadhar','countkycphoto','totalSizeKBkycphoto','countemponboardincometax','totalSizeKBemponboardincometax','countemponboardepf','totalSizeKBemponboardepf','countemponboardcb','totalSizeKBemponboardcb','countemponboardnc','totalSizeKBemponboardnc','countemponboardnda','totalSizeKBemponboardnda','countemponboardea','totalSizeKBemponboardea','countemponboardal','totalSizeKBemponboardal','totalSizeKBemponboard','countemponboard','totalSizeKBdirectorappointmentsdir3din','countdirectorappointmentsdir3din','cli_announcements','fileCount','fileCount1','user','commondataroom','countSECAASR','totalSizeKBSECAASR','countSECAAALA','totalSizeKBSECAAALA','countSECAACRCAA','totalSizeKBSECAACRCAA','countSECAALA','totalSizeKBSECAALA','countSECAAIA','totalSizeKBSECAAIA','countSECAABRAA','totalSizeKBSECAABRAA','countcharregPP','totalSizeKBcharregPP','countcharregLWFC','totalSizeKBcharregLWFC','countcharregPTC','totalSizeKBcharregPTC','countcharregESIC','totalSizeKBcharregESIC','countcharregPFC','totalSizeKBcharregPFC','countcharregTrademark','totalSizeKBcharregTrademark','countcharregMSME','totalSizeKBcharregMSME','countcharregGSTIN','totalSizeKBcharregGSTIN','countcharregtan','totalSizeKBcharregtan','countcharregpan','totalSizeKBcharregpan','countIncorporationSharecertifF',
        'totalSizeKBIncorporationSharecertifF','countIncorporationTrustDeed'
        ,'totalSizeKBIncorporationTrustDeed','countIncorporationLLPAgreement',
        'totalSizeKBIncorporationLLPAgreement','countIncorporationPartnerdeed',
        'totalSizeKBIncorporationPartnerdeed','countIncorporationMemoofAssoc',
        'totalSizeKBIncorporationMemoofAssoc','countIncorporationCertifofincorp',
        'totalSizeKBIncorporationCertifofincorp','countIncorporationArtofAssoc',
        'totalSizeKBIncorporationArtofAssoc','countDirector2Signimg','totalSizeKBDirector2Signimg',
        'countDirector2Photo','totalSizeKBDirector2Photo','countDirector2PANKYC',
        'totalSizeKBDirector2PANKYC','countDirector2AddressProof','countDirector2ContactDetails',
        'totalSizeKBDirector2ContactDetails','totalSizeKBDirector2AddressProof',
        'countDirector2AadharKYC','totalSizeKBDirector2AadharKYC','countDirector1Signimg',
        'totalSizeKBDirector1Signimg','countDirector1Photo','totalSizeKBDirector1Photo',
        'countDirector1PANKYC','totalSizeKBDirector1PANKYC','countDirector1AddressProof',
        'countDirector1ContactDetails','totalSizeKBDirector1ContactDetails','totalSizeKBDirector1AddressProof',
        'countDirector1AadharKYC','totalSizeKBDirector1AadharKYC','countAuditorExitsADT2',
        'totalSizeKBAuditorExitsADT2','countAuditorExitsSpecialResol','totalSizeKBAuditorExitsSpecialResol',
        'countAuditorExitsResignDetofgroundsseekremaud','totalSizeKBAuditorExitsResignDetofgroundsseekremaud',
        'countAuditorExitsADT3','countAuditorExitsResignletteraud','totalSizeKBAuditorExitsResignletteraud',
        'totalSizeKBAuditorExitsADT3','countdepositundertakingsFormDPT3','totalSizeKBdepositundertakingsFormDPT3','files4',
        'countdirectorresignationdir11','totalSizeKBdirectorresignationdir11','countdirectorresignationdir12',
        'totalSizeKBdirectorresignationdir12','countmutualfundstatement','totalSizeKBmutualfundstatement',
        'countfixeddepoiststatement','totalSizeKBfixeddepoiststatement','countdcreditcardstatement','totalSizeKBcreditcardstatement',
        'countdirectorappointmentsdir12','totalSizeKBdirectorappointmentsdir12','countdirectorappointmentsdir6',
        'totalSizeKBdirectorappointmentsdir6','countdirectorappointmentsdir3','totalSizeKBdirectorappointmentsdir3',
        'countbank','totalSizeKBbank',
        'countentriesmgt7a','totalSizeKBentriemgt7a','countentriesmgt7',
        'totalSizeKBentriemgt7','countentriescfs','totalSizeKBentriecfs',
        'countentriesafs','countentriesinnerinc20a','totalSizeKBentrieafs',
        'totalSizeKBentrieinnerinc20a','totalSizeKBentrieinnerinc22',
        'countentriesinnerinc22','countentriesinnerinc35','totalSizeKBentrieinnerinc35',
        'countentriesinnerinc34','totalSizeKBentrieinnerinc34','countentriesinnerinc33',
        'totalSizeKBentrieinnerinc33','countentriesinnerspice','totalSizeKBentrieinnerspice',
        'totalSizeKBentrieinc9','countentriesinc9','countinnerrun','totalSizeKBinnerrun',
        'allFolders', 'parentFolders', 'folders', 'latestFolderPath','moadoc','count',
        'totalSizeKB','totalSizeKBMinbooks','countMinbooks','countentriesreso',
        'totalSizeKBentriesreso','countentriesas','totalSizeKBentriesas','countentriesnomeet',
        'totalSizeKBentriesnomeet','countentriesminbookmeet','totalSizeKBentriesminbookmeet',
        'countentriesasmeet','totalSizeKBentriesasmeet','countentriesresomeet',
        'totalSizeKBentriesresomeet','countentriesordernotice','totalSizeKBentriesordernotice',
        'countentriesorderminbook','totalSizeKBentriesorderminbook','countentriesorderAttend',
        'totalSizeKBentriesorderAttend','countentriesorderreso','totalSizeKBentriesorderreso',
        'countSECSRRM','totalSizeKBSECSRRM',
        'countSECSRROSH','totalSizeKBSECSRROSH','countSECSRFR','totalSizeKBSECSRFR','countSECSRRDKMPR','totalSizeKBSECSRRDKMPR',
        'countSECSRROC','totalSizeKBSECSRROC','countSECSRROD','totalSizeKBSECSRROD','countSECSRRLGS','totalSizeKBSECSRRLGS',
        'countSECSRROINHCN','totalSizeKBSECSRROINHCN','countSECSRRCDI','totalSizeKBSECSRRCDI','countSECSRRSES','totalSizeKBSECSRRSES',
        'countSECSRRESO','totalSizeKBSECSRRESO','countSECSRROSBB','totalSizeKBSECSRROSBB','countSECSRRRDSC','totalSizeKBSECSRRRDSC',
        'countSECSRRSBO','totalSizeKBSECSRRSBO','countSECSRRPB','totalSizeKBSECSRRPB'));
    }
    
    
//     public function filterContents(Request $request)
// {
//     $sortOption = $request->get('sortOption');

//     // Fetch folder contents (adjust according to your model/structure)
//     $folders = Folder::all();

//     // Apply sorting logic
//     switch ($sortOption) {
//         case 'a-to-z':
//             $folders = $folders->sortBy('name');
//             break;
//         case 'z-to-a':
//             $folders = $folders->sortByDesc('name');
//             break;
//         case 'recent':
//             $folders = $folders->sortByDesc('updated_at'); // Assuming you use 'updated_at' for recent usage
//             break;
//         default:
//             // Default sorting if needed
//             break;
//     }
// $user = auth()->user();
// $files4 = CommonTable::where('user_id', $user->id)
//     ->where('is_delete', 1)
//     ->get();
//     $userFolders = Folder::where('parent_name', $folderPath)
//                         ->where('user_id', Auth::id())
//                         ->get();

// // Combine both results
// $folderContents = $commonFolders->merge($userFolders);
//     // Return a response with filtered HTML
//     $folderHtml = $folderContents;

//     return response()->json(['folderHtml' => $folderHtml]);
// }

    
    public function getBoardNotices(Request $request)
    {
        $fyear = $request->query('fyear_board_notice');

        // Query the database for notices in the selected financial year
        $notices = BoardNotice::where('fyear', $fyear)->get();

        // Return the data as JSON
        return response()->json($notices);
    }

    public function getboardnoticeFiles()
{
     $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $folders = Folder::where('user_id', Auth::id())->orderBy('name')->get();
        $allFolders = Folder::where('user_id', Auth::id())->orderBy('name')->get();
        $parentFolders = $allFolders->whereNull('parent_name'); 
        $latestFolderPath = Folder::where('user_id', Auth::id())->latest()->value('path');
        $userId = Auth::id();
 
   
        $files = BoardNotice::where('user_id', $userId)->get();
        $moadoc = MOA::all();
     return view('boardnotice', compact('cli_announcements', 'allFolders', 'parentFolders', 'folders', 'latestFolderPath','files','moadoc'));
   
}

    public function fetchFolderData()
    {
        $folders = Folder::where('user_id', Auth::id())->orderBy('name')->where('is_delete', 0)->get();
        return response()->json($folders);
    }
public function fetchDataForYear(Request $request)
    {
        $selectedYear = $request->input('year');

        // Fetch records based on the selected year
        $records = Folder::whereYear('created_at', $selectedYear)
                      ->whereNull('parent_name')
                      ->where('is_delete', 0)
                      ->get();

        // Log the records to the console
        \Log::info('Fetched records: ', $records->toArray());

        // Return the records as JSON
        return response()->json($records);
    }
public function getFolders(Request $request)
    {
     
        $folders =Folder::where('user_id', Auth::id())->orderBy('name') ->where('is_delete', 0)->get();
        return response()->json($folders);
    }
    public function checkFolderStatus(Request $request)
    {
        $folderName = $request->input('folder_name');
        
        // Query to find the folder by parent_name or name, matching the last part of the path
        $folder = Folder::where(function($query) use ($folderName) {
            $query->where('parent_name', 'LIKE', '%' . $folderName . '%')
                  ->orWhere('name', 'LIKE', '%' . $folderName . '%');
        })->first();
    
        // Debugging: Dump the folder for inspection
        // dd($folder);
        
        if ($folder) {
            // Return the folder's status
            return response()->json([
                'success' => true,
                'is_delete' => $folder->is_delete
            ]);
        } else {
            return response()->json([
                'success' => false,
                'message' => 'Folder not found.'
            ]);
        }
    }
    

    public function fetchSubfolders(Request $request)
    {
        $path = $request->input('path');

// Fetch common subfolders where common_folder = 1
$commonSubfolders = Folder::where('parent_name', $path)
                          ->where('common_folder', 1)
                          ->get();

// Fetch the authenticated user's subfolders within the same path
$userSubfolders = Folder::where('parent_name', $path)
                        ->where('user_id', Auth::id())
                        ->where('is_delete', 0)
                        ->get();

// Combine both results
$subfolders = $commonSubfolders->merge($userSubfolders);
    
        $html = '';
        foreach ($subfolders as $folder) {
            
            // 11 sept 2024 sandeep merge here start
            // if (strpos($folder->path, '_') !== false) {
            //     // Find the position of the '_' character
            //     $dash_position = strpos($folder->path, '_');
                
            //     // Get the substring after the '-'
            //     $replacedPath = substr($folder->path, $dash_position + 1);
            //     $folder->path = $replacedPath ;
                
            // }
            // else{
            //     $folder->path = $folder->path;
            // }
            
            if (strpos($folder->name, '_') !== false) {
                // Find the position of the '-' character
                $dash_position_name = strpos($folder->name, '_');
                
                // Get the substring after the '-'
                $replacedName = substr($folder->name, $dash_position_name + 1);
                $folder->name = $replacedName ;
                
            }
            else{
                $folder->name = $folder->name;
            }
            // 11 sept 2024 sandeep merge here end 
            
            
            $html .= '<li class="dropdown">';
             $html .= '<b class="toggle_icconn" data-folder-path="' . $folder->path . '"></b>';
            $html .= '<a href="#" class="folder-link" id="subfold" data-folder-path="' . $folder->path . '">';
            $html .= '<svg class="d_fadee" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M5.635 3.5525L6.01912 3.9375H10.9375C11.2856 3.9375 11.6194 4.07578 11.8656 4.32192C12.1117 4.56806 12.25 4.9019 12.25 5.25V9.625C12.25 9.9731 12.1117 10.3069 11.8656 10.5531C11.6194 10.7992 11.2856 10.9375 10.9375 10.9375H3.0625C2.7144 10.9375 2.38056 10.7992 2.13442 10.5531C1.88828 10.3069 1.75 9.9731 1.75 9.625V3.9375C1.75 3.5894 1.88828 3.25556 2.13442 3.00942C2.38056 2.76328 2.7144 2.625 3.0625 2.625H4.16237C4.33483 2.62504 4.50558 2.65906 4.66487 2.72512C4.82417 2.79118 4.96888 2.88798 5.09075 3.01L5.635 3.5525ZM0.4375 3.9375C0.4375 3.24131 0.714062 2.57363 1.20634 2.08134C1.69863 1.58906 2.36631 1.3125 3.0625 1.3125H4.16237C4.50721 1.31246 4.84868 1.38036 5.16727 1.51233C5.48586 1.6443 5.77532 1.83775 6.01912 2.08162L6.5625 2.625H10.9375C11.6337 2.625 12.3014 2.90156 12.7937 3.39384C13.2859 3.88613 13.5625 4.55381 13.5625 5.25V9.625C13.5625 10.3212 13.2859 10.9889 12.7937 11.4812C12.3014 11.9734 11.6337 12.25 10.9375 12.25H3.0625C2.36631 12.25 1.69863 11.9734 1.20634 11.4812C0.714062 10.9889 0.4375 10.3212 0.4375 9.625V3.9375ZM4.15625 5.6875C3.9822 5.6875 3.81528 5.75664 3.69221 5.87971C3.56914 6.00278 3.5 6.1697 3.5 6.34375C3.5 6.5178 3.56914 6.68472 3.69221 6.80779C3.81528 6.93086 3.9822 7 4.15625 7H9.84375C10.0178 7 10.1847 6.93086 10.3078 6.80779C10.4309 6.68472 10.5 6.5178 10.5 6.34375C10.5 6.1697 10.4309 6.00278 10.3078 5.87971C10.1847 5.75664 10.0178 5.6875 9.84375 5.6875H4.15625Z" fill="#C5C5C5"/>
         </svg> <span>' . $folder->name . '</span></a>';
            $html .= '<ul class="dropdown-menu" id="subfolders-' . urlencode($folder->path) . '">';
            $html .= '<li>';
            $html .= '</li>';
            $html .= '</ul>';
            $html .= '</li>';
        }  
    
        $latestFolderPath = $subfolders->isNotEmpty() ? $subfolders->last()->path : null;
    
        return response()->json(['html' => $html, 'latestFolderPath' => $latestFolderPath]);
    }
    public function fetchSubfolders2(Request $request)
    {
        $path = $request->input('folderName');
$sortOption = $request->get('sortOption');  // Get the selected sorting option

// Base query for fetching folders
$commonFoldersQuery = Folder::where('parent_name', $path)
                            ->where('common_folder', 1);

$userFoldersQuery = Folder::where('parent_name', $path)
                          ->where('user_id', Auth::id())
                          ->where('is_delete', 0);

// Apply sorting logic based on the selected sort option
switch ($sortOption) {
    case 'a-to-z':
        $commonSubfolders = $commonFoldersQuery->orderBy('name', 'asc')->get();
        $userSubfolders = $userFoldersQuery->orderBy('name', 'asc')->get();
        break;

    case 'z-to-a':
        $commonSubfolders = $commonFoldersQuery->orderBy('name', 'desc')->get();
        $userSubfolders = $userFoldersQuery->orderBy('name', 'desc')->get();
        break;

    default:
        // Default to A → Z if no valid sorting option is provided
        $commonSubfolders = $commonFoldersQuery->orderBy('name', 'asc')->get();
        $userSubfolders = $userFoldersQuery->orderBy('name', 'asc')->get();
        break;
}

// Combine both results
$subfolders = $commonSubfolders->merge($userSubfolders);

// Initialize folder HTML
$folderHtml = '<ul class="customulli">';

if ($subfolders->isNotEmpty()) {
    foreach ($subfolders as $folder) {
        // Replace underscores in the folder name
        if (strpos($folder->name, '_') !== false) {
            $dash_position_name = strpos($folder->name, '_');
            $replacedName = substr($folder->name, $dash_position_name + 1);
            $folder->name = $replacedName;
        }

        // Build folder HTML
        $folderHtml .= '<li>
                            <a href="#" class="folder-link wedcolor" data-folder-path="' . $folder->path . '">
                                <div class="folder_wraap foldreload">
                                    <img src="../assets/images/solar_folder-bold.png" id="folders" class="folder-icon" alt="Folder Icon">
                                    <span>' . $folder->name . '</span>
                                </div>
                            </a>
                        </li>';
    }
} else {
    // If no folders, show empty message
    $folderHtml = '<div class="folder_emptyy" id="folds">
                       <div class="empty_image"><img src="../assets/images/empty_folder.png" alt="img"></div>
                       <div class="empty_contnet"><h2>Looks empty here!</h2><p>Try adding or creating folder.</p></div>
                   </div>';
}

$folderHtml .= '</ul>';
    
        $latestFolderPath = $subfolders->isNotEmpty() ? $subfolders->last()->path : null;
    
        return response()->json(['html' => $folderHtml, 'latestFolderPath' => $latestFolderPath]);
    }
public function shareFolder(Request $request)
{

  
  dd($request);

    $folder = Folder::findOrFail($request->folder_id);
    $email = $request->sharepeoplemail;

    // Generate the signed URL with expiration time 
    $expiration = now()->addDays(1); // Default to 1 day
    if ($request->end_date && $request->end_time) {
        $expiration = Carbon::createFromFormat('Y-m-d H:i', "{$request->end_date} {$request->end_time}");
    }

    $signedUrl = URL::temporarySignedRoute(
        'accessFolder', // route name
        $expiration,
        ['folder' => $folder->id, 'access_type' => $request->access_type]
    );

    // Prepare the email content
    $subject = "Folder Access Link: {$folder->name}";
    $message = "You have been granted {$request->access_type} access to the folder: {$folder->name}.\n\n";
    $message .= "You can access the folder using the following link:\n";
    $message .= $signedUrl . "\n\n";
    $message .= "This link will expire on " . $expiration->format('Y-m-d H:i') . ".\n\n";
    $message .= "If you did not expect this email, please ignore it.";

    $headers = "From: ramandeep.singh@milliondox.com\r\n";
    $headers .= "Reply-To: ramandeep.singh@milliondox.com\r\n";
    $headers .= "X-Mailer: PHP/" . phpversion();

    // Send the email using the PHP mail function
    if (mail($email, $subject, $message, $headers)) {
        return back()->with('success', 'Folder link shared successfully.');
    } else {
        return back()->with('error', 'Failed to send the email. Please try again.');
    }
}


    
  public function fetchFolderContents(Request $request)
    {
          $folderPath = $request->get('folderName');
          $folderPaths = $request->get('folderName');
       
        //   $folderPaths = preg_replace('/\//', ' / ', $folderPath);
        //   dd($folderPath);
    $sortOption = $request->get('sortOption');  // Get the selected sorting option
    
    $oldpath = $request->get('folderNamep');

    $directorfolderNames = Folder::where('parent_name', 'LIKE', '2024-2025November301_Accounting & Taxation/2024-2025November301_Charter Documents/2024-2025November301_Director Details')
    ->whereNotNull('director_id')
    ->where('user_id', Auth::id())
    ->pluck('name'); // Retrieves only the `name` column

    // dd($directorfolderNames);

    

    // Base query for fetching folders
    $commonFoldersQuery = Folder::where('parent_name', $folderPath)
                                ->where('common_folder', 1);
                                // ->where('real_file_name', NULL);


                                $userFoldersQuery = Folder::where('parent_name', $folderPath)
                                ->where('user_id', Auth::id())
                                ->where('is_delete', 0);
                            //    ->whereNotNull('director_id');

                                // dd($userFoldersQuery);
                                

                                // ->where('real_file_name', NULL);

    // Apply sorting logic based on the selected sort option
    switch ($sortOption) {
        case 'a-to-z':
            $commonFolders = $commonFoldersQuery->orderBy('name', 'asc')->get();
            $userFolders = $userFoldersQuery->orderBy('name', 'asc')->get();
            break;

        case 'z-to-a':
            $commonFolders = $commonFoldersQuery->orderBy('name', 'desc')->get();
            $userFolders = $userFoldersQuery->orderBy('name', 'desc')->get();
            break;

     

        default:
            // Default to A → Z if no valid sorting option is provided
            $commonFolders = $commonFoldersQuery->orderBy('name', 'asc')->get();
            $userFolders = $userFoldersQuery->orderBy('name', 'asc')->get();
            break;
    }

    // Combine both results
    $folderContents = $commonFolders->merge($userFolders);

    // Optionally, if you want to sort the merged collection again (depends on your requirements)
    if ($sortOption === 'a-to-z' || $sortOption === 'z-to-a') {
        $folderContents = ($sortOption === 'a-to-z') ? $folderContents->sortBy('name') : $folderContents->sortByDesc('name');
    }

        // $fileContents = CommonTable::where('location', $folderPaths)->where('user_id', Auth::id())->where('is_delete', 0 )->get();
        $fileContents = CommonTable::where('location', $folderPaths)->where('user_id', Auth::id())->where('is_delete', 0 )->whereNull('is_replaced')->whereNull('real_file_name')->get();


        // dd($fileContents);
        // Legal/Secretarial/Board Meetings
        // dd($folderPath);
        // $files = UploadedFile::all();
        // Generate the HTML for folders
          if (!$folderContents->isEmpty()) {
        $folderHtml = '<ul class="customulli">';
        foreach ($folderContents as $folder) {
            
            // 11 sept sandeep merge code here start
            // $original_path = $folder->path;
        
            // if (strpos($original_path, '_') !== false) {
            //     // Find the position of the '-' character
            //     $dash_position = strpos($original_path, '_');
                
            //     // Get the substring after the '-'
            //     $replacedPath = substr($original_path, $dash_position + 1);
            //     $original_path = $replacedPath;
            //     $folder->path = $replacedPath ;
                
            // }
            // else{
            //     $original_path = $folder->path;
            //     $folder->path = $folder->path;
            // }
            
            if (strpos($folder->name, '_') !== false) {
                // Find the position of the '-' character
                $dash_position_name = strpos($folder->name, '_');
                
                // Get the substring after the '-'
                $replacedName = substr($folder->name, $dash_position_name + 1);
                $folder->name = $replacedName ;
                
            }
            else{
                $folder->name = $folder->name;
            }
            // 11 sept sandeep merge code here end
            
            if($folder->common_folder == 0)
            {
            $folderHtml .= 
           
            '<li><a href="#" class="folder-link wedcolor ' . ($folder->is_delete == 1 ? 'deleted_button' : '') . '" data-folder-path="' . $folder->path . '">
                                <div class="folder_wraap">
                                    <img src="../assets/images/solar_folder-bold.png" id="folders" class="folder-icon" alt="Folder Icon">
                                    <span>' . $folder->name . '</span>
                                </div>
                            </a>
                            <div class="three_dots">
                                <button class="click_folder_dot" data-folder-id="' . $folder->id . '">
                                    <img src="../assets/images/folder_dot.png" id="folders" class="folder-dots" alt="Folder dots">
                                </button>
                                <div id="myDropdown2-' . $folder->id . '" class="dropdown-content">
                                   
                                    <a class="dropdown-itemm rename_nt" data-bs-toggle="modal" data-bs-target="#renamefolder" data-director_id="' . $folder->director_id . '" data-employee_id="' . $folder->employee_id . '" data-folder_path="' . $folder->path . '" data-old_folder_name="' . $folder->name . '" data-folder_name="' . $folder->name . '" data-folder_id="' . $folder->id . '"><img src="../assets/images/rename_nt.png">Rename</a>

                                     <a class="dropdown-itemm download_nts downloadfolder" data-folder-path="' . $folder->path . '" data-id="' . $folder->id . '"><svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.40625 12.25C2.00014 12.25 1.61066 12.0887 1.32349 11.8015C1.03633 11.5143 0.875 11.1249 0.875 10.7188V8.53125C0.875 8.3572 0.94414 8.19028 1.06721 8.06721C1.19028 7.94414 1.3572 7.875 1.53125 7.875C1.7053 7.875 1.87222 7.94414 1.99529 8.06721C2.11836 8.19028 2.1875 8.3572 2.1875 8.53125V10.7188C2.1875 10.8395 2.2855 10.9375 2.40625 10.9375H11.5938C11.6518 10.9375 11.7074 10.9145 11.7484 10.8734C11.7895 10.8324 11.8125 10.7768 11.8125 10.7188V8.53125C11.8125 8.3572 11.8816 8.19028 12.0047 8.06721C12.1278 7.94414 12.2947 7.875 12.4688 7.875C12.6428 7.875 12.8097 7.94414 12.9328 8.06721C13.0559 8.19028 13.125 8.3572 13.125 8.53125V10.7188C13.125 11.1249 12.9637 11.5143 12.6765 11.8015C12.3893 12.0887 11.9999 12.25 11.5938 12.25H2.40625Z" fill="#CEFFA8"></path>
                                      <path d="M6.34334 6.72788V1.75C6.34334 1.57595 6.41248 1.40903 6.53555 1.28596C6.65862 1.16289 6.82554 1.09375 6.99959 1.09375C7.17364 1.09375 7.34056 1.16289 7.46363 1.28596C7.5867 1.40903 7.65584 1.57595 7.65584 1.75V6.72788L9.37959 5.005C9.44049 4.9441 9.51279 4.89579 9.59236 4.86283C9.67193 4.82987 9.75722 4.81291 9.84334 4.81291C9.92947 4.81291 10.0148 4.82987 10.0943 4.86283C10.1739 4.89579 10.2462 4.9441 10.3071 5.005C10.368 5.0659 10.4163 5.1382 10.4493 5.21777C10.4822 5.29734 10.4992 5.38262 10.4992 5.46875C10.4992 5.55488 10.4822 5.64016 10.4493 5.71973C10.4163 5.7993 10.368 5.8716 10.3071 5.9325L7.46334 8.77625C7.40247 8.83721 7.33018 8.88556 7.25061 8.91856C7.17103 8.95155 7.08574 8.96853 6.99959 8.96853C6.91345 8.96853 6.82815 8.95155 6.74857 8.91856C6.669 8.88556 6.59671 8.83721 6.53584 8.77625L3.69209 5.9325C3.63119 5.8716 3.58288 5.7993 3.54992 5.71973C3.51696 5.64016 3.5 5.55488 3.5 5.46875C3.5 5.38262 3.51696 5.29734 3.54992 5.21777C3.58288 5.1382 3.63119 5.0659 3.69209 5.005C3.75299 4.9441 3.82529 4.89579 3.90486 4.86283C3.98443 4.82987 4.06972 4.81291 4.15584 4.81291C4.24197 4.81291 4.32725 4.82987 4.40682 4.86283C4.48639 4.89579 4.55869 4.9441 4.61959 5.005L6.34334 6.72788Z" fill="#CEFFA8"></path>
                                  </svg>Download</a>

                                  <a class="dropdown-itemm delete_nt ' . ($folder->is_delete == 1 ? 'deleted_button' : '') . '" data-folder_name="' . $folder->name . '" data-bs-toggle="modal" data-folder_id="' . $folder->id . '"><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M5.07536 13.3334C4.77759 13.3334 4.52359 13.2285 4.31336 13.0187C4.10359 12.809 3.9987 12.555 3.9987 12.2567V4.00007H3.33203V3.3334H5.9987V2.82007H9.9987V3.3334H12.6654V4.00007H11.9987V12.2567C11.9987 12.5634 11.896 12.8194 11.6907 13.0247C11.4849 13.2305 11.2287 13.3334 10.922 13.3334H5.07536ZM11.332 4.00007H4.66536V12.2567C4.66536 12.3763 4.70381 12.4745 4.7807 12.5514C4.85759 12.6283 4.95581 12.6667 5.07536 12.6667H10.922C11.0243 12.6667 11.1183 12.6241 11.204 12.5387C11.2894 12.453 11.332 12.359 11.332 12.2567V4.00007ZM6.53736 11.3334H7.20403V5.3334H6.53736V11.3334ZM8.79337 11.3334H9.46003V5.3334H8.79337V11.3334Z" fill="#FA4A4A"></path>
                                    </svg>Delete</a>
                                </div>
                                <div class="modal fade drop_coman_file have_title drive_permissions_share" id="share_folder" tabindex="-1" role="dialog" aria-labelledby="share_folder" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered" role="document">
                                  <div class="modal-content">
                                    <div class="modal-header">
                                      <h5 class="modal-title" style="font-weight:700">Share </h5>
                                    </div>
                                    <div class="modal-body">
                                      <h3>Share</h3>
                                      <form action="" method="POST" enctype="multipart/form-data" class="upload-form"> 
                                      <div class="share_people">
                                      <h2>Choose people to share</h2>
                                      <div class="sarhe_search">
                                      <input type="search" class="" placeholder="Search for people" aria-controls="">
                                      </div>
                                      </div>

                                      <div class="people_with_acces">
                                      <h2>People with access</h2>
                                      <div class="people_list">
                                      
                                      <div class="people_repeat">
                                       <div class="people_ini_image">
                                      <img src="../assets/images/alok.png" alt="img">
                                      </div>
                                      
                                      <div class="repeat_detailss">
                                      <h2>devanshu.kumar@milliondox.com</h2>
                                      <span>devanshu.kumar@milliondox.com</span>
                                      </div>
                                      
                                      </div>
 
                                      </div>
                                      </div>

                                      <div class="share_radio">
                                      <h2>Access Type</h2>
                                      <div class="radio_sare_button">
                                      <div class="for_group radio">
                                      <input type="radio" id="can_view" name="status" value="can_view">
                                      <label for="can_view">Can View</label>   
                                      </div>
                                      <div class="for_group radio">
                                      <input type="radio" id="can_edit" name="status" value="can_edit">
                                      <label for="can_edit">Can Edit</label>   
                                      </div>
                                      </div>
                                       </div>
                        
                                      <div class="toggle-btn">
                                      <span>Limit Access Duration</span>
                                      <label class="switch">
                                      <input type="checkbox" id="checbox" onclick="check()" ;="">
                                      <span class="slider round"></span>
                                      </label>              
                                      </div>
                        
                                      <div class="addTimeDateDiv">
                                      <div class="two_search_togle">
                                      <input type="search" class="" placeholder="Enter Date" aria-controls="">
                                      <input type="search" class="" placeholder="Enter Time" aria-controls="">
                                      </div>
                                      </div>

                                      <div class="togle_area_btn">
                                      <a href="#">Share</a>
                                      </div>
                        
                                      </form>
                                    </div>
                                  </div>
                                </div>
                            </div>                            
                        </li>';
            }
                        else{
                            $folderHtml .= 
           
                            '<li><a href="#" class="folder-link wedcolor" data-folder-path="' . $folder->path . '">
                                                <div class="folder_wraap">
                                                    <img src="../assets/images/solar_folder-bold.png" id="folders" class="folder-icon" alt="Folder Icon">
                                                    <span>' . $folder->name . '</span>
                                                </div>
                                            </a>
                                            <div class="three_dots">
                                                <button class="click_folder_dot" data-folder-id="' . $folder->id . '">
                                                    <img src="../assets/images/folder_dot.png" id="folders" class="folder-dots" alt="Folder dots">
                                                </button>
                                                <div id="myDropdown2-' . $folder->id . '" class="dropdown-content">
                                   
                                                   

                                                    <a class="dropdown-itemm download_nts downloadfolder" data-folder-path="' . $folder->path . '" data-id="' . $folder->id . '"><svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.40625 12.25C2.00014 12.25 1.61066 12.0887 1.32349 11.8015C1.03633 11.5143 0.875 11.1249 0.875 10.7188V8.53125C0.875 8.3572 0.94414 8.19028 1.06721 8.06721C1.19028 7.94414 1.3572 7.875 1.53125 7.875C1.7053 7.875 1.87222 7.94414 1.99529 8.06721C2.11836 8.19028 2.1875 8.3572 2.1875 8.53125V10.7188C2.1875 10.8395 2.2855 10.9375 2.40625 10.9375H11.5938C11.6518 10.9375 11.7074 10.9145 11.7484 10.8734C11.7895 10.8324 11.8125 10.7768 11.8125 10.7188V8.53125C11.8125 8.3572 11.8816 8.19028 12.0047 8.06721C12.1278 7.94414 12.2947 7.875 12.4688 7.875C12.6428 7.875 12.8097 7.94414 12.9328 8.06721C13.0559 8.19028 13.125 8.3572 13.125 8.53125V10.7188C13.125 11.1249 12.9637 11.5143 12.6765 11.8015C12.3893 12.0887 11.9999 12.25 11.5938 12.25H2.40625Z" fill="#CEFFA8"></path>
                                      <path d="M6.34334 6.72788V1.75C6.34334 1.57595 6.41248 1.40903 6.53555 1.28596C6.65862 1.16289 6.82554 1.09375 6.99959 1.09375C7.17364 1.09375 7.34056 1.16289 7.46363 1.28596C7.5867 1.40903 7.65584 1.57595 7.65584 1.75V6.72788L9.37959 5.005C9.44049 4.9441 9.51279 4.89579 9.59236 4.86283C9.67193 4.82987 9.75722 4.81291 9.84334 4.81291C9.92947 4.81291 10.0148 4.82987 10.0943 4.86283C10.1739 4.89579 10.2462 4.9441 10.3071 5.005C10.368 5.0659 10.4163 5.1382 10.4493 5.21777C10.4822 5.29734 10.4992 5.38262 10.4992 5.46875C10.4992 5.55488 10.4822 5.64016 10.4493 5.71973C10.4163 5.7993 10.368 5.8716 10.3071 5.9325L7.46334 8.77625C7.40247 8.83721 7.33018 8.88556 7.25061 8.91856C7.17103 8.95155 7.08574 8.96853 6.99959 8.96853C6.91345 8.96853 6.82815 8.95155 6.74857 8.91856C6.669 8.88556 6.59671 8.83721 6.53584 8.77625L3.69209 5.9325C3.63119 5.8716 3.58288 5.7993 3.54992 5.71973C3.51696 5.64016 3.5 5.55488 3.5 5.46875C3.5 5.38262 3.51696 5.29734 3.54992 5.21777C3.58288 5.1382 3.63119 5.0659 3.69209 5.005C3.75299 4.9441 3.82529 4.89579 3.90486 4.86283C3.98443 4.82987 4.06972 4.81291 4.15584 4.81291C4.24197 4.81291 4.32725 4.82987 4.40682 4.86283C4.48639 4.89579 4.55869 4.9441 4.61959 5.005L6.34334 6.72788Z" fill="#CEFFA8"></path>
                                  </svg>Download</a>
                                                </div>
                                                <div class="modal fade drop_coman_file have_title drive_permissions_share" id="share_folder" tabindex="-1" role="dialog" aria-labelledby="share_folder" aria-hidden="true">
                                                <div class="modal-dialog modal-dialog-centered" role="document">
                                                  <div class="modal-content">
                                                    <div class="modal-header">
                                                      <h5 class="modal-title" style="font-weight:700">Share </h5>
                                                    </div>
                                                    <div class="modal-body">
                                                      <h3>Share</h3>
                                                      <form action="" method="POST" enctype="multipart/form-data" class="upload-form"> 
                                                      <div class="share_people">
                                                      <h2>Choose people to share</h2>
                                                      <div class="sarhe_search">
                                                      <input type="search" class="" placeholder="Search for people" aria-controls="">
                                                      </div>
                                                      </div>
                
                                                      <div class="people_with_acces">
                                                      <h2>People with access</h2>
                                                      <div class="people_list">
                                                      
                                                      <div class="people_repeat">
                                                       <div class="people_ini_image">
                                                      <img src="../assets/images/alok.png" alt="img">
                                                      </div>
                                                      
                                                      <div class="repeat_detailss">
                                                      <h2>devanshu.kumar@milliondox.com</h2>
                                                      <span>devanshu.kumar@milliondox.com</span>
                                                      </div>
                                                      
                                                      </div>
                 
                                                      </div>
                                                      </div>
                
                                                      <div class="share_radio">
                                                      <h2>Access Type</h2>
                                                      <div class="radio_sare_button">
                                                      <div class="for_group radio">
                                                      <input type="radio" id="can_view" name="status" value="can_view">
                                                      <label for="can_view">Can View</label>   
                                                      </div>
                                                      <div class="for_group radio">
                                                      <input type="radio" id="can_edit" name="status" value="can_edit">
                                                      <label for="can_edit">Can Edit</label>   
                                                      </div>
                                                      </div>
                                                       </div>
                                        
                                                      <div class="toggle-btn">
                                                      <span>Limit Access Duration</span>
                                                      <label class="switch">
                                                      <input type="checkbox" id="checbox" onclick="check()" ;="">
                                                      <span class="slider round"></span>
                                                      </label>              
                                                      </div>
                                        
                                                      <div class="addTimeDateDiv">
                                                      <div class="two_search_togle">
                                                      <input type="search" class="" placeholder="Enter Date" aria-controls="">
                                                      <input type="search" class="" placeholder="Enter Time" aria-controls="">
                                                      </div>
                                                      </div>
                
                                                      <div class="togle_area_btn">
                                                      <a href="#">Share</a>
                                                      </div>
                                        
                                                      </form>
                                                    </div>
                                                  </div>
                                                </div>
                                            </div>                            
                                        </li>';
                        }
        }
          }
          else{
             
              $folderHtml = '<div class="folder_emptyy" id="folds"><div class="empty_image"><img src="../assets/images/empty_folder.png" alt="img"></div><div class="empty_contnet"><h2>Looks empty here!</h2><p>Try adding or creating folder.</p></div></div>'; // Don't show any folder message
          }
        $folderHtml .= '</ul>';

      
    
        // Generate the HTML for files
        $fileHtml = '<div class="file-container">';
        
            
      
        if (!$fileContents->isEmpty()) {
            $fileHtml .= '<h4 class="filecontents">Custom Files</h4>';
            $fileHtml .= '<table class="table table-striped">';
            $fileHtml .= '<thead>';
            $fileHtml .= '<tr>';
            $fileHtml .= '<th>File Name</th>';
            
            $fileHtml .= '<th class="funtion_buttnss">Action</th>';
            $fileHtml .= '</tr>';
            $fileHtml .= '</thead>';
            $fileHtml .= '<tbody>';
            foreach ($fileContents as $file) {
                 $fyear =  $file->fyear;

                 $dataTags = json_decode($file->tags, true); // Attempt to decode JSON string

if (is_array($dataTags)) {
    $tagsArray = implode(', ', $dataTags); // Join array elements
} else {
    $tagsArray = $file->tags; // Fallback to the original value
}

// dd($tagsArray) ;

                //  $dataTags = json_encode($file->tags);
                //  $tagsArray = json_decode($dataTags);
                 
                $fileHtml .= '<tr>';
                $fileHtml .= '<td>' . $file->file_name . '</td>';
                $fileHtml .= '<td class="funtion_buttnss">                
                <a class="down_cust_file" href=""# data-id="' . $file->id . '">
                                  <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M2.40625 12.25C2.00014 12.25 1.61066 12.0887 1.32349 11.8015C1.03633 11.5143 0.875 11.1249 0.875 10.7188V8.53125C0.875 8.3572 0.94414 8.19028 1.06721 8.06721C1.19028 7.94414 1.3572 7.875 1.53125 7.875C1.7053 7.875 1.87222 7.94414 1.99529 8.06721C2.11836 8.19028 2.1875 8.3572 2.1875 8.53125V10.7188C2.1875 10.8395 2.2855 10.9375 2.40625 10.9375H11.5938C11.6518 10.9375 11.7074 10.9145 11.7484 10.8734C11.7895 10.8324 11.8125 10.7768 11.8125 10.7188V8.53125C11.8125 8.3572 11.8816 8.19028 12.0047 8.06721C12.1278 7.94414 12.2947 7.875 12.4688 7.875C12.6428 7.875 12.8097 7.94414 12.9328 8.06721C13.0559 8.19028 13.125 8.3572 13.125 8.53125V10.7188C13.125 11.1249 12.9637 11.5143 12.6765 11.8015C12.3893 12.0887 11.9999 12.25 11.5938 12.25H2.40625Z" fill="#CEFFA8" />
                                      <path d="M6.34334 6.72788V1.75C6.34334 1.57595 6.41248 1.40903 6.53555 1.28596C6.65862 1.16289 6.82554 1.09375 6.99959 1.09375C7.17364 1.09375 7.34056 1.16289 7.46363 1.28596C7.5867 1.40903 7.65584 1.57595 7.65584 1.75V6.72788L9.37959 5.005C9.44049 4.9441 9.51279 4.89579 9.59236 4.86283C9.67193 4.82987 9.75722 4.81291 9.84334 4.81291C9.92947 4.81291 10.0148 4.82987 10.0943 4.86283C10.1739 4.89579 10.2462 4.9441 10.3071 5.005C10.368 5.0659 10.4163 5.1382 10.4493 5.21777C10.4822 5.29734 10.4992 5.38262 10.4992 5.46875C10.4992 5.55488 10.4822 5.64016 10.4493 5.71973C10.4163 5.7993 10.368 5.8716 10.3071 5.9325L7.46334 8.77625C7.40247 8.83721 7.33018 8.88556 7.25061 8.91856C7.17103 8.95155 7.08574 8.96853 6.99959 8.96853C6.91345 8.96853 6.82815 8.95155 6.74857 8.91856C6.669 8.88556 6.59671 8.83721 6.53584 8.77625L3.69209 5.9325C3.63119 5.8716 3.58288 5.7993 3.54992 5.71973C3.51696 5.64016 3.5 5.55488 3.5 5.46875C3.5 5.38262 3.51696 5.29734 3.54992 5.21777C3.58288 5.1382 3.63119 5.0659 3.69209 5.005C3.75299 4.9441 3.82529 4.89579 3.90486 4.86283C3.98443 4.82987 4.06972 4.81291 4.15584 4.81291C4.24197 4.81291 4.32725 4.82987 4.40682 4.86283C4.48639 4.89579 4.55869 4.9441 4.61959 5.005L6.34334 6.72788Z" fill="#CEFFA8" />
                                  </svg>
                              </a>
                              
                               <button type="button" class="delete-button" id="commondelbtdtst" data-unique_file_id="' . $file->id . '">
                                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                      <path d="M5.07536 13.3334C4.77759 13.3334 4.52359 13.2285 4.31336 13.0187C4.10359 12.809 3.9987 12.555 3.9987 12.2567V4.00007H3.33203V3.3334H5.9987V2.82007H9.9987V3.3334H12.6654V4.00007H11.9987V12.2567C11.9987 12.5634 11.896 12.8194 11.6907 13.0247C11.4849 13.2305 11.2287 13.3334 10.922 13.3334H5.07536ZM11.332 4.00007H4.66536V12.2567C4.66536 12.3763 4.70381 12.4745 4.7807 12.5514C4.85759 12.6283 4.95581 12.6667 5.07536 12.6667H10.922C11.0243 12.6667 11.1183 12.6241 11.204 12.5387C11.2894 12.453 11.332 12.359 11.332 12.2567V4.00007ZM6.53736 11.3334H7.20403V5.3334H6.53736V11.3334ZM8.79337 11.3334H9.46003V5.3334H8.79337V11.3334Z" fill="#FA4A4A"></path>
                                    </svg> 
                                </button> 
                <div class="dropdown commn_table_wrap">
                <button class="dropbtn show_pp">
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M10.3994 4.19166C10.3994 4.37562 10.3632 4.55779 10.2929 4.72778C10.2226 4.89776 10.1194 5.05222 9.98937 5.18234C9.85934 5.31246 9.70494 5.4157 9.535 5.48615C9.36507 5.55661 9.18292 5.5929 8.99896 5.59296C8.81499 5.59302 8.63282 5.55684 8.46284 5.4865C8.29286 5.41615 8.1384 5.31302 8.00827 5.18298C7.87815 5.05294 7.77492 4.89854 7.70446 4.72861C7.63401 4.55867 7.59772 4.37652 7.59766 4.19256C7.59754 3.82103 7.74501 3.46467 8.00764 3.20188C8.27026 2.93908 8.62653 2.79138 8.99806 2.79126C9.36958 2.79114 9.72594 2.93862 9.98874 3.20124C10.2515 3.46387 10.3992 3.82013 10.3994 4.19166Z" fill="#8D8D8D"></path>
                  <path d="M8.99806 10.3999C9.77148 10.3999 10.3985 9.77294 10.3985 8.99952C10.3985 8.2261 9.77148 7.59912 8.99806 7.59912C8.22464 7.59912 7.59766 8.2261 7.59766 8.99952C7.59766 9.77294 8.22464 10.3999 8.99806 10.3999Z" fill="#8D8D8D"></path>
                  <path d="M8.99806 15.2085C9.77148 15.2085 10.3985 14.5815 10.3985 13.8081C10.3985 13.0347 9.77148 12.4077 8.99806 12.4077C8.22464 12.4077 7.59766 13.0347 7.59766 13.8081C7.59766 14.5815 8.22464 15.2085 8.99806 15.2085Z" fill="#8D8D8D"></path>
                </svg>
              </button>
              <div id="myDropdown3" class="dropdown-content"> 
                <a class="dropdown-itemm open_eye_pdf" href="' . route('showfile', $file->id) . '" target="_blank">
                  View </a>
                  <a class="dropdown-itemm rename_file edit" data-bs-toggle="modal"  data-bs-target="#edit_fileex" data-file_id="' . $file->id . '" data-filename="' . $file->file_name . '" data-desc="' . $file->descp . '" data-fyear="' . $fyear . '" data-month="' . $file->month . '" data-tags=\'' . $tagsArray . '\'>
                  Edit </a>
            </div>
            
        </div>
                          </td>';
                $fileHtml .= '</tr>';
            }
            $fileHtml .= '</tbody>';
            $fileHtml .= '</table>';
        }
         else {
             $fileHtml = '<div class="folder_emptyy" id="folds"><div class="empty_image"><img src="../assets/images/empty_folder.png" alt="img"></div><div class="empty_contnet"><h2>Looks empty here!</h2><p>Try adding or creating files .</p></div></div>'; // Don't show any file message
        }
        $fileHtml .= '</div>';
       
    
        return response()->json(['folderHtml' => $folderHtml,  'fileHtml' => $fileHtml,'directorfolderNames' =>$directorfolderNames]);
    }

    public function fetchfolderfold(Request $request)
    {
        $folderPath = $request->get('folderName', null); // Default is null for root-level folders
    
        // Default root folder path name
        $isRoot = is_null($folderPath) || $folderPath === 'root';
    
        $commonFoldersQuery = Folder::query();
        if ($isRoot) {
            $commonFoldersQuery->whereNull('parent_name')->where('common_folder', 1);
        } else {
            $commonFoldersQuery->where('parent_name', $folderPath)->where('common_folder', 1);
        }
    
        $userFoldersQuery = Folder::where('parent_name', $folderPath)
            ->where('user_id', Auth::id())
            ->where('is_delete', 0);
    
        $sortOption = $request->get('sortOption', 'a-to-z');
        $order = $sortOption === 'z-to-a' ? 'desc' : 'asc';
    
        $commonFolders = $commonFoldersQuery->orderBy('name', $order)->get();
        $userFolders = $userFoldersQuery->orderBy('name', $order)->get();
    
        $folderContents = $commonFolders->merge($userFolders);
    
        $folderHtml = '<ul class="customulli">';
        foreach ($folderContents as $folder) {
            $folderName = strpos($folder->name, '_') !== false 
                ? substr($folder->name, strpos($folder->name, '_') + 1) 
                : $folder->name;
    
            $folderHtml .= 
                '<li>
                    <a href="#" class="fold-link wedcolor" data-folder-path="' . $folder->path . '">
                        <div class="folder_wraap">
                            <img src="../assets/images/solar_folder-bold.png" id="folders" class="folder-icon" alt="Folder Icon">
                            <span>' . htmlspecialchars($folderName) . '</span>
                        </div>
                    </a>
                </li>';
        }
        $folderHtml .= '</ul>';
    
        // Include back button logic at root
        $showBackButton = !$isRoot;
    
        return response()->json([
            'folderHtml' => $folderHtml,
            'filesHtml' => $folderContents->isEmpty() ? '<p>No files available</p>' : '', // Default filesHtml
            'showBackButton' => $showBackButton,
        ]);
    }
    
    

    // start **** sandeep added above route "fetchfixedFiles" for dynamic fetch fixed path files i.e real_file_name 26 November 2024 

    public function fetchfixedFiles(Request $request)
    {
        $user_id = Auth::id();
        if($user_id === 269){
             // Fetch folder path from the request query
            $path = $request->query('path');
            // Ensure the folder path is provided
            if (!$path) {
                return response()->json(['error' => 'Folder path is required'], 400);
            }
            // dd($path);
            // Fetch data from the database where `path` matches and `real_file_name` is not null
            $data = DB::table('folders')
            ->where('path', $path)
            ->whereNotNull('real_file_name')
            ->first();

            if ($data) {
                $real_file_names = $data->real_file_name; // Access the real_file_name column
                // dd($real_file_names);
                // $counts = [];
                // foreach ($real_file_names as $file_name) {
                //     $count = DB::table('common_table')
                //         ->where('location', $path) // Match the same path
                //         ->where('real_file_name', $file_name) // Match the specific file name
                //         ->count();

                //     $counts[$file_name] = $count; // Store the count for each file name
                // }
                $real_file_names = json_decode($data->real_file_name, true); // Decode JSON as an array

                $counts = DB::table('common_table')
                ->where('user_id', $user_id)
                ->where('location', $path)
                ->where('is_delete', 0)
                ->whereIn('real_file_name', $real_file_names)
                ->select('real_file_name', DB::raw('COUNT(*) as count'))
                ->groupBy('real_file_name')
                ->pluck('count', 'real_file_name')
                ->toArray();

                // Fetch the sum of file sizes for all real_file_names at once
                $file_sizes = DB::table('common_table')
                ->where('user_id', $user_id) // Filter by user_id
                ->where('location', $path) // Filter by location
                ->where('is_delete', 0) // Only consider non-deleted records
                ->whereIn('real_file_name', $real_file_names) // Filter by real_file_name from the decoded array
                ->select('real_file_name', DB::raw('SUM(file_size) as total_size')) // Sum the file sizes
                ->groupBy('real_file_name') // Group by real_file_name to get sum per file name
                ->pluck('total_size', 'real_file_name') // Get the sum of file sizes for each real_file_name
                ->toArray(); // Convert the result to an array
                 // Convert the result to an array

                // dd($counts);

                // Convert the file sizes to KB, MB, or GB
                foreach ($file_sizes as $real_file_name => $total_size) {
                    // Convert total_size from bytes to human-readable format (KB, MB, GB)
                    if ($total_size < 1024) {
                        $file_sizes[$real_file_name] = number_format($total_size, 2) . ' Bytes';
                    } elseif ($total_size < 1048576) { // 1024 KB = 1 MB
                        $file_sizes[$real_file_name] = number_format($total_size / 1024, 2) . ' KB';
                    } elseif ($total_size < 1073741824) { // 1024 MB = 1 GB
                        $file_sizes[$real_file_name] = number_format($total_size / 1048576, 2) . ' MB';
                    } else {
                        $file_sizes[$real_file_name] = number_format($total_size / 1073741824, 2) . ' GB';
                    }
                }

                // return response()->json($counts);
                
            } else {
                dd('No data found.');
            }
            // dd($counts);

            // $data = DB::table('folders')->where('path','2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST/2024-2025November301_Litigations')->whereNotNull('real_file_name')->get(); // Replace with a model if available
            // Accounting & Taxation > Indirect Tax > Indirect > GST > Litigations
            // 2024-2025November301_Accounting%2520%2526%2520Taxation%252F2024-2025November301_Indirect%2520Tax%252F2024-2025November301_Indirect%252F2024-2025November301_GST%252F2024-2025November301_Litigations#
    
            // parent_name = "2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST"
            // path        = "2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST/2024-2025November301_Litigations";
            // dd($data);
            return response()->json(['data'=>$data, 'counts'=>$counts, 'file_sizes'=>$file_sizes]);

        }
        else{
            return response()->json($data="User is not authorised");
        }
       
    }

    // end **** sandeep added above route "fetchfixedFiles" for dynamic fetch fixed path files i.e real_file_name 26 November 2024 


    public function updateFolderStatus(Request $request)
    {
        $folderId = $request->input('folder_id');
        $folderName = $request->input('folder_name');
    
        // Find the folder by ID and match its name
        $folder = Folder::where('id', $folderId)
        ->where('name', 'like', '%' . $folderName . '%')  // Partial match using LIKE
                        ->first();
                      

                        // Get the employee_id associated with the folder
                        $employeeId = $folder->employee_id;

                        $directorId = $folder->director_id;
        if ($folder) {
            $folder->is_delete = 1;
            $folder->save();
    
            $employee = StoreCompanyEmployee::where('id', $employeeId)->first();

            $director = StoreCompanydirector::where('id', $directorId)->first();
        
        if ($employee) {
            // Update the is_delete status in the storecompanyemployee table
            $employee->update(['is_delete' => 1]);
        }

        if ($director) {
            // Update the is_delete status in the storecompanyemployee table
            $director->update(['is_delete' => 1]);
        }
            return response()->json(['success' => true, 'message' => 'Folder deleted successfully.']);
        }
    
        return response()->json(['success' => false, 'message' => 'Folder not found or name mismatch.']);
    }

    // 

    public function updateFolderNamesSKY()
    {
        $userId = auth()->user()->id;
        // dd($userId);

        if (269 === $userId) {
            // Fetch all entries from CommonTable
            $folderNames = [];
            $entries = CommonTable::all();

            foreach ($entries as $entry) {
                // Get the location field
                $location = $entry->location;

                if ($location) {
                    // Extract the folder name after the last '/'
                    $folderName = substr($location, strrpos($location, '/') + 1);
                    $folderName = trim($folderName);

                    // Store the folder name with the entry ID for debugging
                    $folderNames[] = [
                        'entry_id' => $entry->id,
                        'location' => $location,
                        'folder_name' => $folderName,
                    ];

                    $entry->folder_name = $folderName;
                    $entry->save(); // Save changes to the database (commented for debugging)
                }
            }

            // Debug the extracted folder names
            // dd($folderNames);
            return response()->json(['message' => 'Successfully updated']);

        }
        else{
            return response()->json(['message' => 'Unauthorized']);


        }

    }


    // 
    

//     public function downloadFolders(Request $request)
// {
//     $folderId = $request->input('folder_id');
//     $folderPath = $request->input('folder_path');

//     // Define the folder's full path
//     $folder = Storage::disk('local')->path($folderPath);

//     // Create a zip file
//     $zipFileName = 'folder_' . $folderId . '.zip';
//     $zipFilePath = storage_path('app/public/' . $zipFileName);

//     $zip = new ZipArchive;
//     if ($zip->open($zipFilePath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === true) {
//         $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($folder));

//         foreach ($files as $file) {
//             // Skip directories (they would be added automatically)
//             if (!$file->isDir()) {
//                 $filePath = $file->getRealPath();
//                 // Add the file to the zip, preserving the folder structure
//                 $relativePath = substr($filePath, strlen($folder) + 1);
//                 $zip->addFile($filePath, $relativePath);
//             }
//         }
//         $zip->close();
//     }

//     return response()->download($zipFilePath)->deleteFileAfterSend(true);
// }
    public function showfile($id)
    {
        // Get the authenticated user's ID
        $authUserId = Auth::id();
    
        // Find the file by ID and ensure it belongs to the authenticated user
        $file = CommonTable::where('id', $id)->where('user_id', $authUserId)->first();
    
        if (!$file) {
            return redirect()->back()->with('error', 'File not found or you do not have permission to access this file.');
        }
    
        // Extract the file path from the database
        $filePath = $file->file_path;
    
        // Check if the file exists on the storage
        if (!Storage::exists($filePath)) {
            return redirect()->back()->with('error', 'File does not exist.');
        }
    
        // Return the file response (for PDFs, the browser should display it)
        return Storage::response($filePath, $file->file_name);
    }


    // public function downloadFolder($folderid)
    // {
    //     $folder_id = $folderid;
    //     $folder = Folder::where('id', $folder_id)->first();
    
    //     if (!$folder) {
    //         \Log::error("Folder not found for ID: " . $folder_id);
    //         return response()->json(['success' => false, 'message' => 'Folder not found.']);
    //     }
    
    //     $zipFileName = $folder->name . $folder->id . '.zip';
    //     $zipFilePath = storage_path('app/public/' . $zipFileName);
    
    //     $zip = new ZipArchive();
    //     if ($zip->open($zipFilePath, ZipArchive::CREATE) !== TRUE) {
    //         \Log::error("Could not create ZIP file at: " . $zipFilePath);
    //         return response()->json(['success' => false, 'message' => 'Could not create ZIP file.']);
    //     }
    
    //     $folderFullPath = storage_path('app/' . $folder->path);
    //     if (is_dir($folderFullPath)) {
    //         $this->addFolderToZip($zip, $folderFullPath, $folder->name);
    //     } else {
    //         \Log::error("Folder does not exist: " . $folderFullPath);
    //         return response()->json(['success' => false, 'message' => 'Folder does not exist.']);
    //     }
    
    //     $zip->close();
    
    //     if (!file_exists($zipFilePath)) {
    //         return response()->json(['success' => false, 'message' => 'ZIP file could not be created.']);
    //     }
    
    //     // Download response
    //     return response()->download($zipFilePath)->deleteFileAfterSend(true);
    // }
    
    // /**
    //  * Recursively adds a folder and its contents to a ZipArchive.
    //  *
    //  * @param ZipArchive $zip The ZipArchive object.
    //  * @param string $folderPath The path to the folder being added.
    //  * @param string $folderName The name to be used inside the ZIP.
    //  */
    // private function addFolderToZip($zip, $folderPath, $folderName)
    // {
    //     $zip->addEmptyDir($folderName);
    
    //     $files = scandir($folderPath);
    
    //     foreach ($files as $file) {
    //         if ($file == '.' || $file == '..') {
    //             continue;
    //         }
    
    //         $filePath = $folderPath . '/' . $file;
    //         $zipPath = $folderName . '/' . $file;
    
    //         if (is_dir($filePath)) {
    //             $this->addFolderToZip($zip, $filePath, $zipPath);
    //         } else {
    //             $zip->addFile($filePath, $zipPath);
    //         }
    //     }
    // }



//sandeep start here for subdirectories according to real file name     working 
// use App\Models\File; // Ensure this is your Eloquent model

// public function downloadFolder($folderid)
// {
//     $folder = Folder::find($folderid);

//     if (!$folder) {
//         \Log::error("Folder not found for ID: " . $folderid);
//         return response()->json(['success' => false, 'message' => 'Folder not found.']);
//     }

//     $zipFileName = $folder->name . $folder->id . '.zip';
//     $zipFilePath = storage_path('app/public/' . $zipFileName);

//     $zip = new ZipArchive();
//     if ($zip->open($zipFilePath, ZipArchive::CREATE) !== TRUE) {
//         \Log::error("Could not create ZIP file at: " . $zipFilePath);
//         return response()->json(['success' => false, 'message' => 'Could not create ZIP file.']);
//     }

//     $folderFullPath = storage_path('app/' . $folder->path);
//     if (is_dir($folderFullPath)) {
//         $this->addFolderToZip($zip, $folderFullPath, $folder->name);
//     } else {
//         \Log::error("Folder does not exist: " . $folderFullPath);
//         return response()->json(['success' => false, 'message' => 'Folder does not exist.']);
//     }

//     $zip->close();

//     if (!file_exists($zipFilePath)) {
//         return response()->json(['success' => false, 'message' => 'ZIP file could not be created.']);
//     }

//     return response()->download($zipFilePath)->deleteFileAfterSend(true);
// }

/**
 * Recursively adds a folder and its contents to a ZipArchive.
 *
 * @param ZipArchive $zip The ZipArchive object.
 * @param string $folderPath The path to the folder being added.
 * @param string $zipFolderName The name to be used inside the ZIP.
 */
// private function addFolderToZip($zip, $folderPath, $zipFolderName)
// {
//     $zip->addEmptyDir($zipFolderName);

//     $files = scandir($folderPath);

//     foreach ($files as $file) {
//         if ($file == '.' || $file == '..') {
//             continue;
//         }

//         $filePath = $folderPath . '/' . $file;

//         $userId = Auth::id();

//         // Fetch the real file name from the database, if it exists
//         $fileRecord = CommonTable::where('user_id', $userId)->where('temp_file_name', $file)->where('is_delete', 0)->first();

//         // If `real_file_name` exists, use it for the subdirectory; otherwise, skip subdirectory creation
//         if ($fileRecord && $fileRecord->real_file_name) {
//             $realFileName = $fileRecord->real_file_name;
//             $zipSubdirectory = $zipFolderName . '/' . $realFileName;

//             // If it's a directory, recursively add it
//             if (is_dir($filePath)) {
//                 $this->addFolderToZip($zip, $filePath, $zipSubdirectory);
//             } else {
//                 // Ensure the subdirectory exists in the zip for each unique `real_file_name`
//                 if (!$zip->locateName($zipSubdirectory)) {
//                     $zip->addEmptyDir($zipSubdirectory);
//                 }
//                 // Add the file to its corresponding subdirectory inside the ZIP
//                 $zip->addFile($filePath, $zipSubdirectory . '/' . $fileRecord->file_name);
//             }
//         } else {
//             // If `real_file_name` is not available, add the file directly under the main folder
//             if (!is_dir($filePath)) {
//                 $zip->addFile($filePath, $zipFolderName . '/' . basename($filePath));
//             }
//         }
//     }
// }


// ////////////////////////////////////////////////////new code here start //////////////////////////////////
// public function downloadFolder($folderid)
// {
//     $folder = Folder::find($folderid);
//     // Check if the user is authenticated
//     $userId = Auth::id();
//     if (!$userId) {
//         abort(403, 'User not authenticated.');
//     }


//     if (!$folder) {
//         \Log::error("Folder not found for ID: " . $folderid);
//         return response()->json(['success' => false, 'message' => 'Folder not found.']);
//     }

//     $zipFileName = $folder->name . $folder->id . '.zip';
//     $zipFilePath = storage_path('app/public/' . $zipFileName);

//     $zip = new ZipArchive();
//     if ($zip->open($zipFilePath, ZipArchive::CREATE) !== TRUE) {
//         \Log::error("Could not create ZIP file at: " . $zipFilePath);
//         return response()->json(['success' => false, 'message' => 'Could not create ZIP file.']);
//     }

//     $folderFullPath = storage_path('app/' . $folder->path);
//     if (is_dir($folderFullPath)) {
//         $this->addFolderToZip($zip, $folderFullPath, $folder->name);
//     } else {
//         \Log::error("Folder does not exist: " . $folderFullPath);
//         return response()->json(['success' => false, 'message' => 'Folder does not exist.']);
//     }

//     $zip->close();

//     if (!file_exists($zipFilePath)) {
//         return response()->json(['success' => false, 'message' => 'ZIP file could not be created.']);
//     }
//     // Function to remove empty directories from a ZIP file
//     // function removeEmptyDirsFromZip($zipFilePath)
//     // {
//     //     $zip = new ZipArchive();
//     //     if ($zip->open($zipFilePath) === TRUE) {
//     //         // Iterate over the files in the zip
//     //         $files = [];
//     //         for ($i = 0; $i < $zip->numFiles; $i++) {
//     //             $fileName = $zip->getNameIndex($i);
//     //             $files[] = $fileName;
//     //         }

//     //         // Check for empty directories and remove them
//     //         foreach ($files as $file) {
//     //             if (substr($file, -1) === '/') { // It's a directory
//     //                 $empty = true;
//     //                 foreach ($files as $innerFile) {
//     //                     if (strpos($innerFile, $file) === 0 && $innerFile !== $file) {
//     //                         $empty = false;
//     //                         break;
//     //                     }
//     //                 }
//     //                 if ($empty) {
//     //                     // Remove empty directory
//     //                     $zip->deleteName($file);
//     //                 }
//     //             }
//     //         }

//     //         $zip->close();
//     //     }
//     // }

//     // Remove empty directories before downloading
//     // removeEmptyDirsFromZip($zipFilePath);

//     // above working well sandeep/////////////
//     // Function to remove empty directories from a ZIP file, checking against the database
//     // function removeEmptyDirsFromZip($zipFilePath, $userId)
//     // {
//     //     $zip = new ZipArchive();
//     //     if ($zip->open($zipFilePath) === TRUE) {
//     //         // Iterate over the files in the zip
//     //         $files = [];
//     //         for ($i = 0; $i < $zip->numFiles; $i++) {
//     //             $fileName = $zip->getNameIndex($i);
//     //             $files[] = $fileName;
//     //         }

//     //         // Check for empty directories and remove them based on database check
//     //         foreach ($files as $file) {
//     //             if (substr($file, -1) === '/') { // It's a directory
//     //                 $empty = true;
//     //                 foreach ($files as $innerFile) {
//     //                     if (strpos($innerFile, $file) === 0 && $innerFile !== $file) {
//     //                         $empty = false;
//     //                         break;
//     //                     }
//     //                 }

//     //                 // Check if the directory is empty
//     //                 if ($empty) {
//     //                     // Query the database to check if this directory exists for the user
//     //                     $directoryName = basename($file); // Get the directory name without the path
//     //                     $existsInDatabase = DB::table('folders')
//     //                         ->where('user_id', $userId)
//     //                         ->where('name', $directoryName)
//     //                         ->exists();

//     //                     // If directory doesn't exist in the database, remove it
//     //                     if (!$existsInDatabase) {
//     //                         $zip->deleteName($file);
//     //                     }
//     //                 }
//     //             }
//     //         }

//     //         $zip->close();
//     //     }
//     // }
//     // // Remove empty directories before downloading, checking against the database
//     // removeEmptyDirsFromZip($zipFilePath, $userId);

//     // return response()->download($zipFilePath)->deleteFileAfterSend(true);

//     // Function to remove empty directories from a ZIP file, checking against the database
//     // Function to remove empty directories from a ZIP file, checking against the database
//     // function removeEmptyDirsFromZip($zipFilePath, $userId)
//     // {
//     //     $zip = new ZipArchive();
//     //     if ($zip->open($zipFilePath) === TRUE) {
//     //         // Store files and directories in the ZIP
//     //         $files = [];
//     //         for ($i = 0; $i < $zip->numFiles; $i++) {
//     //             $fileName = $zip->getNameIndex($i);
//     //             $files[] = $fileName;
//     //         }

//     //         // Check for empty directories at all levels
//     //         $directoriesToRemove = [];

//     //         foreach ($files as $file) {
//     //             if (substr($file, -1) === '/') { // It's a directory
//     //                 $empty = true;

//     //                 // Check if any files exist in this directory (subdirectories or files)
//     //                 foreach ($files as $innerFile) {
//     //                     if (strpos($innerFile, $file) === 0 && $innerFile !== $file) {
//     //                         $empty = false;
//     //                         break;
//     //                     }
//     //                 }

//     //                 // If the directory is empty, add it to the list for removal
//     //                 if ($empty) {
//     //                     $directoriesToRemove[] = $file;
//     //                 }
//     //             }
//     //         }
//     //         // dd($directoriesToRemove);

//     //         // Now check the database for each empty directory and remove if necessary
//     //         foreach ($directoriesToRemove as $dir) {
//     //             // Query the database to check if this directory exists for the user
//     //             $directoryName = basename($dir); // Get the directory name without the path
//     //             // dd($directoryName);
//     //             $existsInDatabase = DB::table('folders')
//     //                 ->where('user_id', $userId)
//     //                 ->where('name', $directoryName)
//     //                 ->exists();

//     //             // If directory doesn't exist in the database, remove it
//     //             if (!$existsInDatabase) {
//     //                 $zip->deleteName($dir);
//     //             }
//     //         }

//     //         $zip->close();
//     //     }
//     // }

//     // // Remove empty directories before downloading, checking against the database
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // removeEmptyDirsFromZip($zipFilePath, $userId);



//     // return response()->download($zipFilePath)->deleteFileAfterSend(true);

//     // Function to remove empty directories from a ZIP file, checking against the database
//     // function removeEmptyDirsFromZip($zipFilePath, $userId)
//     // {
//     //     $zip = new ZipArchive();
//     //     if ($zip->open($zipFilePath) === TRUE) {
//     //         // Store files and directories in the ZIP
//     //         $files = [];
//     //         for ($i = 0; $i < $zip->numFiles; $i++) {
//     //             $fileName = $zip->getNameIndex($i);
//     //             $files[] = $fileName;
//     //         }

//     //         // Check for empty directories at all levels
//     //         $directoriesToRemove = [];

//     //         foreach ($files as $file) {
//     //             if (substr($file, -1) === '/') { // It's a directory
//     //                 $empty = true;

//     //                 // Check if any files exist in this directory (subdirectories or files)
//     //                 foreach ($files as $innerFile) {
//     //                     if (strpos($innerFile, $file) === 0 && $innerFile !== $file) {
//     //                         $empty = false;
//     //                         break;
//     //                     }
//     //                 }

//     //                 // If the directory is empty, add it to the list for removal
//     //                 if ($empty) {
//     //                     $directoriesToRemove[] = $file;
//     //                 }
//     //             }
//     //         }

//     //         // Now delete directories and their empty parents if necessary
//     //         foreach ($directoriesToRemove as $dir) {
//     //             // Query the database to check if this directory exists for the user
//     //             $directoryName = basename($dir); // Get the directory name without the path
//     //             $existsInDatabase = DB::table('folders')
//     //                 ->where('user_id', $userId)
//     //                 ->where('name', $directoryName)
//     //                 ->exists();

//     //             // If directory doesn't exist in the database, remove it
//     //             if (!$existsInDatabase) {
//     //                 $zip->deleteName($dir);

//     //                 // Check and delete parent directories if they are empty after removal
//     //                 $parentDir = dirname($dir) . '/';
//     //                 while ($parentDir !== '/' && !in_array($parentDir, $directoriesToRemove)) {
//     //                     // Check if the parent directory is now empty
//     //                     $parentEmpty = true;
//     //                     foreach ($files as $innerFile) {
//     //                         if (strpos($innerFile, $parentDir) === 0 && $innerFile !== $parentDir) {
//     //                             $parentEmpty = false;
//     //                             break;
//     //                         }
//     //                     }

//     //                     // If the parent directory is empty and doesn't exist in the database, delete it
//     //                     if ($parentEmpty) {
//     //                         $parentDirName = basename($parentDir);
//     //                         $parentExistsInDatabase = DB::table('folders')
//     //                             ->where('user_id', $userId)
//     //                             ->where('name', $parentDirName)
//     //                             ->exists();

//     //                         if (!$parentExistsInDatabase) {
//     //                             $zip->deleteName($parentDir);
//     //                             $directoriesToRemove[] = $parentDir; // Mark the parent as removed
//     //                         }
//     //                     }

//     //                     // Move to the next parent directory
//     //                     $parentDir = dirname($parentDir) . '/';
//     //                 }
//     //             }
//     //         }

//     //         $zip->close();
//     //     }
//     // }

//     // // Remove empty directories before downloading, checking against the database
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // removeEmptyDirsFromZip($zipFilePath, $userId);



//     // return response()->download($zipFilePath)->deleteFileAfterSend(true);


//     // Function to remove empty directories from a ZIP file, checking against the database
//     function removeEmptyDirsFromZip($zipFilePath, $userId)
//     {
//         $zip = new ZipArchive();

//         if ($zip->open($zipFilePath) === TRUE) {
//             do {
//                 $files = [];
//                 $emptyDirectories = [];
                
//                 // List all files and directories
//                 for ($i = 0; $i < $zip->numFiles; $i++) {
//                     $fileName = $zip->getNameIndex($i);
//                     $files[] = $fileName;
//                 }

//                 // Identify empty directories
//                 foreach ($files as $file) {
//                     if (substr($file, -1) === '/') { // It's a directory
//                         $empty = true;

//                         // Check if this directory contains any files or subdirectories
//                         foreach ($files as $innerFile) {
//                             if (strpos($innerFile, $file) === 0 && $innerFile !== $file) {
//                                 $empty = false;
//                                 break;
//                             }
//                         }

//                         if ($empty) {
//                             $emptyDirectories[] = $file;
//                         }
//                     }
//                 }

//                 // Delete empty directories not present in the database
//                 foreach ($emptyDirectories as $dir) {
//                     $directoryName = basename($dir); // Get the directory name without the path
//                     $existsInDatabase = DB::table('folders')
//                         ->where('user_id', $userId)
//                         ->where('name', $directoryName)
//                         ->exists();

//                     // If directory doesn't exist in the database, delete it
//                     if (!$existsInDatabase) {
//                         $zip->deleteName($dir);
//                     }
//                 }

//                 // Refresh the file list after deletions
//             } while (!empty($emptyDirectories)); // Repeat until no empty directories are found

//             $zip->close();
//         }
//     }

//     // Remove empty directories before downloading, checking against the database
//     // removeEmptyDirsFromZip($zipFilePath, $userId);
//     // dd($zipFilePath);
//     // Check if the ZIP file still exists after removing empty directories
//     if (!file_exists($zipFilePath)) {
//         // \Log::error("ZIP file does not exist after processing: " . $zipFilePath);
//         return response()->json(['success' => true, 'error' => 'No data found in Directories.'],200);
//     }

//     // Proceed with further processing if the ZIP file exists
//     return response()->download($zipFilePath)->deleteFileAfterSend(true);

//     // return response()->download($zipFilePath)->deleteFileAfterSend(true);
// }



/**
 * Recursively adds a folder and its contents to a ZipArchive.
 *
 * @param ZipArchive $zip The ZipArchive object.
 * @param string $folderPath The path to the folder being added.
 * @param string $zipFolderName The name to be used inside the ZIP.
 */
// private function addFolderToZip($zip, $folderPath, $zipFolderName)
// {
//     $userId = Auth::id();

//     // Add the folder itself as an empty directory in the ZIP
//     $zip->addEmptyDir($zipFolderName);

//     $files = scandir($folderPath);

//     foreach ($files as $file) {
//         if ($file == '.' || $file == '..') {
//             continue;
//         }

//         $filePath = $folderPath . '/' . $file;

//         // Fetch file information from the database
//         // $fileRecord = CommonTable::where('is_delete', 0)->where('user_id', $userId)->where('temp_file_name', $file)->orWhere('file_name', $file)->first();
      
//         // Fetch file information from the database
//         $fileRecord = CommonTable::where('user_id', $userId)
//         ->where(function ($query) use ($file) {
//             $query->where('temp_file_name', $file)
//                     ->orWhere('file_name', $file);
//         })
//         ->where('is_delete', 0)
//         ->first();


//         if (!$fileRecord) {
//             // Skip files not found in the database or marked as deleted
//             continue;
//         }

//         // Determine the name to use inside the ZIP
//         $fileNameInZip = $fileRecord->file_name ?? $file;

//         if (is_dir($filePath)) {
//             // Recursively add subdirectories
//             $this->addFolderToZip($zip, $filePath, $zipFolderName . '/' . $fileNameInZip);
//         } else {
//             // Add the file with the correct name from the database
//             $zip->addFile($filePath, $zipFolderName . '/' . $fileNameInZip);
//         }
//     }
// }


// private function addFolderToZip($zip, $folderPath, $zipFolderName)
// {
//     $userId = Auth::id();

//     // Add the folder itself as an empty directory in the ZIP
//     $zip->addEmptyDir($zipFolderName);

//     $files = scandir($folderPath);

//     foreach ($files as $file) {
//         if ($file == '.' || $file == '..') {
//             continue;
//         }

//         $filePath = $folderPath . '/' . $file;

//         // Fetch file information from the database
//         $fileRecord = CommonTable::where('user_id', $userId)
//             ->where(function ($query) use ($file) {
//                 $query->where('temp_file_name', $file)
//                       ->orWhere('file_name', $file);
//             })
//             ->where('is_delete', 0)
//             ->whereNull('is_replaced')
//             ->first();

//         // if (!$fileRecord) {
//         //     // Skip files not found in the database or marked as deleted
//         //     continue;
//         // }

//         // Determine the name to use inside the ZIP
//         $fileNameInZip = $fileRecord->file_name ?? $file;

//         // Determine subdirectory based on `real_file_name` or fall back to `file_name`
//         $subDirName = null;
//         if ($fileRecord) {
//             // If `real_file_name` exists, use it for subdirectory
//             if ($fileRecord->real_file_name) {
//                 $subDirName = $fileRecord->real_file_name;
//             }
//         }

//         if (is_dir($filePath)) {
//             // Recursively add subdirectories
//             // $this->addFolderToZip($zip, $filePath, $zipFolderName . '/' . $fileNameInZip);
//             $this->addFolderToZip($zip, $filePath, $zipFolderName . '/' . ($subDirName ?? $fileNameInZip));

//         } else {
//             // Add the file with the correct name from the database
//             // $zip->addFile($filePath, $zipFolderName . '/' . $fileNameInZip);
//              // If `real_file_name` is null, place the file outside of any subdirectory and name it `file_name`
//              if ($subDirName) {

               
//                 // If a subdirectory is specified, ensure it exists and add the file within it
//                 if (!$zip->locateName($zipFolderName . '/' . $subDirName)) {

//                     $zip->addEmptyDir($zipFolderName . '/' . $subDirName);
//                 }

//                 // Fetch file information from the database
//                 $fileRecord2 = CommonTable::where('user_id', $userId)
//                 ->where(function ($query) use ($file) {
//                     $query->where('temp_file_name', $file)
//                         ->orWhere('file_name', $file);
//                 })
//                 ->where('is_delete', 0)
//                 ->whereNull('is_replaced')
//                 ->first();

//                 if ($fileRecord2) {
//                     // Skip files not found in the database or marked as deleted
//                     // continue;
//                     $zip->addFile($filePath, $zipFolderName . '/' . $subDirName . '/' . $fileNameInZip);

//                 }

//             } else {

//                 // Fetch file information from the database
//                 $fileRecord3 = CommonTable::where('user_id', $userId)
//                 ->where(function ($query) use ($file) {
//                     $query->where('temp_file_name', $file)
//                         ->orWhere('file_name', $file);
//                 })
//                 ->where('is_delete', 0)
//                 ->whereNull('is_replaced')
//                 ->first();

//                 if ($fileRecord3) {
//                     // Skip files not found in the database or marked as deleted
//                     // continue;
//                     $zip->addFile($filePath, $zipFolderName . '/' . $fileNameInZip);

//                 }
//                 // If no subdirectory is needed, add the file directly under the main folder with `file_name`
//             }
//         }
//     }
// }



//////////////////////////////////////////////////////////////// new code here end  ///////////////////////


//sandeep end  here for subdirectories according to real file name     working 


// public function downloadFolder($folderid)
// {
//     $folder = Folder::find($folderid);

//     if (!$folder) {
//         \Log::error("Folder not found for ID: " . $folderid);
//         return response()->json(['success' => false, 'message' => 'Folder not found.']);
//     }

//     $zipFileName = $folder->name . $folder->id . '.zip';
//     $zipFilePath = storage_path('app/public/' . $zipFileName);

//     $zip = new ZipArchive();
//     if ($zip->open($zipFilePath, ZipArchive::CREATE) !== TRUE) {
//         \Log::error("Could not create ZIP file at: " . $zipFilePath);
//         return response()->json(['success' => false, 'message' => 'Could not create ZIP file.']);
//     }

//     $folderFullPath = storage_path('app/' . $folder->path);
//     if (is_dir($folderFullPath)) {
//         $this->addFolderToZip($zip, $folderFullPath, $folder->name);
//     } else {
//         \Log::error("Folder does not exist: " . $folderFullPath);
//         return response()->json(['success' => false, 'message' => 'Folder does not exist.']);
//     }

//     $zip->close();

//     if (!file_exists($zipFilePath)) {
//         return response()->json(['success' => false, 'message' => 'ZIP file could not be created.']);
//     }

//     return response()->download($zipFilePath)->deleteFileAfterSend(true);
// }

// /**
//  * Recursively adds a folder and its contents to a ZipArchive.
//  *
//  * @param ZipArchive $zip The ZipArchive object.
//  * @param string $folderPath The path to the folder being added.
//  * @param string $zipFolderName The name to be used inside the ZIP.
//  */
// private function addFolderToZip($zip, $folderPath, $zipFolderName)
// {
//     // Add the folder itself as an empty directory in the ZIP
//     $zip->addEmptyDir($zipFolderName);

//     // Get all files and directories from the given folder path
//     $files = scandir($folderPath);
    

//     foreach ($files as $file) {
//         if ($file == '.' || $file == '..') {
//             continue; // Skip special directories
//         }
       
//         $basePath = storage_path('app') . '/';

//     // Clean the folder path by removing the base path
//     $cleanFolderPath = str_replace($basePath, '', $folderPath);
//     // dd($cleanFolderPath);
//         $filePath = $folderPath . '/' . $file;
//     // dd($file);
//         // Fetch file information from the database
//         $fileRecord = CommonTable::where('file_name', $file)
//                     ->where('is_delete', 0)
//                     ->where('location', $cleanFolderPath)
//                     ->where('user_id', Auth::id())
//                     ->first();
           
//         // Skip files not matching the database condition
//         if (!$fileRecord) {
//             continue; // Only include files that meet the database criteria
//         }

//         // Determine the name of the file in the ZIP
//         $fileNameInZip = $fileRecord->file_name ?? $file;

//         // Determine subdirectory name based on `real_file_name`
//         $subDirName = $fileRecord->real_file_name ?? null;

//         if (is_dir($filePath)) {
//             // Recursively add subdirectories, using `real_file_name` as the directory name if available
//             $this->addFolderToZip($zip, $filePath, $zipFolderName . '/' . ($subDirName ?? $fileNameInZip));
//         } else {
//             // If `real_file_name` exists, organize the file within the corresponding subdirectory
//             if ($subDirName) {
//                 $subDirPath = $zipFolderName . '/' . $subDirName;

//                 // Ensure the subdirectory exists in the ZIP
//                 if (!$zip->locateName($subDirPath)) {
//                     $zip->addEmptyDir($subDirPath);
//                 }

//                 $zip->addFile($filePath, $subDirPath . '/' . $fileNameInZip);
//             } else {
//                 // If no subdirectory is needed, add the file directly under the main folder
//                 $zip->addFile($filePath, $zipFolderName . '/' . $fileNameInZip);
//             }
//         }
//     }
// }

















///////////////////////////////////////////////////////////////////////////////////////////////

// 13 December 2024 for download Folder start
// public function downloadFolder($folder_id)
// {
//     // Fetch the folder details
//     $folder = Folder::findOrFail($folder_id);
//     $folderName = $folder->name;

//     // Find related directories
//     $relatedDirectories = Folder::where('name', 'like', '%' . $folderName . '%')->get();
//     dd($relatedDirectories);

//     // Fetch files from the CommonTable
//     $files = CommonTable::whereIn('folder_id', $relatedDirectories->pluck('id'))->get();

//     // Create a temporary ZIP file
//     $zipFileName = $folderName . '.zip';
//     $tempFile = storage_path('app/' . $zipFileName);

//     $zip = new ZipArchive;
//     if ($zip->open($tempFile, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
//         foreach ($relatedDirectories as $directory) {
//             $dirName = $directory->name;

//             // Add a directory to the ZIP
//             $zip->addEmptyDir($dirName);

//             // Add files to the directory
//             foreach ($files as $file) {
//                 if ($file->folder_id == $directory->id) {
//                     $realFilePath = storage_path('app/uploads/' . $file->real_file_name);
//                     if (file_exists($realFilePath)) {
//                         $zip->addFile($realFilePath, $dirName . '/' . $file->file_name);
//                     }
//                 }
//             }
//         }

//         $zip->close();

//         // Return the ZIP file as a download response
//         return response()->download($tempFile)->deleteFileAfterSend(true);
//     } else {
//         return response()->json(['error' => 'Unable to create ZIP file.'], 500);
//     }
// }
public function downloadFolder($folder_id)
{
    // Fetch the folder details
    $folder = Folder::findOrFail($folder_id);
    $folderName = $folder->name;
    // dd($folderName);
    // Find related directories
    // $relatedDirectories = Folder::where('path', 'like', '%' . $folderName . '%')->where('user_id',$userId)->get();
    $relatedDirectories = Folder::where('path', 'like', '%' . $folderName . '%')
    ->where(function ($query) {
        $query->where('user_id', Auth::id())
              ->orWhere('user_id', 301);
    })
    ->get();

    // dd($relatedDirectories);

    // Fetch files from the CommonTable
    // $files = CommonTable::whereIn('folder_id', $relatedDirectories->pluck('id'))->get();
    // $files = CommonTable::where('location', $relatedDirectories->parent_name)->get();

    // Fetch files from the CommonTable based on the location
    $locations = $relatedDirectories->pluck('path'); // Assuming 'name' corresponds to part of the location
    // dd($locations);
    // $files = CommonTable::whereIn('location', $locations)->get();
    $files = CommonTable::whereIn('location', $locations)
    ->where('user_id', Auth::id())
    ->where('is_delete',0)
    ->whereNull('is_replaced')
    ->get();
    $fileNames = $files->pluck('file_name'); // Assuming 'name' corresponds to part of the location
    $fileTempNames = $files->pluck('temp_file_name'); // Assuming 'name' corresponds to part of the location

    // dd($fileNames);
    // dd($fileTempNames);

    // Create a temporary ZIP file path in app/public
    $zipFileName = $folderName . '.zip';    
    // $zipFileName = $folderName;

    // $zipFilePath = storage_path('app/public/' . $zipFileName);
    // $dateSuffix = date('d-F-Y'); // 'd-F-Y' format gives day, month name, and year, e.g., '13-December-2024'
    // $zipFileName .= '-' . $dateSuffix . '.zip'; // Append date, month name, year, and '.zip' extension
    $zipFilePath = storage_path('app/public/' . $zipFileName);
    // dd($zipFilePath);

    $zip = new ZipArchive;
    if ($zip->open($zipFilePath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
        $dir_names=[];
        foreach ($relatedDirectories as $directory) {
            $dirName = $directory->name;
            $dir_names[] = $dirName;

            // Add a directory to the ZIP
            $zip->addEmptyDir($dirName);
            // Add files to the directory
            // foreach ($files as $file) {
            //     if ($file->folder_id == $directory->id) {
            //         $realFilePath = storage_path('app/uploads/' . $file->real_file_name);
            //         if (file_exists($realFilePath)) {
            //             $zip->addFile($realFilePath, $dirName . '/' . $file->file_name);
            //         }
            //     }
            // }

            // foreach ($files as $file) {
            //     $storedFilePathZip = storage_path('app/public/' . $directory->path . '/' . $file->temp_file_name);
            //     echo "Checking file: " . $storedFilePathZip . "\n";
            //     if (file_exists($storedFilePathZip)) {
            //         echo "File exists.\n";
            //     } else {
            //         echo "File does not exist.\n";
            //     }
            // }

            // dd("after foreach");
            foreach ($files as $file) {
                // dd($file->location); 
                // dd($directory->path);
                // "2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST/2024-2025November301_Litigations"
                // "2024-2025November301_Accounting & Taxation/2024-2025November301_Indirect Tax/2024-2025November301_Indirect/2024-2025November301_GST"

                if ($file->location == $directory->path) {
                    // dd("matched ".$file->location);
                    // dd($file);
                    // $storedFilePath = storage_path('app/'.$directory->path .'/'. $file->temp_file_name);
                    // // $storedFilePathZip = storage_path('app/public/'.$directory->name.'/'.$file->file_name);
                    // $storedFilePathZip = storage_path('app/public/'.$directory->name.'/'.$file->temp_file_name);

                    // // $storedFilePathZiploc = storage_path('app/public/'.$directory->path.'/'.$file->file_name);
                    // // dd($storedFilePathZip);
                    // // Debugging paths
                    // // dd([
                    // //     'Stored File Path' => $storedFilePath,
                    // //     'ZIP File Path' => $storedFilePathZip,
                    // // ]);

                    // // Check if the file exists at the given path
                    // if (file_exists($storedFilePath)) {
                    //     // Add the file to the ZIP archive
                    //     $asf = $zip->addFile($storedFilePath,$storedFilePathZip);
                    //     dd($asf);
                    //     echo "File added to the ZIP at location: " . $storedFilePathZip;
                    // } else {
                    //     echo "File not found at: " . $storedFilePath;
                    // }

                    // $storedFilePath = storage_path('app/' . $directory->path . '/' . $file->temp_file_name);
                    // $storedFilePathZip = storage_path('app/public/' . $directory->name . '/' . $file->temp_file_name);

                    // //////// working smooth  start
                    // $storedFilePath = storage_path('app/' . $directory->path . '/' . $file->temp_file_name);

                    // // Correct the relative path for the ZIP
                    // $relativeZipPath = $directory->name . '/' . $file->file_name; // Exclude "public/" from the path
                    
                    // // Debugging paths
                    // // dd([
                    // //     'Stored File Path' => $storedFilePath,
                    // //     'Relative ZIP Path' => $relativeZipPath,
                    // // ]);
                    
                    // // Check if the file exists at the given path
                    // if (file_exists($storedFilePath)) {
                    //     // Add the file to the ZIP archive with the correct relative path
                    //     $addedToZip = $zip->addFile($storedFilePath, $relativeZipPath);
                    
                    //     // Check if the file was added successfully
                    //     if ($addedToZip) {
                    //         echo "File added to the ZIP at location: " . $relativeZipPath . "<br>";
                    //     } else {
                    //         echo "Failed to add the file to the ZIP.<br>";
                    //     }
                    // } else {
                    //     echo "File not found at: " . $storedFilePath . "<br>";
                    // }
                    // //////// working smooth end ///////////////


                    $storedFilePath = storage_path('app/' . $directory->path . '/' . $file->temp_file_name);

                    // Determine the relative ZIP path based on `real_file_name`
                    if (!empty($file->real_file_name)) {
                        $relativeZipPath = $directory->name . '/' . $file->real_file_name . '/' . $file->file_name;
                    } else {
                        $relativeZipPath = $directory->name . '/' . $file->file_name;
                    }

                    // Debugging paths
                    // dd([
                    //     'Stored File Path' => $storedFilePath,
                    //     'Relative ZIP Path' => $relativeZipPath,
                    // ]);

                    // Check if the file exists at the given path
                    if (file_exists($storedFilePath)) {
                        // Create the directory structure in the ZIP if it doesn't exist
                        $zipDirectory = dirname($relativeZipPath);
                        if (!empty($zipDirectory) && !$zip->locateName($zipDirectory . '/')) {
                            $zip->addEmptyDir($zipDirectory); // Ensure the directory exists in the ZIP
                        }

                        // Add the file to the ZIP archive with the correct relative path
                        $addedToZip = $zip->addFile($storedFilePath, $relativeZipPath);

                        // Check if the file was added successfully
                        if ($addedToZip) {
                            echo "File added to the ZIP at location: " . $relativeZipPath . "<br>";
                        } else {
                            echo "Failed to add the file to the ZIP.<br>";
                        }
                    } else {
                        echo "File not found at: " . $storedFilePath . "<br>";
                    }

                }
            }
        }
        // dd($dir_names);
        $zip->close();
        // Make the ZIP file publicly accessible
        $publicZipPath = 'storage/app/public/' . $zipFileName;
        return response()->download($zipFilePath)->deleteFileAfterSend(true);
        // return response()->json(['path' => $publicZipPath, 'message' => 'ZIP file created successfully.']);
    } else {
        return response()->json(['error' => 'Unable to create ZIP file.'], 500);
    }
}



// 13 December 2024 for download Folder end


    
    

    
    
    
//     public function renameFolder(Request $request)
// {
//     $request->validate([
//         'old_folder_name' => 'required|string',
//         'folder_name' => 'required|string',
//     ]);

//     $searchTerm = $request->old_folder_name;
//     $newTerm = $request->folder_name;
//     $emp = $request->employee_id;

//     $dir = $request->director_id;

//     $fold = $request->folder_id;

//     // Fetch folders where 'path' contains the search term
//     $folders = Folder::where('employee_id', $emp)->get();

//     foreach ($folders as $folder) {
//         // Current folder path and name
//         $currentFolderPath = $folder->path;

//         // Create the new folder path by replacing only the specified term
//         $newFolderPath = str_replace($searchTerm, $newTerm, $currentFolderPath);

//         // Rename the folder in the filesystem if it exists
//         if (Storage::exists($currentFolderPath)) {
//             Storage::move($currentFolderPath, $newFolderPath);
//         }

//         // Update the folder record in the database with the new path and name
//         $folder->name = str_replace($searchTerm, $newTerm, $folder->name);
//         $folder->path = $newFolderPath;
//         $folder->save();
//     }

//     // Update any other related fields (paths and parent names) in the database
//     Folder::where('parent_name', 'LIKE', '%' . $searchTerm . '%')
//         ->update(['parent_name' => DB::raw("REPLACE(parent_name, '$searchTerm', '$newTerm')")]);

//     StoreCompanyEmployee::where('name', 'LIKE', '%' . $searchTerm . '%')
//         ->where('id', $emp)
//         ->update(['name' => DB::raw("REPLACE(name, '$searchTerm', '$newTerm')")]);

//     return redirect()->back()->with('success', 'Folder names, paths, and related records updated successfully!');
// }
    
public function renameFolder(Request $request)
{
    $request->validate([
        'old_folder_name' => 'required|string',
        'folder_name' => 'required|string',
    ]);

    $searchTerm = $request->old_folder_name;
    $newTerm = $request->folder_name;
    $employeeId = $request->employee_id;
    $directorId = $request->director_id;
    $folderId = $request->folder_id;

    // Initialize an empty folders collection
    $folders = collect();

    if (!is_null($employeeId)) {
        // Fetch folders by employee ID
        $folders = Folder::where('employee_id', $employeeId)->get();
    } elseif (!is_null($directorId)) {
        // Fetch folders by director ID if employee ID is null
        $folders = Folder::where('director_id', $directorId)->get();
    } else {
        // Fetch specific folder by folder ID if both employee ID and director ID are null
        $folder = Folder::find($folderId);
        if ($folder) {
            $folders->push($folder);
        }
    }

    foreach ($folders as $folder) {
        $currentFolderPath = $folder->path;
        $newFolderPath = str_replace($searchTerm, $newTerm, $currentFolderPath);

        // Rename the folder in the filesystem if it exists
        if (Storage::exists($currentFolderPath)) {
            Storage::move($currentFolderPath, $newFolderPath);
        }

        // Update the folder record in the database with the new path and name
        $folder->name = str_replace($searchTerm, $newTerm, $folder->name);
        $folder->path = $newFolderPath;
        $folder->save();
    }

    CommonTable::where('file_path', 'LIKE', '%' . $searchTerm . '%')
    ->update([
        'file_path' => DB::raw("REPLACE(file_path, '$searchTerm', '$newTerm')"),
        'location' => DB::raw("REPLACE(location, '$searchTerm', '$newTerm')")
    ]);

    // Update other related fields in the database based on employee_id or director_id
    if (!is_null($employeeId)) {
        // Only update folders related to the specified employee
        Folder::where('employee_id', $employeeId)
            ->where('parent_name', 'LIKE', '%' . $searchTerm . '%')
            ->update(['parent_name' => DB::raw("REPLACE(parent_name, '$searchTerm', '$newTerm')")]);

        // Update employee name
        StoreCompanyEmployee::where('name', 'LIKE', '%' . $searchTerm . '%')
            ->where('id', $employeeId)
            ->update(['name' => DB::raw("REPLACE(name, '$searchTerm', '$newTerm')")]);
    } elseif (!is_null($directorId)) {
        // Only update folders related to the specified director
        Folder::where('director_id', $directorId)
            ->where('parent_name', 'LIKE', '%' . $searchTerm . '%')
            ->update(['parent_name' => DB::raw("REPLACE(parent_name, '$searchTerm', '$newTerm')")]);

        // Update director name
        StoreCompanyDirector::where('name', 'LIKE', '%' . $searchTerm . '%')
            ->where('id', $directorId)
            ->update([
                'name' => DB::raw("REPLACE(name, '$searchTerm', '$newTerm')"),
                'path' => DB::raw("REPLACE(path, '$searchTerm', '$newTerm')")
            ]);
    } else {
        // If both employee_id and director_id are null, update by folder_id (no specific employee or director)
        Folder::where('id', $folderId)
            ->where('parent_name', 'LIKE', '%' . $searchTerm . '%')
            ->update(['parent_name' => DB::raw("REPLACE(parent_name, '$searchTerm', '$newTerm')")]);
    }

    return redirect()->back()->with('success', 'Folder names, paths, and related records updated successfully!');
}

public function renamecustomfile(Request $request)
{
    // Validate the request
    $request->validate([
        'file_id' => 'required|integer',
        'file_with_ext' => 'required|string',
        'file_name' => 'required|string',
        'fyear' => 'nullable|string',
        'Month' => 'nullable|string',
        'tagList' => 'nullable|string',
        'desc' => 'nullable|string',
    ]);

    $fileId = $request->file_id;
    $fileWithExt = $request->file_with_ext;
    $newFileName = $request->file_name;
    $fyear = $request->fyear;
    $month = $request->Month;
    $tagList = $request->tagList;
    $description = $request->desc;
    $tag_list = [];
    $userTags = $request->input('tagList', []);
    if (is_string($userTags)) {
     $userTags = explode(',', $userTags);
    } 
    $tag_list = array_filter((array)$userTags);
    $tags = empty($tag_list) ? null : json_encode($tag_list);

    // Extract the extension from the original file name
    $extension = pathinfo($fileWithExt, PATHINFO_EXTENSION);

    // Construct the new file name with the extension
    $newFileNameWithExt = $newFileName . '.' . $extension;

    // Fetch the file record from the database
    $file = CommonTable::find($fileId); // Assuming you have a `File` model

    if (!$file) {
        return redirect()->back()->with('error', 'File not found!');
    }

    // Update database record
    $oldFilePath = $file->file_path;
    $newFilePath = str_replace(basename($oldFilePath), $newFileNameWithExt, $oldFilePath);

    $file->update([
        'file_name' => $newFileNameWithExt,
        'file_path' => $newFilePath,
        'fyear' => $fyear,
        'month' => $month,
        'tags' => $tags,
        'descp' => $description,
    ]);

    // Rename the file in storage
    if (\Storage::exists($oldFilePath)) {
        \Storage::move($oldFilePath, $newFilePath);
    } else {
        return redirect()->back()->with('error', 'File not found in storage!');
    }

    return redirect()->back()->with('success', 'File details updated successfully!');
}

    
    

    
    
    // public function downloadFilecustom($id)
    // {
    //     // Find the file record in the database
    //     $file = CommonTable::find($id);

    //     if (!$file) {
    //         return redirect()->back()->with('error', 'File not found.');
    //     }

    //     // Extract the file path from the database
    //     $filePath = $file->file_path;

    //     // Check if the file exists on the storage
    //     if (!Storage::exists($filePath)) {
    //         return redirect()->back()->with('error', 'File does not exist.');
    //     }

    //     // Download the file
    //     return Storage::download($filePath, $file->file_name);
    // }

        public function downloadFilecustom($id)
    {
        // $file = CommonTable::findOrFail($id); // Replace with your model
        // dd($file);
        $userId = Auth::id();
        $file = CommonTable::where('id', $id)
                    ->where('user_id', $userId)
                    ->where('is_delete',0)
                    ->firstOrFail();

        $filePath = storage_path("app/{$file->file_path}");

        $filePaths_spaces = $file->file_path;
        // dd($filePath);
        $filePaths_spaces_removed = preg_replace('/\s*\/\s*/', '/', $filePaths_spaces);

        $filePath2 = storage_path("app/{$filePaths_spaces_removed}");



        // "C:\xampp\htdocs\s-dev\milliondox-product\storage\app/2024-2025November301_Accounting & Taxation / 2024-2025November301_Charter Documents / 2024-2025November301_Incorporation/cPeaTCXDJw16rg1ynyNwF1rMxumpVZwAMyIYFr4Z.pdf";
        // "C:\xampp\htdocs\s-dev\milliondox-product\storage\app/2024-2025November301_Accounting & Taxation/2024-2025November301_Charter Documents/2024-2025November301_Incorporation/GSRil80ewQW0M1e0emSydcIZekv0qSzIKWdexpHe.pdf";
        // C:\xampp\htdocs\s-dev\milliondox-product\storage\app\2024-2025November301_Accounting & Taxation\2024-2025November301_Charter Documents\2024-2025November301_Incorporation


                                                            // 2024-2025November301_Accounting & Taxation / 2024-2025November301_Charter Documents / 2024-2025November301_Incorporation/8HGA8xiDXjnB3CGUVpYEN4bAhepwPYck1zJ3FhNU (3).pdf
        if (!file_exists($filePath)) {
            if (!file_exists($filePath2)) {
                abort(404, 'File not found');
                return response()->json(['error' => 'File Not Found']);
            }
            $filePath = $filePath2;

            // abort(404, 'File not found');
            // return response()->json(['error' => 'File Not Found']);
        }
        // dd("i am here");
        return response()->download($filePath, $file->file_name);
    }
   
// public function saveBreadcrumb(Request $request) {
//     // Check if 'breadcrumb' key exists in the session
//     if (!session()->has('breadcrumb')) {
//         // Initialize 'breadcrumb' as an empty array
//         session(['breadcrumb' => []]);
//     }

//     // Safely add to the breadcrumb
//     $breadcrumb = session('breadcrumb');
//     $newBreadcrumb = [
//         'path' => $request->input('path'),
//         'name' => $request->input('name')
//     ];

//     // Add the new breadcrumb to the array
//     $breadcrumb[] = $newBreadcrumb;

//     // Save the updated breadcrumb array back to the session
//     session(['breadcrumb' => $breadcrumb]);

//     // Return the saved breadcrumbs as part of the response
//     return response()->json([
//         'message' => 'Breadcrumb saved successfully',
//         'breadcrumb' => $breadcrumb
//     ]);
// }

public function saveBreadcrumb(Request $request)
    {
        $request->validate([
            'path' => 'required|string',
            'name' => 'required|string'
        ]);
    
        if (!session()->has('breadcrumb')) {
            session(['breadcrumb' => []]);
        }
    
        $breadcrumb = session('breadcrumb');
        
        $newBreadcrumb = [
            'path' => $request->input('path'),
            'name' => $request->input('name')
        ];
    
        $breadcrumb[] = $newBreadcrumb;
        session(['breadcrumb' => $breadcrumb]);
    
        return response()->json([
            'message' => 'Breadcrumb saved successfully',
            'breadcrumb' => $breadcrumb
        ]);
    }



    // public function getBreadcrumb()
    // {
    //     // Retrieve the breadcrumb from session
    //     $breadcrumb = Session::get('breadcrumb', '');
    //     $folderPath = Session::get('folderPath', '');

    //     return response()->json([
    //         'breadcrumb' => $breadcrumb,
    //         'folderPath' => $folderPath
    //     ]);
    // }
    
      public function getBreadcrumb()
    {
        $breadcrumb = Session::get('breadcrumb', []);
        $folderPath = Session::get('folderPath', '');

        return response()->json([
            'breadcrumb' => $breadcrumb,
            'folderPath' => $folderPath
        ]);
    }

    public function downloadFile($id)
    {
        $file = CommonTable::findOrFail($id);
        
        // Assuming you store the file path in a 'file_path' column
        $filePath = $file->file_path;
        $realFileName = $file->real_file_name; // The real file name as stored in the database
    
        if (Storage::exists($filePath)) {
            // Download the file with the original name instead of the system file name
            return Storage::download($filePath, $realFileName);
        } else {
            return redirect()->back()->with('error', 'File not found.');
        }
    }
    
    public function viewFile($id)
    {
        $file = CommonTable::findOrFail($id);
        
        // File path and MIME type
        $filePath = $file->file_path;
        $mimeType = Storage::mimeType($filePath);
    
        if (Storage::exists($filePath)) {
            return response()->file(storage_path("app/{$filePath}"), [
                'Content-Type' => $mimeType,
            ]);
        } else {
            return redirect()->back()->with('error', 'File not found.');
        }
    }
    
    public function advancedeleteFile($id)
    {
        // Find the record in CommonTable by ID
        $file = CommonTable::find($id);
    
        if ($file) {
            // Update the is_delete field to 1
            $file->is_delete = 1;
            $file->save();
    
            // Return a JSON response for success
            return response()->json(['success' => true, 'message' => 'File deleted successfully.']);
        } else {
            // Return an error if file not found
            return response()->json(['success' => false, 'message' => 'File not found.'], 404);
        }
    }
    
    


    

   

    public function reposidebar()
    {
        $folders = Folder::all(); // Fetch all folders from the database
    
        return view('user.include.Repo-client-sidebar', compact( 'folders'));
    }
    
   
    



    public function salemanage()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();
       return view('user.sale-management.sale-manage',compact('cli_announcements','user'));
    }


   

    // public function createFolder(Request $request)
    // {
    //     $folderName = $request->input('folder_name');
    //     $new_folderName = Auth::id()."_".$folderName;
    //     $parentFolderPath = $request->input('parent_folder');

    //     $fyear = $request->input('fyear');
    //     $Month = $request->input('Month');
    
      
    //     if ($parentFolderPath) {
           
    //         $newFolderPath = $parentFolderPath . '/' . $new_folderName;
    //     } else {
    //         $newFolderPath = $new_folderName;
    //     }
    
        
    //     if (Storage::exists($newFolderPath)) {
    //         return response()->json(['success' => false, 'message' => 'Folder already exists.'], 422);
    //     }
    
      
    //     Storage::makeDirectory($newFolderPath);
    
        
    //     $folder = new Folder();
    //     $folder->name = $new_folderName;
    //     $folder->path = $newFolderPath;
    //     $folder->parent_name = $parentFolderPath;
    //     $folder->user_id = Auth::id(); 
    //     $folder->fyear = $fyear;
    //     $folder->Month = $Month;
    //     $folder->save();
    
    //     return response()->json(['success' => true, 'message' => 'Folder created successfully.']);
    // }
    
    public function createFolder(Request $request)
    {
        
        // $request->validate([
        //     'folder_name' => ['required', 'regex:/^[a-zA-Z0-9\s\-\(\):]+$/'],
        //     // 'parent_folder' => ['nullable', 'regex:/^[a-zA-Z0-9\s\/&_]+$/'],
        //     // 'parent_folder' =>  ['nullable', 'regex:/^(\/?(?:\d{4}-\d{4}(January|February|March|April|May|June|July|August|September|October|November|December)\d+_[a-zA-Z0-9]+))*$/'],
        //     // 'parent_folder' =>  ['nullable', 'regex:/^(\/?(?:\d{4}-\d{4}(January|February|March|April|May|June|July|August|September|October|November|December)\d+_[a-zA-Z0-9]+|[a-zA-Z0-9\s&]+))*$/'],
        //     // 'parent_folder' =>  ['nullable', 'regex:/^(\/?(?:\d{4}-\d{4}(January|February|March|April|May|June|July|August|September|October|November|December)\d+_[a-zA-Z0-9-]+|[a-zA-Z0-9\s&]+))*$/'],
        //     'parent_folder' =>  ['nullable','regex:/^(\/?(?:\d{4}-\d{4}(January|February|March|April|May|June|July|August|September|October|November|December)\d+_[a-zA-Z0-9\-\(\):]+|[a-zA-Z0-9\s&\(\):]+))*$/'],
        //     'fyear' => ['required', 'regex:/^\d{4}-\d{4}$/'], // Ensures format like "2013-2014"
        //     'Month' => ['required', 'in:January,February,March,April,May,June,July,August,September,October,November,December'], // Ensures a valid month name
        // ],
        // ['parent_folder.regex' => 'The parent folder must follow the specified format: either a year-month format or a simple folder name.',
        //  'folder_name.regex' => 'The folder name can only contain letters, numbers, spaces, and hyphens.',
        //  'fyear.regex' => 'The financial year must be in the format "YYYY-YYYY", e.g., "2023-2024".',
        //  'Month.regex' => 'The Month must be in the format e.g., "January".',
        //  ]);
        
        $folderName = $request->input('folder_name');
        $new_folderName = $request->input('fyear').$request->input('Month').Auth::id()."_".$folderName;
        
        
        $parentFolderPath = $request->input('parent_folder');

        $fyear = $request->input('fyear');
        $Month = $request->input('Month');
    
      
        if ($parentFolderPath) {
           
            $newFolderPath = $parentFolderPath . '/' . $new_folderName;
        } else {
            $newFolderPath = $new_folderName;
        }
    
        
        if (Storage::exists($newFolderPath)) {
            return response()->json(['success' => false, 'message' => 'Folder already exists.'], 422);
        }
    
      
        Storage::makeDirectory($newFolderPath);
    
        
        $folder = new Folder();
        $folder->name = $new_folderName;
        $folder->path = $newFolderPath;
        $folder->parent_name = $parentFolderPath;
        $folder->user_id = Auth::id(); 
        $folder->fyear = $fyear;
        $folder->Month = $Month;
        $folder->save();
    
        return response()->json(['success' => true, 'message' => 'Folder created successfully.']);
    }
    






    // public function uploadFile(Request $request)
    // {
    //     Log::debug('Upload file request:', $request->all());
    
    //     // Extract folder path from the request
    //     $folderPath = $request->input('parent_folder');
    //     Log::debug('Extracted folder path:', ['folderPath' => $folderPath]);
    //     $fyear = $request->input('fyear');
    //     $Month = $request->input('Month');
    //     // Validate the file input
    //     $validatedData = $request->validate([
    //         'file' => 'required|mimes:pdf,doc,docx,jpg,jpeg,png|max:2048',
    //         'parent_folder' => 'required|string'
    //     ]);
    
    //     if (!$folderPath) {
    //         Log::error('Folder path is required.');
    //         return response()->json(['success' => false, 'message' => 'Folder path is required.']);
    //     }
    
    //     // Sanitize folder path
    //     $folderPath = rtrim($folderPath, '/');
    //     Log::debug('Sanitized folder path:', ['folderPath' => $folderPath]);
    
    //     if ($request->file('file')) {
    //         $file = $request->file('file');
    //         $fileName = $file->getClientOriginalName();
    //         Log::debug('Prepared file name:', ['fileName' => $fileName]);
    
    //         // Ensure the folder exists, create if not
    //         if (!Storage::exists($folderPath)) {
    //             Storage::makeDirectory($folderPath);
    //             Log::debug('Created directory:', ['folderPath' => $folderPath]);
    //         } else {
    //             Log::debug('Directory already exists:', ['folderPath' => $folderPath]);
    //         }
    
    //         // Store the file in the specified folder path within storage/app
    //         try {
    //             $filePath = $file->storeAs($folderPath, $fileName);
    //             Log::debug('Stored file path:', ['filePath' => $filePath]);
    
    //             // Save file details to the database
    //             try {
    //                 $fileModel = new Files();
    //                 $fileModel->file_name = $fileName;
    //                 $fileModel->path = $filePath;
    //                 $fileModel->parent_folder = $folderPath;
    //                  $fileModel->location = $folderPath;
    //                 $fileModel->user_id = Auth::id(); 
    //                  $fileModel->user_name = auth()->user()->name; 
    //                 $fileModel->fyear = $fyear;
    //                 $fileModel->Month = $Month;
    //                 $fileModel->save();
    //                 Log::debug('Saved file to database:', ['fileModel' => $fileModel]);
    
    //                 return response()->json(['success' => true, 'message' => 'File uploaded successfully.']);
    //             } catch (\Exception $e) {
    //                 Log::error('Error saving file to database:', ['error' => $e->getMessage()]);
    //                 return response()->json(['success' => false, 'message' => 'Failed to save file details to database.']);
    //             }
    //         } catch (\Exception $e) {
    //             Log::error('Error storing file:', ['error' => $e->getMessage()]);
    //             return response()->json(['success' => false, 'message' => 'Failed to upload file.']);
    //         }
    //     }
    
    //     Log::error('No file was uploaded.');
    //     return response()->json(['success' => false, 'message' => 'No file was uploaded.']);
    // }
    

    // public function uploadFile(Request $request)
    // {
    //     // Validate the request
    //     $request->validate([
    //         'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
    //         'tagList' => 'nullable',
    //     ], [
    //         'files.*.required' => 'Each file is required.',
    //         'files.*.file' => 'The uploaded item must be a valid file.',
    //         'files.*.max' => 'Each file may not be larger than 100MB.',
    //         'files.*.mimes' => 'The file type must be valid.',
    //     ]);
    
    //     $folderPath = $request->input('parent_folder', 'uploads'); // Default folder path
    //     $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);
    
    //     if ($request->hasFile('files')) {
    //         try {
    //             $successMessages = [];
    //             $errorMessages = [];
    //             $tag_list = [];
    
    //             // Handle tags
    //             $userTags = $request->input('tagList', []);
    //             if (is_string($userTags)) {
    //                 $userTags = explode(',', $userTags);
    //             }
    //             $tag_list = array_filter((array)$userTags);
    //             $tags = empty($tag_list) ? null : json_encode($tag_list);
    
    //             foreach ($request->file('files') as $file) {
    //                 try {
    //                     $originalFileName = $file->getClientOriginalName();
    //                     $fileExtension = $file->getClientOriginalExtension();
    //                     $baseFileName = pathinfo($originalFileName, PATHINFO_FILENAME); // File name without extension
    //                     $counter = 1;
    //                     $fileName = $originalFileName;
    
    //                     // Check if the file name exists and increment if necessary
    //                     while (CommonTable::where('file_name', $fileName)->exists()) {
    //                         $fileName = $baseFileName . ' (' . $counter . ').' . $fileExtension;
    //                         $counter++;
    //                     }
    
    //                     // Save the file to storage
    //                     $filePath = $file->storeAs($folderPath, $fileName);
    
    //                     // Save file details to the database
    //                     CommonTable::create([
    //                         'file_type' => $file->getClientMimeType(),
    //                         'file_name' => $fileName,
    //                         'file_size' => $file->getSize(),
    //                         'file_path' => $filePath,
    //                         'user_name' => auth()->user()->name,
    //                         'user_id' => auth()->user()->id,
    //                         'file_status' => $request->input('file_status', 0),
    //                         'fyear' => $request->input('fyear'),
    //                         'month' => $request->input('Month'),
    //                         'tags' => $tags,
    //                         'location' => $folderPaths,
    //                         'descp' => $request->input('desc'),
    //                     ]);
    
    //                     $successMessages[] = "File {$fileName} uploaded successfully.";
    //                 } catch (\Exception $e) {
    //                     $errorMessages[] = "Failed to upload file {$file->getClientOriginalName()}.";
    //                 }
    //             }
    
    //             return response()->json([
    //                 'success' => empty($errorMessages),
    //                 'successMessages' => $successMessages,
    //                 'errorMessages' => $errorMessages,
    //             ]);
    //         } catch (\Exception $e) {
    //             return response()->json(['success' => false, 'message' => 'An error occurred while processing the upload.'], 500);
    //         }
    //     } else {
    //         return response()->json(['success' => false, 'message' => 'No files were uploaded.'], 400);
    //     }
    // }
    
    
//     public function uploadFile(Request $request)
// {
//     // Validate the request
//     $request->validate([
//         'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
//         'tagList' => 'nullable',
//     ], [
//         'files.*.required' => 'Each file is required.',
//         'files.*.file' => 'The uploaded item must be a valid file.',
//         'files.*.max' => 'Each file may not be larger than 100MB.',
//         'files.*.mimes' => 'The file type must be valid.',
//     ]);

//     $folderPath = $request->input('parent_folder', 'uploads'); // Default folder path
//     $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);

//     if ($request->hasFile('files')) {
//         try {
//             $successMessages = [];
//             $errorMessages = [];
//             $tag_list = [];

//             // Handle tags
//             $userTags = $request->input('tagList', []);
//             if (is_string($userTags)) {
//                 $userTags = explode(',', $userTags);
//             }
//             $tag_list = array_filter((array)$userTags);
//             $tags = empty($tag_list) ? null : json_encode($tag_list);

//             foreach ($request->file('files') as $file) {
//                 $originalFileName = $file->getClientOriginalName();
//                 $fileExtension = $file->getClientOriginalExtension();
//                 $baseFileName = pathinfo($originalFileName, PATHINFO_FILENAME); // File name without extension
                
//                 // Check if file exists in the same folder path
//                 $fileExists = CommonTable::where('file_name', $originalFileName)
//                     ->where('location', $folderPaths) // Check for same location
//                     ->exists();

//                 if ($fileExists) {
//                     // File already exists, send response for SweetAlert prompt
//                     return response()->json([
//                         'success' => false,
//                         'exists' => true,
//                         'message' => 'File already exists in the same location. Replace or keep both?',
//                         'fileName' => $originalFileName,
//                         'folderPath' => $folderPaths,
//                     ]);
//                 } else {
//                     // Save the file to storage
//                     $filePath = $file->storeAs($folderPath, $originalFileName);

//                     // Save file details to the database
//                     CommonTable::create([
//                         'file_type' => $file->getClientMimeType(),
//                         'file_name' => $originalFileName,
//                         'file_size' => $file->getSize(),
//                         'file_path' => $filePath,
//                         'user_name' => auth()->user()->name,
//                         'user_id' => auth()->user()->id,
//                         'file_status' => $request->input('file_status', 0),
//                         'fyear' => $request->input('fyear'),
//                         'month' => $request->input('Month'),
//                         'tags' => $tags,
//                         'location' => $folderPaths,
//                         'descp' => $request->input('desc'),
//                     ]);

//                     $successMessages[] = "File {$originalFileName} uploaded successfully.";
//                 }
//             }

//             return response()->json([
//                 'success' => empty($errorMessages),
//                 'successMessages' => $successMessages,
//                 'errorMessages' => $errorMessages,
//             ]);
//         } catch (\Exception $e) {
//             return response()->json(['success' => false, 'message' => 'An error occurred while processing the upload.'], 500);
//         }
//     } else {
//         return response()->json(['success' => false, 'message' => 'No files were uploaded.'], 400);
//     }
// }
// public function uploadFile(Request $request)
//     {
//     // dd($request);
    
//         // Validate the request
//         $request->validate([
//             'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
//             'tagList' => 'nullable', // Allow tagList to be nullable
//         ], [
//             'files.*.required' => 'Each file is required.',
//             'files.*.file' => 'The uploaded item must be a valid file.',
//             'files.*.max' => 'Each file may not be larger than 100MB.',
//             'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
//         ]);
    
//         // Check if folder path is provided
//         $folderPath = $request->input('parent_folder');
//         $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);
//         // if (!$folderPath) {
//         //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
//         // }
    
//         // Check if files are uploaded
//         if ($request->hasFile('files')) {
//             try {
//                 $totalSize = 0;
//                 $successMessages = [];
//                 $errorMessages = [];
//                 $tag_list = [];
    
//     // Handle tagList whether it's an array, a comma-separated string, or empty
//     $userTags = $request->input('tagList', []);
    
//     // Convert to array if it's a comma-separated string
//     if (is_string($userTags)) {
//         $userTags = explode(',', $userTags);
//     }
//     // Ensure $userTags is an array and remove any empty values
//     if (is_array($userTags)) {
//         $userTags = array_filter($userTags); // Remove empty values
//     } else {
//         $userTags = []; // Fallback to empty array if not an array
//     }
    
//     // Merge with default tags
//     $tag_list = array_merge($tag_list, $userTags);
//     $tags = empty($tag_list) ? NULL : json_encode($tag_list);
    
//                 // Process each file
//                 foreach ($request->file('files') as $file) {
//                     try {
//                         $filePath = $file->store($folderPath);
    
//                         // Store file details in the database
//                         CommonTable::create([
//                             'file_type' => $file->getClientMimeType(),
//                             'file_name' => $file->getClientOriginalName(),
//                             'file_size' => $file->getSize(),
//                             'file_path' => $filePath,
//                             'user_name' => auth()->user()->name,
//                             'user_id' => auth()->user()->id,
//                             'file_status' => $request->input('file_status', 0),
//                             'fyear' => $request->input('fyear'),
//                             'month' => $request->input('Month'),
//                             'tags' => $tags, // Store tags as JSON
//                             'location' => $folderPaths,
//                             'descp' => $request->input('desc'),
//                         ]);
    
//                         $totalSize += $file->getSize();
//                         $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
//                     } catch (\Exception $e) {
//                         $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
//                     }
//                 }
    
//                 // Compile the response
//                 return response()->json([
//                     'success' => empty($errorMessages),
//                     'successMessages' => $successMessages,
//                     'errorMessages' => $errorMessages,
//                 ]);
//             } catch (\Exception $e) {
//                 return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
//             }
//         } else {
//             // No files were uploaded
//             return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
//         }
//     }


public function uploadFile(Request $request)
{
 // dd($request);
    // Validate the request
    $request->validate([
        'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
        'tagList' => 'nullable', // Allow tagList to be nullable
    ], [
        'files.*.required' => 'Each file is required.',
        'files.*.file' => 'The uploaded item must be a valid file.',
        'files.*.max' => 'Each file may not be larger than 100MB.',
        'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
    ]);

    // Check if files are uploaded
    if ($request->hasFile('files')) {
        // Process each file
        
        $exists = [];
        $do_not_exists = [];
        $folderPaths = $request->input('parent_folder');

        // If 'parent_folder' is null, check for 'decodedFolder' in the request
        if ($folderPaths === null) {
            $folderPaths = $request->input('decodedFolder');
        }
        foreach ($request->file('files') as $file) {

            $fileExists = CommonTable::where('file_name', $file->getClientOriginalName())
            ->where('user_id', auth()->user()->id)
            ->where('file_type', $file->getClientMimeType())
            ->where('fyear', $request->input('fyear'))
            ->where('month', $request->input('Month'))
            ->whereNull('real_file_name')
            ->where('location', $folderPaths)
            ->exists();
            

            if ($fileExists) {
                $exists[]=$file->getClientOriginalName();
            } else {
                $do_not_exists[]=$file->getClientOriginalName();
            }
        }

        // Compile the response
        return response()->json([
            'success' => true,
            'do_not_exists' => $do_not_exists,
            'exists' => $exists,
            
        ]);
       
    } else {
        // No files were uploaded
        return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
    }
}


public function HandleCommonUploadFiles(Request $request)
{
    //  dd($request);

    // dd($request->input('replace'));
    // dd("here");
    if($request->input('replace')){ 
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
        ]);
    
        // Check if folder path is provided
        $folderPath = $request->input('parent_folder');
        $folderPaths = $request->input('parent_folder');

        // If 'parent_folder' is null, check for 'decodedFolder' in the request
        if ($folderPaths === null) {
            $folderPaths = $request->input('decodedFolder');
        }


        $folderPaths2 = $folderPaths;
        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
        $folderName = trim($folderName);
        // $folderPaths = preg_replace('/\s*\/\s*/', ' / ', $folderPath);
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('newfiles2')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                $tag_list = [];
    
                // Handle tagList whether it's an array, a comma-separated string, or empty
                $userTags = $request->input('tagList', []);
                
                // Convert to array if it's a comma-separated string
                if (is_string($userTags)) {
                    $userTags = explode(',', $userTags);
                }
                // Ensure $userTags is an array and remove any empty values
                if (is_array($userTags)) {
                    $userTags = array_filter($userTags); // Remove empty values
                } else {
                    $userTags = []; // Fallback to empty array if not an array
                }
                
                // Merge with default tags
                $tag_list = array_merge($tag_list, $userTags);
                $tags = empty($tag_list) ? NULL : json_encode($tag_list);
    
                // Process each file
                foreach ($request->file('newfiles2') as $file) {
                    try {
                       


                        // Retrieve the file's ID based on the given conditions
                     
                        $fileId = CommonTable::where('file_type', $file->getClientMimeType())
                        ->where('file_name', $file->getClientOriginalName())
                        // ->where('file_path', $filePath)  // Comment out if you don't need this condition
                        ->where('user_id', auth()->user()->id)
                        ->where('fyear', $request->input('fyear'))
                        ->where('month', $request->input('Month'))
                        ->whereNull('is_replaced')
                        ->whereNull('real_file_name')
                        ->value('id'); // Use `value('id')` to get only the ID

                        // dd($fileId); // This will give you the ID if the file exists, or null if it doesn't.
                        // Check if the file exists
                        if ($fileId) {
                             // Retrieve the file record based on the ID
                            $fileRecord = CommonTable::find($fileId); // Use `find()` to get the full record by ID

                            // dd($fileRecord);
                            if ($fileRecord) {
                                // File record found, update the `is_replaced` field to 1
                                $fileRecord->is_replaced = 1;
                                // $fileRecord->replaced_by = $fileId;

                                if($fileRecord->save()){
                                    
                                    // Store file details in the database
                                    $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                                    $extension = $file->getClientOriginalExtension(); // Get the file extension
                                    $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                                    $filePath = $file->store($folderPaths);
                                    $storedFileName = basename($filePath);  

                                    $newEntry = CommonTable::create([
                                        'file_type' => $file->getClientMimeType(),
                                        'file_name' => $file->getClientOriginalName(),
                                        'file_size' => $file->getSize(),
                                        'file_path' => $filePath,
                                        'temp_file_name' => $storedFileName,
                                        'user_name' => auth()->user()->name,
                                        'user_id' => auth()->user()->id,
                                        'file_status' => $request->input('file_status', 0),
                                        'fyear' => $request->input('fyear'),
                                        'month' => $request->input('Month'),
                                        'tags' => $tags, // Store tags as JSON
                                        'location' => $folderPaths,
                                        'folder_name'=>$folderName,
                                        'descp' => $request->input('desc'),
                                    ]);

                                    // Update the `replaced_by` field of the original file record with the new entry ID
                                    if ($newEntry) {
                                        $fileRecord->replaced_by = $newEntry->id;
                                        $fileRecord->save(); // Save the updated file record
                                    }
                                    // return response()->json(['message' => 'File replaced Successfully'], 404);
                                    $successMessages[]='File replaced Successfully';

                                }else{
                                 $errorMessages[] = "Failed to update the existing the file.";
                                }
                             
                            } else {
                                // dd('File record not found!');
                               $errorMessages[] = "Failed to find the old file.";

                            }

                        } else {
                            // No file found, handle accordingly
                            return response()->json(['message' => 'File not found'], 404);
                        }
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} replaced successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }


    }
    if($request->input('keep')){
        // dd("in keep");
         // Validate the request
         $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
        ], [
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
        ]);
    
        // Check if folder path is provided
        $folderPath = $request->input('parent_folder');
        $folderPaths = $request->input('parent_folder');

        // If 'parent_folder' is null, check for 'decodedFolder' in the request
        if ($folderPaths === null) {
            $folderPaths = $request->input('decodedFolder');
        }

        $folderPaths2 = $folderPaths;
        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
        $folderName = trim($folderName);
        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('newfiles3')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                $tag_list = [];
    
                // Handle tagList whether it's an array, a comma-separated string, or empty
                $userTags = $request->input('tagList', []);
                
                // Convert to array if it's a comma-separated string
                if (is_string($userTags)) {
                    $userTags = explode(',', $userTags);
                }
                // Ensure $userTags is an array and remove any empty values
                if (is_array($userTags)) {
                    $userTags = array_filter($userTags); // Remove empty values
                } else {
                    $userTags = []; // Fallback to empty array if not an array
                }
                
                // Merge with default tags
                $tag_list = array_merge($tag_list, $userTags);
                $tags = empty($tag_list) ? NULL : json_encode($tag_list);
    
                // Process each file
                // foreach ($request->file('newfiles3') as $file) {
                //     try {
                //         $filePath = $file->store($folderPath);

                //         // Store file details in the database
                //         CommonTable::create([
                //             'file_type' => $file->getClientMimeType(),
                //             'file_name' => $file->getClientOriginalName(),
                //             'file_size' => $file->getSize(),
                //             'file_path' => $filePath,
                //             'user_name' => auth()->user()->name,
                //             'user_id' => auth()->user()->id,
                //             'file_status' => $request->input('file_status', 0),
                //             'fyear' => $request->input('fyear'),
                //             'month' => $request->input('Month'),
                //             'tags' => $tags, // Store tags as JSON
                //             'location' => $folderPaths,
                //             'descp' => $request->input('desc'),
                //             'is_keep'=> 1,
                //         ]);
                //         // return response()->json(['message' => 'File replaced Successfully'], 404);
                //         // $successMessages[]='File uploaded Successfully';
 
                //         $totalSize += $file->getSize();
                //         $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                //     } catch (\Exception $e) {
                //         $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                //     }
                // }



                foreach ($request->file('newfiles3') as $file) {
                    try {
                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                
                        // Check if the file name exists in the database and append a counter if it does
                        $counter = 1;
                        while (CommonTable::where('file_name', $fileName)->where('location', $folderPaths)->whereNull('real_file_name')->exists()) {
                            $fileName = $originalFileName . " ($counter)." . $extension;
                            $counter++;
                        }

                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPaths);
                        $storedFileName = basename($filePath);  
                
                        // Save the file with the updated unique name
                        // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);

                
                        // Store file details in the database
                        CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $fileName, // Use the updated unique name
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPaths,
                            'folder_name'=>$folderName,
                            'descp' => $request->input('desc'),
                            'is_keep' => 1,
                        ]);
                
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$fileName} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }
                
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }
    if($request->input('upload')){
        // Validate the request
        $request->validate([
            'files.*' => 'required|file|max:102400|mimes:pdf,ppt,pot,pps,pptx,pptm,potx,ppam,ppsx,sldx,sldm,odp,ods,doc,odt,rtf,csv,json,xml,html,ico,svg,webp,zip,xls,xlsx,docx,docm,xlam,txt,wav,ogg,mp3,avi,mov,wmv,webm,tiff,mp4,jpg,png,gif,jpeg,3gp,mkv,flv,xltx,xltm', // Allow specific file types up to 100MB
            'tagList' => 'nullable', // Allow tagList to be nullable
        ],[
            'files.*.required' => 'Each file is required.',
            'files.*.file' => 'The uploaded item must be a valid file.',
            'files.*.max' => 'Each file may not be larger than 100MB.',
            'files.*.mimes' => 'The file type must be one of the following: PDF, ODP, ODS, PPT, DOC, ODT, RTF, CSV, JSON, XML, HTML, ICO, SVG, WEBP, ZIP, XLS, DOCX, WAV, OGG, MP3, AVI, MOV, WMV, WEBM, TIFF, MP4, JPG, PNG, GIF, JPEG, 3GP, MKV, FLV.',
        ]);
    
        // Check if folder path is provided
        $folderPath = $request->input('parent_folder');
        $folderPaths = $request->input('parent_folder');
        // dd($folderPath);
        // If 'parent_folder' is null, check for 'decodedFolder' in the request
        if ($folderPaths === null) {
            $folderPaths = $request->input('decodedFolder');
        }


        $folderPaths2 = $folderPaths;
        $folderName = substr($folderPaths2, strrpos($folderPaths2, '/') + 1);
        $folderName = trim($folderName);

        // if (!$folderPath) {
        //     return response()->json(['success' => false, 'message' => 'Folder path is required.'], 400);
        // }
    
        // Check if files are uploaded
        if ($request->hasFile('newfiles')) {
            try {
                $totalSize = 0;
                $successMessages = [];
                $errorMessages = [];
                $tag_list = [];
    
                // Handle tagList whether it's an array, a comma-separated string, or empty
                $userTags = $request->input('tagList', []);
                
                // Convert to array if it's a comma-separated string
                if (is_string($userTags)) {
                    $userTags = explode(',', $userTags);
                }
                // Ensure $userTags is an array and remove any empty values
                if (is_array($userTags)) {
                    $userTags = array_filter($userTags); // Remove empty values
                } else {
                    $userTags = []; // Fallback to empty array if not an array
                }
                
                // Merge with default tags
                $tag_list = array_merge($tag_list, $userTags);
                $tags = empty($tag_list) ? NULL : json_encode($tag_list);

                
    
                // Process each file
                foreach ($request->file('newfiles') as $file) {
                    try {
                        // $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        // $extension = $file->getClientOriginalExtension(); // Get the file extension
                        // $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        // // $filePath = $file->storeAs($folderPath, $fileName);
                        // $filePath = $file->storeAs($folderPath);
                        // $storedFileName = basename($filePath);
                        $originalFileName = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME); // Get the file name without extension
                        $extension = $file->getClientOriginalExtension(); // Get the file extension
                        $fileName = $originalFileName . '.' . $extension; // Start with the original file name
                        $filePath = $file->store($folderPaths);
                        $storedFileName = basename($filePath);  

    
                        // Store file details in the database
                        CommonTable::create([
                            'file_type' => $file->getClientMimeType(),
                            'file_name' => $file->getClientOriginalName(),
                            'file_size' => $file->getSize(),
                            'file_path' => $filePath,
                            'temp_file_name' => $storedFileName,
                            'user_name' => auth()->user()->name,
                            'user_id' => auth()->user()->id,
                            'file_status' => $request->input('file_status', 0),
                            'fyear' => $request->input('fyear'),
                            'month' => $request->input('Month'),
                            'tags' => $tags, // Store tags as JSON
                            'location' => $folderPaths,
                            'folder_name'=>$folderName,
                            'descp' => $request->input('desc'),
                        ]);
    
                        $totalSize += $file->getSize();
                        $successMessages[] = "File {$file->getClientOriginalName()} uploaded successfully.";
                    } catch (\Exception $e) {
                        $errorMessages[] = "Failed to save file {$file->getClientOriginalName()} to the database.";
                    }
                }
    
                // Compile the response
                return response()->json([
                    'success' => empty($errorMessages),
                    'successMessages' => $successMessages,
                    'errorMessages' => $errorMessages,
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => 'Failed to process file uploads.'], 500);
            }
        } else {
            // No files were uploaded
            return response()->json(['success' => false, 'message' => 'No files uploaded.'], 400);
        }

    }

    
}

public function updateTempfilesName(){
    $userId = auth()->user()->id;
    // dd("You are not authorised");

    // dd($userId);
    if(269 === $userId){
        $entries = \App\Models\CommonTable::whereNull('temp_file_name')->get();

        $fileNames = [];

        foreach ($entries as $entry) {
            $filePath = $entry->file_path;
            $fileName = basename($filePath); // Extract file name after the last "/"
            
            $fileNames[] = $fileName;

            $entry->timestamps = false;

            $entry->temp_file_name = $fileName;
            $entry->save();
        }

        dd($fileNames);

    }
    else{
        dd("You are not authorised");
    }

}



    
public function createDataRoom(Request $request)
    {
        // Validate the request
        $request->validate([
            'name' => 'required|string|max:255',
        ]);

        // Get the new Data Room name
        $newDataRoomName = $request->input('name');

        // Define the base folder path (e.g., 'storage/app/dataroom/')
        $baseFolderPath = storage_path('app/dataroom/');

        // Define the full folder path including the new Data Room name
        $fullFolderPath = $baseFolderPath . $newDataRoomName;

        // Create the directory if it doesn't exist
        if (!File::exists($fullFolderPath)) {
            File::makeDirectory($fullFolderPath, 0755, true);
        }

        // Create a new DataRoom entry in the database
        $dataRoom = DataRoom::create([
            'name' => $newDataRoomName,
            'folderpath' => $fullFolderPath, // Store the full folder path in the database
            'user_id' => Auth::id(),
            'file_type' => null,
            'file_name' => null,
            'real_file_name' => null,
            'file_path' => null,
            'file_size' => null,
            'user_name' => Auth::user()->name,
            'file_status' => null,
        ]);

        // Return a response, you can redirect or return a JSON response
        return redirect()->back()->with('success', 'Data Room created successfully!');
    }



    public function uploadincorporationdocs(Request $request)
    {
        $request->validate([
           
            'folder_name' => 'string',
            'file' => 'required|file',
            'user_entered_file_name' => 'required|string',
            
        ]);

        $file = $request->file('file');
        $fileName = $file->getClientOriginalName();
        $folderName = $request->input('folder_name');

        $document = new ChartedDocument();
        $document->doc_name = $request->input('doc_name');
        $document->upload_datetime = now();
        $document->updated_by = auth()->user()->name; // Assuming you have authentication set up
       
       
        $document->folder_name = $folderName;
        $document->original_file_name = $fileName;
        $document->user_entered_file_name = $request->input('user_entered_file_name');
        // $document->updated_at = now();
        $document->save();

        // Move the uploaded file to the specified folder
        $file->move(public_path('uploads/' . $folderName), $fileName);

        return redirect()->back()->with('success', 'Document uploaded successfully.');
    }
    
    public function viewTemplateFile($id, $fileName)
    {
        // Find the template file by ID
        $templateFile = TemplateFile::findOrFail($id);

        // Assuming you want to return the file content
        // You may need to adjust this based on how you store the file content
        $fileContent = $templateFile->file_contents;

        // Get the MIME type of the file content using finfo
        $finfo = new \finfo(FILEINFO_MIME_TYPE);
        $mimeType = $finfo->buffer($fileContent);

        // Return the file content as a response with appropriate headers
        return response($fileContent)
            ->header('Content-Type', $mimeType)
            ->header('Content-Disposition', 'inline; filename="' . $fileName . '"'); // Display file in browser
    }
    public function admintemplate()
    {
        $announcements = Announcement::latest()->get();
        $template = TemplateFile::latest()->get();
       return view('admin.template.template',compact('announcements','template'));
    }
    public function deletetemp($id)
{
    // Find the announcement by ID
    $pol = TemplateFile::find($id);

    if (!$pol) {
        // Handle the case where the announcement does not exist
        return redirect()->route('home')->with('error', 'Record not found.');
    }

    // Delete the announcement
    $pol->delete();

    // Redirect back to the home page with a success message
    return redirect()->back()->with('success', 'Record deleted successfully.');
}
public function downloadTemplateFile($id, $fileName)
{
    $policy = TemplateFile::findOrFail($id);

    // Ensure the file path is properly sanitized and validated
    $filePath = Storage::path($policy->file_path);

    // Generate a custom file name with the employee name and "ope"
    $fFileName = $fileName;

    return response()->file($filePath, [
        'Content-Type' => 'application/octet-stream',
        'Content-Disposition' => 'attachment; filename="' . rawurlencode($fFileName) . '"',
    ]);
}
public function uploadTemplate(Request $request)
{
    try {
        $validatedData = $request->validate([
            'template.*' => 'file|mimes:pdf,doc,docx|max:2048',
            'file_name' => 'required|string|max:255',
        ]);

        if ($request->hasFile('template')) {
            $files = $request->file('template');
            $name = $request->file_name;
            $ttype = $request->template_type;

            foreach ($files as $file) {
                if ($file->isValid()) {
                    $filename = $file->getClientOriginalName();
                    $fileContents = file_get_contents($file);
                    $filePath = $file->store('template_files'); // Store the file and get the path

                    TemplateFile::create([
                        'filename' => $filename,
                        'file_contents' => $fileContents,
                        'file_path' => $filePath,
                        'file_name' => $name,
                        'template_type' => $ttype, // Store the file name
                    ]);
                }
            }

            return redirect()->back()->with('success', 'Files uploaded successfully.');
        }

        return redirect()->back()->with('error', 'No files selected.');
    } catch (\Exception $e) {
        return redirect()->back()->with('error', 'An error occurred while uploading files.');
    }
}
public function updateFavoriteStatus($templateId, $newFavoriteStatus)
    {
        // Find the template by ID
        $template = TemplateFile::find($templateId);

        // If the template exists
        if ($template) {
            // Update the favorite status
            $template->favorite = $newFavoriteStatus;
            $template->save();

            // Return a JSON response indicating success
            return response()->json(['success' => true, 'message' => 'Favorite status updated successfully']);
        }

        // Return a JSON response if the template does not exist
        return response()->json(['success' => false, 'message' => 'Template not found'], 404);
    }
    public function empnotification()
{
    // Get the ID of the authenticated user
    $userId = auth()->user()->id;

    // Fetch announcements where user_id does not match or is null
    $empl_announcements = Announcement::latest()->get();

   

    return view('employee.notification.notification', compact('empl_announcements'));
}

public function policymanual()
{
    $policy = PolicyFile::latest()->get();
            $announcements = Announcement::latest()->get();

     return view('admin.policymanual.index',compact('policy','announcements'));
}
    
    public function clientsview()
    {
        // $clients = DB::table('users')
        //         ->join('assignments', 'users.id', '=', 'assignments.client_id' )
        //         ->select('users.*', 'assignments.*') // Select the columns you need
               
        //         ->get();
        $clients = UserInfo::where('role', 'Client')->get();  
                // foreach ($clients as $client) {
                //     $employee = null;
                //     if ($client->employee_id) {
                //         // Fetch the employee data if employee_id is not null
                //         $employee = DB::table('users')->where('id', $client->employee_id)->first();
                //     }
            
                //     $client->employee_name = $employee ? $employee->name : 'No Employee Found';
                // }
                $announcements = Announcement::latest()->get();
        return view('admin/client/list',compact('clients','announcements'));
    }

    public function admindse()
    {
        
        $clients = User::where('role', 'Client')->get(); 
       $dataModels = DB::table('data_models')
    ->leftJoin('users', 'users.id', '=', 'data_models.client_id')
    ->select('data_models.*', 'users.name')
    ->whereNull('data_models.client_id')
    ->orWhereNotNull('data_models.client_id')
    ->get();

    $announcements = Announcement::latest()->get();

    // dd($dataModels);
        return view('admin/dsc/index',compact('clients','dataModels','announcements'));
    }

    public function storedse(Request $request)
    {
        // dd($request);
        $validatedData = $request->validate([
            // 'client_id' => 'required',
            'directorname' => 'required|string',
            // 'din_number' => 'string',
            'valid_from' => 'required|date', 
            'valid_till' => 'required|date',
            'dsc_location' => 'required|string',
            // 'expiry_status' => 'string',
            // 'renewal' => 'required|string',
            // 'mobile_no' => 'required',
            // 'email' => 'required',
            // 'father_name' => 'required',
            // 'pan_file' => 'required',
            // 'aadhar_file' => 'required',
            // 'profile_file' => 'required',
        ]);
    $panFilePath = null;
$aadharFilePath = null;
$profileFilePath = null;
      if ($request->hasFile('pan_file')) {
    $panFilePath = $request->file('pan_file')->store('uploads');
}

if ($request->hasFile('aadhar_file')) {
    $aadharFilePath = $request->file('aadhar_file')->store('uploads');
}

if ($request->hasFile('profile_file')) {
    $profileFilePath = $request->file('profile_file')->store('uploads');
}


    // Create a new DataModel instance and fill it with the validated data
    $dataModel = new DataModel([
        'client_id' => $request->client_id,
        'Nonclient' => $request->Nonclient,
        'directorname' => $validatedData['directorname'],
        'din_number' => $request->din_number,
        'valid_from' => $validatedData['valid_from'],
        'valid_till' => $validatedData['valid_till'],
        'expiry_status' => $request->expiry_status,
        'renewal' => $request->renewal,
        'mobile_no' => $request->mobile_no,
        'email' => $request->email,
        'father_name' => $request->father_name,
        'dsc_location' => $request->dsc_location,
        'pan_file_path' => $panFilePath,
        'aadhar_file_path' => $aadharFilePath,
        'profile_file_path' => $profileFilePath,
    ]);

    // Save the data to the database
    $dataModel->save();
    
        // Redirect back with a success message (you can customize this)
        return redirect()->back()->with('success', 'Data added successfully.');
    }

public function assignClient(Request $request) {
    // Validate the request data
    $validator = Validator::make($request->all(), [
        'client_id' => 'required|array',
        'employee_id' => 'required|string|max:255',
    ]);

    if ($validator->fails()) {
        return redirect('/admin/employees')
            ->withErrors($validator)
            ->withInput()
            ->with('error', 'Validation failed');
    }

    $employeeId = $request->input('employee_id');
    $selectedClientIds = $request->input('client_id');
    $alreadyAssignedCount = 0;
    $newlyAssignedCount = 0;

    // Loop through the selected client IDs
    foreach ($selectedClientIds as $clientId) {
        $existingAssignment = Assignment::where('client_id', $clientId)
            ->where('employee_id', $employeeId)
            ->first();

        if ($existingAssignment) {
            $alreadyAssignedCount++;
        } else {
            // If no assignment exists, create a new one
            Assignment::create([
                'employee_id' => $employeeId,
                'client_id' => $clientId,
            ]);
            $newlyAssignedCount++;
        }
    }

    if ($request->ajax()) {
        return response()->json(['message' => 'Client(s) assigned successfully']);
    }

    $announcements = Announcement::all();

    $message = $newlyAssignedCount . ' client(s) assigned successfully. ' . $alreadyAssignedCount . ' client(s) were already assigned to the employee.';

    return redirect('/admin/employees')->with([
        'success' => $message,
        'announcements' => $announcements,
    ]);
}


public function uploadPolicy(Request $request)
{
    try {
        $validatedData = $request->validate([
            'policy.*' => 'file|mimes:pdf,doc,docx|max:2048',
            'file_name' => 'required|string|max:255',
        ]);

        if ($request->hasFile('policy')) {
            $files = $request->file('policy');
            $name = $request->file_name;

            foreach ($files as $file) {
                if ($file->isValid()) {
                    $filename = $file->getClientOriginalName();
                    $fileContents = file_get_contents($file);
                    $filePath = $file->store('policy_files'); // Store the file and get the path

                    PolicyFile::create([
                        'filename' => $filename,
                        'file_contents' => $fileContents,
                        'file_path' => $filePath,
                        'file_name' => $name, // Store the file name
                    ]);
                }
            }

            return redirect()->back()->with('success', 'Files uploaded successfully.');
        }

        return redirect()->back()->with('error', 'No files selected.');
    } catch (\Exception $e) {
        return redirect()->back()->with('error', 'An error occurred while uploading files.');
    }
}

public function welcomewallet()
{
       $user = auth()->user();
        $userId = Auth::id();
        // dd($user->role);
        
        $role = User::where('id', $userId)
                        ->where('role', $user->role)
                        ->where('Promoters_Vault_Access', 1)
                        ->first();
        // dd($role);
        
        if (!$role) {
            echo "You have no Access to Promoters Vault , Please Contact to your Account Provider";
            abort(404);  // Abort if the role is not found or access is not granted
        }
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
    $documents = Document::where('client_id', $user->id)->get();
     $user = auth()->user();
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();
   
   return view('user/promoter-wallet/welcome-vault',compact('cli_announcements','documents','user'));
}
public function downloadPolicyFile($id, $fileName)
{
    $policy = PolicyFile::findOrFail($id);

    // Ensure the file path is properly sanitized and validated
    $filePath = Storage::path($policy->file_path);

    // Generate a custom file name with the employee name and "ope"
    $fFileName = $fileName;

    return response()->file($filePath, [
        'Content-Type' => 'application/octet-stream',
        'Content-Disposition' => 'attachment; filename="' . rawurlencode($fFileName) . '"',
    ]);
}


public function deletepol($id)
{
    // Find the announcement by ID
    $pol = PolicyFile::find($id);

    if (!$pol) {
        // Handle the case where the announcement does not exist
        return redirect()->route('home')->with('error', 'Record not found.');
    }

    // Delete the announcement
    $pol->delete();

    // Redirect back to the home page with a success message
    return redirect()->back()->with('success', 'Record deleted successfully.');
}
public function empissue()
{
    $user = Auth::user();
    
    $clients = DB::table('users as u')
    ->join('assignments as a', 'u.id', '=', 'a.client_id')
    ->where('a.employee_id', '=', $user->id)
    ->select('*')
    ->get();
        // dd($clients);
    $issue = Issue::where('employee_id', $user->id)->get();
    
    foreach ($clients as $client) {
        // Fetch the employee data if client_id is not null
        $employee = DB::table('users')->where('id', $client->employee_id)->first();

        $client->client_name = $employee ? $employee->name : 'No Employee Found';
    } 
    $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
    return view('employee/issue-tracker/list', compact('user', 'clients', 'issue','empl_announcements'));
}

public function empoutofexpense()
{
     $user = Auth::user();
     $authUserId = auth()->id();

$OutOfExpense = OutOfExpense::select('out_of_expenses.*', 'users.name as client_name')
    ->join('users', 'out_of_expenses.client_id', '=', 'users.id')
    ->where('out_of_expenses.employee_id', $authUserId)
    ->get();
// dd($OutOfExpense);
     $clients = DB::table('users as u')
    ->join('assignments as a', 'u.id', '=', 'a.client_id')
    ->where('a.employee_id', '=', $user->id)
    ->select('*')
    ->get();
    
     $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
      return view('employee/outofexpense/index',compact('user','empl_announcements','OutOfExpense','clients'));
}
public function storeoutofexpense(request $request)
    {
       $validatedData = $request->validate([
        'client_id' => 'required|integer',
        'date' => 'required|date',
        'reason' => 'required|string',
        'amount' => 'required|numeric|min:0',
        'employee_id' => 'required|integer',
        'status' => 'required|string',
        'category_of_expense' => 'required|string',
        'nature_of_expense' => 'required|string',
        'supporting_documents' => 'required|string',
        'attach_supporting_documents' => 'file',
        // Add validation for file upload
    ]);
$formattedDateTime = Carbon::now()->format('Y-m-d H:i:s');
 $outOfExpense = new OutOfExpense([
        'client_id' => $request->input('client_id'),
        'date' => $request->input('date'),
        'reason' => $request->input('reason'),
        'amount' => $request->input('amount'),
        'employee_id' => $request->input('employee_id'),
        'status' => $request->input('status'),
        'category_of_expense' => $request->input('category_of_expense'),
        'nature_of_expense' => $request->input('nature_of_expense'),
        'supporting_documents' => $request->input('supporting_documents'),
        'date_of_submission_expense' => $formattedDateTime,
    ]);

    

    // Handle file upload if a file is attached
    if ($request->hasFile('attach_supporting_documents')) {
        $file = $request->file('attach_supporting_documents');
        $filename = $file->store('attachments'); // Store the file and get its path
        $outOfExpense->attach_supporting_documents = $filename; // Save the file path in the database
    }

    // Save the OutOfExpense model to the database
    $outOfExpense->save();
     $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
        // Redirect back with a success message (you can customize this)
         return redirect('/employee/outofexpense')->with([
        'success' => 'Request created successfully',
        // 'empl_announcements' => $empl_announcements,
    ]);
    }
public function adminoutofexpense()
{
     $user = Auth::user();
     $OutOfExpense = OutOfExpense::select('out_of_expenses.*', 'employee.name as employee_name', 'client.name as client_name')
    ->join('users as employee', 'employee.id', '=', 'out_of_expenses.employee_id')
    ->join('users as client', 'client.id', '=', 'out_of_expenses.client_id')
    ->get();

    // dd($OutOfExpense);
    $announcements = Announcement::latest()->get();
      return view('admin/outofexpense/index',compact('user','announcements','OutOfExpense'));
}
public function downloadOpeFile($id, $employeeName)
{
    $policy = OutOfExpense::findOrFail($id);

    // Ensure the file path is properly sanitized and validated
    $filePath = storage_path('app/' . $policy->attach_supporting_documents);

    // Generate a custom file name with the employee name and "ope"
    $customFileName = $employeeName . '_ope_file' ;

    return response()->stream(
        function () use ($filePath) {
            echo file_get_contents($filePath);
        },
        200,
        [
            'Content-Type' => 'application/octet-stream',
            'Content-Disposition' => 'attachment; filename="' . $customFileName . '"',
        ]
    );
}


public function empupdateoutofexpense(Request $request)
{
    $validatedData = $request->validate([
       
        'emp_id' => 'required|string',
        'attach_supporting_documents' => 'file', // Add validation for the file upload
    ]);
// $formattedDateTime = Carbon::now()->format('Y-m-d H:i:s');
    $data = [
        'date' => $request->input('date'),
        'reason' => $request->input('reason'),
        'amount' => $request->input('amount'),
        'category_of_expense' => $request->input('category_of_expense'),
        'nature_of_expense' => $request->input('nature_of_expense'),
        'supporting_documents' => $request->input('supporting_documents'),
        // 'date_of_submission_expense' => $formattedDateTime,
        'created_at' => $request->input('created_at'),
       
        
    ];

    // Handle file upload
    if ($request->hasFile('attach_supporting_documents')) {
        $file = $request->file('attach_supporting_documents');
        $filePath = $file->store('uploads'); // Adjust the storage path as needed
        $data['attach_supporting_documents'] = $filePath;
    }

    // Use updateOrInsert to update or insert the record based on the 'id'
    $adminoutexp = OutOfExpense::updateOrInsert(
        ['id' => $request->input('emp_id')],
        $data
    );

    return redirect('/employee/outofexpense')->with([
        'success' => 'Request updated successfully',
    ]);
}
public function empupdatetimesheet(Request $request)
{
    $validatedData = $request->validate([
       
        'timesheettxt' => 'string',
        'spenttime' => 'string',
        'date_of_work' => 'date', // Add validation for the file upload
    ]);

    $data = [
        'timesheet_txt' => $request->input('timesheettxt'),
        'spenttime' => $request->input('spenttime'),
        'date_of_work' => $request->input('date_of_work'),
        
        
    ];

    

    // Use updateOrInsert to update or insert the record based on the 'id'
    $emptimes = TimeSheet::updateOrInsert(
        ['id' => $request->input('time_id')],
        $data
    );

    return redirect('/employee/timesheet')->with([
        'success' => 'Request updated successfully',
    ]);
}

public function updateoutofexpense(request $request)
    {
        $validatedData = $request->validate([
        'status' => 'required|string',
        // 'remarks' => 'string',
        
        'emp_id' => 'required|string',

        
        
    ]);

   $formattedDateTime = Carbon::now()->format('Y-m-d H:i:s');
    $data = [
        'status' => $request->input('status'),
        'remarks' => $request->input('remarks'),
        'created_at' => $request->input('created_at'),
        'admin_update' => $formattedDateTime,
        'updated_at' => $formattedDateTime,
        
    ];

    // Use updateOrInsert to update or insert the record based on client_id
    $adminoutexp = OutOfExpense::updateOrInsert(
        ['id' => $request->input('emp_id')],
        $data
    );
     $announcements = Announcement::latest()->get();
        // Redirect back with a success message (you can customize this)
         return redirect('/admin/outofexpense')->with([
        'success' => 'Request updated successfully',
        // 'empl_announcements' => $empl_announcements,
    ]);
    }
    public function adminissue()
    {
       
        $user = Auth::user();
        
        
        $issue = Issue::get();
        
        $announcements = Announcement::latest()->get();
        return view('admin/issue-tracker/list',compact('issue','announcements'));
    }

    public function userissue()
    {
       
        $user = Auth::user();
        // dd($user);
        
        $issue = Issue::where('client_id', $user->id)->get();
        
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        return view('user/issue-tracker/list',compact('issue','cli_announcements'));
    }

    public function userwallet()
    {
        
        $user = auth()->user();
        $userId = Auth::id();
        // dd($user->role);
        
        $role = User::where('id', $userId)
                        ->where('role', $user->role)
                        ->where('Promoters_Vault_Access', 1)
                        ->first();
        // dd($role);
        
        if (!$role) {
            echo "You have no Access to Promoters Vault , Please Contact to your Account Provider";
            abort(404);  // Abort if the role is not found or access is not granted
        }
        // Clear the 'otp' session variable
        session()->forget('otp');
        session()->forget('match');
        $otp = rand(100000, 999999);
        session(['otp' => $otp]);
    
        $user = Auth::user();
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        // $keyDownload = KeyDownload::where('client_id', $user->id)->first();
        //  $documents = Document::where('client_id', $user->id)->get();
        
           
              $user = auth()->user();
         $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();
      
      
    
        return view('user/promoter-wallet/index', compact( 'cli_announcements','otp','user','user'));
    }
    public function checkEmailExists(Request $request) {
        $email = $request->input('email');
        $exists = User::where('email', $email)->exists();
        return response()->json(['exists' => $exists]);
    }
    
    public function MiscellaneousDocuments()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $files = MisUploadedFile::all();
    $chardoc = MisCharteredDoc::all();
    $coi = MisCOI::all();
    $pan = MisPAN::all();
    $tan = MisTAN::all();
    $inc = MisINC::all();
    $spicedoc = MisSpiceDoc::all();
    $customdoc = MisCustomDoc::all();
     $user = auth()->user();
        
       return view('user.Charter-Documents.Miscellaneous-Documents',compact('cli_announcements', 'files','chardoc','coi','pan','tan','inc','spicedoc','customdoc','user'));
    }
	
	    public function companyprofile()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();
        $cp = CompanyProfiles::where('user_id', $user->id)->get();
            $user = auth()->user();
         $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    // Check if the user's role exists in the roles array
    $user = auth()->user();
    
    // Get the user's role from the users table
    $userRole = $user->role; // Ensure 'role' field exists in the users table
    
    $gstno = StoreGST::where('user_id', $user->id)->get();
    $gstnocount = StoreGST::where('user_id', $user->id)->count();
    $employeescompany = StoreCompanyEmployee ::where('user_id', $user->id)->where('is_delete', 0)->get();
    
    $employeescount = StoreCompanyEmployee::where('user_id', $user->id)->where('is_delete', 0)->count();
    
    // dd($gstnocount);
    // Find the UserRole record where the role matches the user's role
    $userRoleRecord = UserRole::where('role', $userRole)->first();

    $directorcompany = StoreCompanydirector ::where('user_id', $user->id)->where('is_delete', 0)->get();
    // dd($directorcompany);
    $directorcount = StoreCompanydirector::where('user_id', $user->id)->where('is_delete', 0)->count();
    $progressPercentage = 0;

    // Check user attributes for 40%
    if (
        ($user->profile_picture != NULL) &&
        ($user->name_of_the_business != NULL) &&
        ($user->legal_entity != NULL) &&
        ($user->industry != NULL) &&
        ($user->state != NULL) &&
        ($user->backupemail != NULL) &&
        ($user->employees != NULL) &&
        ($user->phone != NULL)
    ) {
        $progressPercentage += 40; // Add 40%
    }
    
    // Check additional user attributes for 30%
    if (
        ($user->joining_date != NULL) &&
        ($user->PAN != NULL) &&
        ($user->CIN != NULL) &&
        ($user->authorized_capital != NULL) &&
        ($user->paid_up_capital != NULL)
    ) {
        $progressPercentage += 30; // Add 30%
    }
    
    // Check GST number count for 10%
    if ($gstnocount > 0) {
        $progressPercentage += 10; // Add 10%
    }
    
   

    if ($employeescount > 0) {
        $progressPercentage += 10; // Add 10%
    }
    if ($directorcount > 0) {
        $progressPercentage += 10; // Add 10%
    }
    
   

       return view('user.Administration.company-profile',compact('cli_announcements','progressPercentage','directorcompany','directorcount','cp','user','user','gstno','gstnocount','employeescompany','employeescount'));
    }
    
    
    public function submitForm(Request $request)
    {
        $request->validate([
            'keyfile' => 'required|file',
        ]);
    
        $keyfile = $request->file('keyfile');
    
        $keyfileHash = hash_file('sha256', $keyfile->path());
    
        $keyData = "90-data-41-solov-49-taknikk-89-plutus-98";
    
        if ($keyfileHash === hash('sha256', $keyData)) {
            session(['match' => 1]);
            return response()->json(['success' => true]);
        } else {
            return response()->json(['success' => false, 'message' => 'Keyfile data does not match']);
        }
    }
    
    
    public function submitDocu(Request $request)
{
    $request->validate([
        'anotherFile' => 'required|file|mimes:jpeg,png,pdf,doc,docx,xls,xlsx,zip,svg',
        'document_name' => 'required|string',
    ]);
    
    $user = Auth::user();
    $client_id = $user->id;
   
    if ($request->hasFile('anotherFile')) {
        $file = $request->file('anotherFile');
        
        $path = $file->store('documents');
        
        $document = new Document();
        $document->client_id =  $client_id;
        $document->name = $request->input('document_name');
        $document->file_path = $path;
        $document->save();

        return response()->json([
            'success' => true,
            'message' => 'Document uploaded successfully.',
            'document_name' => $document->name,
            'document_url' => asset('storage/' . $document->file_path),
        ]);
    } else {
        return response()->json([
            'success' => false,
            'message' => 'Failed to upload document.',
        ]);
    }
}

    
    
    public function fetchDocuments()
    {
        $user = Auth::user();
       
        $documents = Document::where('client_id', $user->id)->get();
    
        // Iterate through each document and retrieve its MIME type
        $documentsWithTypes = $documents->map(function ($document) {
            $mimeType = Storage::mimeType($document->file_path);
            $document->real_file_type = $mimeType;
            return $document;
        });
    
        return response()->json(['documents' => $documentsWithTypes]);
    }
    
    
    public function download($id)
    {
        $user = Auth::user();
    
        $document = Document::where('id', $id)
            ->where('client_id', $user->id)
            ->firstOrFail();
        
        // Retrieve the MIME type of the original file
        $mimeType = Storage::mimeType($document->file_path);
    
        // Return the file for download with the original MIME type
        return Storage::download($document->file_path, $document->name, ['Content-Type' => $mimeType]);
    }
    
    
        public function downloadKeyFile(Request $request)
    {
        // dd($request);
        $user = Auth::user();
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $keyDownload = KeyDownload::where('client_id', $user->id)->first();
    
        if (!$keyDownload || $keyDownload->file_status === 0 || $keyDownload->file_status === null) {
            if (!$keyDownload) {
                // Additional logic when the record does not exist
                // For example, you might want to log this event, show a message, or perform other actions.
                // You can customize this part based on your specific requirements.
                // Here, we'll just create a new record for demonstration purposes.
                $keyDownload = KeyDownload::create(['client_id' => $user->id]);
            }
    
            // File has not been downloaded or there is no record, update status to 1
            $keyDownload->update(['file_status' => 1]);
    
            $keyData = "90-data-41-solov-49-taknikk-89-plutus-98";
    
            $filePath = 'keys/keyfile.ml';
            Storage::put($filePath, $keyData);
    
            return response()->download(storage_path("app/{$filePath}"), 'keyfile.ml');
      
    
            // return view('user/promoter-wallet/index', compact('keyDownload', 'cli_announcements'));
        }
    }
   

    


    public function emptimesheet()
    {
        $user = Auth::user();
        // dd($user);
        $timeSheet  = DB::table('timesheets as t')
        ->join('users as u', 'u.id', '=', 't.client_id')
        ->where('t.employee_id', '=', $user->id)
        ->select('*')
        ->get();
        $clients = DB::table('users as u')
    ->join('assignments as a', 'u.id', '=', 'a.client_id')
    ->where('a.employee_id', '=', $user->id)
    ->select('*')
    ->get();
    // $results = DB::table('assignments as a')
    // ->leftJoin('timesheets as t', 'a.client_id', '=', 't.client_id')
    // ->join('users as u', 'u.id', '=', 'a.client_id')
    // ->where('a.employee_id', $user->id)
    // ->select(
    //     'u.id as client_id',
    //     'u.name as client_name',
    //     'a.employee_id',
    //     DB::raw('DATE(t.date_of_work) as date'), // Extract the date
    //     DB::raw('GROUP_CONCAT(t.timesheet_txt) as combined_timesheet_txt'),
    //     DB::raw('COALESCE(SUM(t.spenttime), 0) as timespent'),
    //     DB::raw('MAX(t.created_at) as latest_timesheet_created_at') // Include created_at
    // )
    // ->groupBy('u.id', 'u.name', 'a.employee_id', 'date') // Group by date as well
    // ->get();
    
    // dd($results);
//   $results = DB::table('assignments as a')
//     ->join('timesheets as t', 'a.client_id', '=', 't.client_id')
//     ->join('users as u', 'u.id', '=', 'a.client_id')
//     ->where('a.employee_id', $user->id) // Filter by the logged-in user's id
//     ->whereNotNull('t.id') // Filter out records where timesheets.id is null
//     ->select(
//         'u.id as client_id',
//         'u.name as client_name',
//         'a.employee_id',
//         DB::raw('DATE(t.date_of_work) as date'), // Extract the date
//         't.timesheet_txt as timesheet_txt',
//         't.spenttime as timespent',
//         't.created_at as created_at',
//         't.id as id'
//     )
//     ->get();
$results = DB::table('timesheets as t')
    // ->join('assignments as a', 'a.employee_id', '=', 't.employee_id')
    ->join('users as u1', 'u1.id', '=', 't.employee_id')
    ->leftJoin('users as u2', 'u2.id', '=', 't.client_id') // Use leftJoin instead of join
    ->where('t.employee_id', $user->id) 
    ->select(
        // 'a.employee_id',
        't.client_id',
        't.spenttime',
        't.timesheet_txt',
        't.id',
        't.date_of_work', // Include the date_of_work field
        DB::raw('SUM(t.spenttime) as total_spenttime'),
        DB::raw('DATE(t.created_at) as created_date'), // Extract the date from created_at
        'u1.name as employee_name',
        'u2.name as client_name'
    )
    ->groupBy( 't.client_id', 't.spenttime', 't.timesheet_txt', 't.date_of_work', 't.id', 'created_date', 'u1.name', 'u2.name')
    ->orderByDesc('created_date') // Order by created_date in descending order
    // ->orderBy('a.employee_id')
    ->orderBy('t.client_id')
    ->get();




    // dd($results);
    $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
        return view('employee/timesheet/index',compact('user','timeSheet','clients','results','empl_announcements'));
    }

    public function admintimesheet()
    {
       
        
   $results = DB::table('timesheets as t')
    ->join('assignments as a', 'a.employee_id', '=', 't.employee_id')
    ->join('users as u1', 'u1.id', '=', 't.employee_id')
    ->leftJoin('users as u2', 'u2.id', '=', 't.client_id')
    ->select(
        'a.employee_id',
        't.client_id',
         't.non_client',
        't.spenttime',
        't.timesheet_txt',
        't.date_of_work', // Include the date_of_work field
        DB::raw('SUM(t.spenttime) as total_spenttime'),
        DB::raw('DATE(t.created_at) as created_date'), // Extract the date from created_at
        'u1.name as employee_name',
        'u2.name as client_name'
    )
    ->groupBy('a.employee_id', 't.client_id', 't.non_client', 't.spenttime', 't.timesheet_txt', 't.date_of_work', 'created_date', 'u1.name', 'u2.name')
    ->orderByDesc('created_date') // Order by created_date in descending order
    ->orderBy('a.employee_id')
    ->orderBy('t.client_id')
    ->get();


$results2 = DB::table('timesheets as t')
    ->leftJoin('assignments as a', 'a.employee_id', '=', 't.employee_id')
    ->join('users as u1', 'u1.id', '=', 't.employee_id')
    ->leftJoin('users as u2', 'u2.id', '=', 't.client_id')
    ->select(
        't.client_id',
        't.non_client',
        't.timesheet_txt',
        't.date_of_work',
         't.spenttime',
          't.created_at',
        'u1.name as employee_name',
        'u2.name as client_name'
    )
    ->whereNull('a.employee_id')
    ->groupBy('t.client_id', 't.non_client', 't.timesheet_txt','t.spenttime', 't.created_at',  't.date_of_work', 'u1.name', 'u2.name')
    ->get();
$results3 = DB::table('timesheets as t')
    ->join('assignments as a', 'a.employee_id', '=', 't.employee_id')
    ->join('users as u1', 'u1.id', '=', 't.employee_id')
    ->leftJoin('users as u2', 'u2.id', '=', 't.client_id')
    ->select(
        'a.employee_id',
        't.client_id',
        't.spenttime',
        't.non_client',
        't.timesheet_txt',
        't.date_of_work', // Include the date_of_work field
        DB::raw('SUM(t.spenttime) as total_spenttime'),
        DB::raw('DATE(t.created_at) as created_date'), // Extract the date from created_at
        'u1.name as employee_name',
        'u2.name as client_name'
    )
    ->where(function($query) {
        $query->whereNotNull('t.non_client')
            ->orWhere('t.non_client', '!=', '');
    }) // Include this line to filter records where non_client is not null or not an empty string
    ->whereNull('t.client_id') // Add this line to filter records where client_id is null
    ->groupBy('a.employee_id', 't.client_id','t.non_client', 't.spenttime', 't.timesheet_txt', 't.date_of_work', 'created_date', 'u1.name', 'u2.name')
    ->orderByDesc('created_date') // Order by created_date in descending order
    ->orderBy('a.employee_id')
    ->orderBy('t.client_id')
    ->get();



// dd($results2);



    $employees = User::where('role', 'Employee')->get();
        $clients = User::where('role', 'Client')->get();

    // dd($results);
    
    $announcements = Announcement::latest()->get();
        return view('admin/timesheet/index',compact('results','announcements','clients','employees','results2','results3'));
    }

    public function empprofile()
    {
        $user = Auth::user();
        $userInfo = UserInfo::select('user_infos.*')
    ->join('users', 'users.id', '=', 'user_infos.user_id')
    ->where('users.role', 'Employee')
    ->where('users.id', $user->id)
    ->first();
        // dd($userInfo);
        $profile = EmployeeProfile::where('employee_id', $user->id)->first();
        $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
        return view('employee/profile/index',compact('user','userInfo' ,'profile','empl_announcements'));
    }

    public function empcal()
    {
        $user = Auth::user();
        // dd($user);
       
        $clients = DB::table('users as u')
    ->join('assignments as a', 'u.id', '=', 'a.client_id')
    ->where('a.employee_id', '=', $user->id)
    ->select('*')
    ->get();
    $selectedClientId = request('client_id'); // Assuming you are using Laravel's request to get the selected client ID
    
    // Fetch events based on the selected client (if applicable)
    if ($selectedClientId) {
        $events = DB::table('events')
            ->where('client_id', $selectedClientId)
            ->select('*')
            ->get();
    } else {
        // If no client is selected, fetch all events
        $events = DB::table('events')->select('*')->get();
    }

    $calendarEvents = [];
    foreach ($events as $event) {
        $calendarEvents[] = [
            'title' => $event->title,
            'start' => $event->start,
            'description' => $event->description,
            'client_id' => $event->client_id,
            'employee_id' => $event->employee_id,
        ];
    }
    // dd($clients);
    $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
   




    

 
        return view('employee/calendar/index',compact('user','clients','empl_announcements','calendarEvents'));

    }

    public function usercal()
    {
        $user = Auth::user();
        // dd($user);
        $events = DB::table('events as e')
        ->join('users as u', 'u.id', '=', 'e.client_id')
        ->where('e.client_id', '=', $user->id)
        ->select('*')
        ->get();
        $calendarEvents = [];
    foreach ($events as $event) {
        $calendarEvents[] = [
            'title' => $event->title,
            'start' => $event->start,
            'description' => $event->description,
        ];
    }
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        return view('user/calendar/index',compact('user','calendarEvents','cli_announcements'));

    }
    // app/Http/Controllers/CalendarController.php
    public function fetchEvents(Request $request, $clientId)
    {
        // Retrieve events for the selected client from the database
        $events = Event::where('client_id', $clientId)->get();

        // Transform the events into the format expected by FullCalendar
        $formattedEvents = [];
        foreach ($events as $event) {
            $formattedEvents[] = [
                'title' => $event->title,
                'start' => $event->start_date, // Replace with your start date field
                'end' => $event->end_date, // Replace with your end date field
                // Add other event properties as needed
            ];
        }

        // Return the events in JSON format
        return response()->json($formattedEvents);
    }


    public function admincalendar()
    {
        $employees = User::where('role', 'Employee')->get();
        $clients = User::where('role', 'Client')->get();
        $selectedClientId = request('client_id'); // Assuming you are using Laravel's request to get the selected client ID
    
        // Fetch events based on the selected client (if applicable)
        if ($selectedClientId) {
            $events = DB::table('events')
                ->where('client_id', $selectedClientId)
                ->select('*')
                ->get();
        } else {
            // If no client is selected, fetch all events
            $events = DB::table('events')->select('*')->get();
        }
    
        $calendarEvents = [];
        foreach ($events as $event) {
            $calendarEvents[] = [
                'title' => $event->title,
                'start' => $event->start,
                'description' => $event->description,
                'client_id' => $event->client_id,
                'employee_id' => $event->employee_id,
            ];
        }
        $announcements = Announcement::latest()->get();
        return view('admin/calendar/index', compact('clients', 'employees', 'calendarEvents','announcements'));
    }
    

    public function userpassword()
    {
        $user = Auth::user();
        // dd($user);
       
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        return view('user/change_pass',compact('user','cli_announcements'));

    }

    public function updateuserpassword(Request $request)
    {
        $request->validate([
            'oldpassword' => 'required',
            'password' => 'required|confirmed|min:8',
        ]);
    
        // Get the current user
        $user = auth()->user();
    
        // Check if the provided old password matches the user's current password
        if (!Hash::check($request->oldpassword, $user->password)) {
            return redirect()->back()->with('error', 'The current password is incorrect.');
        }
    
        // Update the user's password
        $user->update([
            'password' => Hash::make($request->password),
        ]);
    
        return redirect()->back()->with('success', 'Password updated successfully.');
    }

    public function empclient()
    {
        $user = Auth::user();
        // dd($user);
        // $clients = Assignment::where('employee_id', $user->id)->get();


               
        $employeeId = $user->id;
        // dd($employeeId);

        // Retrieve the employee's profile
        // $employeeProfile = EmployeeProfile::where('employee_id', $employeeId)->first();
       $employeeProfile = DB::table('user_infos as u')
            ->join('assignments as a', 'u.user_id', '=', 'a.client_id')
            ->where('a.employee_id', '=', $employeeId)
            ->select('*')
            ->get();
    
        // dd($employeeProfile);
        // Retrieve the employee's assignments along with client and client details
//         $assignments = Assignment::where('employee_id', $employeeId)->with(['client', 'employee'])->get();
        
//         // Retrieve the user details (if needed)
//         $user = User::where('id', $employeeId)->get();
        
//         // You can access the data like this:
//         if ($employeeProfile) {
//             // Access employee profile data
//             $employeeName = $employeeProfile->name;
//             $employeeEmail = $employeeProfile->email;
//             // ... other profile fields
//         }
        
//         if ($assignments) {
//     foreach ($assignments as $assignment) {
//         // Access assignment data
//         $clientName = $assignment->client->name ?? ''; // Default to 'N/A' if client is null
//         $employeeName = $assignment->employee->name ?? ''; // Default to 'N/A' if employee is null
//         // ... other assignment data
//     }
// }

        
       
        $empl_announcements = Announcement::where('role', 'Employee')->latest()->get();
        
        return view('employee/client/list',compact('user', 'employeeProfile','empl_announcements'));
    }
    
    public function updateclientprofile(Request $request)
{
    // dd($request);
    $employeeId = $request->input('client_id');
    $user = User::find($employeeId);

    if (!$user) {
        return redirect()->back()->with('error', 'Client not found.');
    }

    // Clear previous files and handle new file uploads
    $this->handleFileUploadsnew1($request, $user);

    // Update the User model
    $user->fill($request->except('profile_picture', 'gst_document', 'pan_document', 'tan_document', 'address_proof_document'));
   
    $user->save();

    // Update the UserInfo model
    
    $userInfo = UserInfo::where('user_id', $employeeId)->first();
    if (!$userInfo) {
        $userInfo = new UserInfo();
        $userInfo->user_id = $user->id;
    }
    $this->handleFileUploadsnew1($request, $userInfo);
    $userInfo->fill($request->all());
    
    $userInfo->save();

    return redirect()->back()->with('success', 'Client profile updated successfully');
}
private function handleFileUploadsnew1(Request $request, $model)
{
    // List of file input names
    $fileInputs = [
        'profile_picture',
        'gst_document',
        'pan_document',
        'tan_document',
        'address_proof_document',
    ];

    foreach ($fileInputs as $fileInput) {
        if ($request->hasFile($fileInput)) {
            // Check if there is a previous file to delete
            if ($model->$fileInput) {
                Storage::disk('public')->delete($model->$fileInput);
            }

            // Handle the new file upload
            $file = $request->file($fileInput);
            $fileName = time() . '_' . $fileInput . '.' . $file->extension();
            Storage::disk('public')->put($fileName, File::get($file));
            $model->$fileInput = $fileName;
        }
    }
}

    

public function storeTimeSheet(Request $request)
{
    $request->validate([
        
        'timesheettxt' => 'string',
        'spenttime' => 'string',
        'date_of_work' => 'date',
       
    ]);

    

    // Create and save the timesheet record
    $timeSheet = new TimeSheet([
        'client_id' => $request->input('client_id'),
        'non_client' => $request->input('non_client'),
        'spenttime' => $request->input('spenttime'),
        'timesheet_txt' => $request->input('timesheettxt'),
        'employee_id' => $request->input('employee_id'),
        'date_of_work' => $request->input('date_of_work'),
    ]);

    $timeSheet->save();

    return redirect()->back()->with('success', 'Timesheet updated/created successfully');
}
    
    
    
    public function employeessview()
    {
        $employees = $employeeInfo = DB::table('user_infos as ui')
    ->join('users as u', 'u.id', '=', 'ui.user_id')
    ->where('u.role', 'employee')
    ->select('ui.*', 'u.profile_picture as profile_picture')
    ->get();
  
        // dd($employees);
    //   $clients = UserInfo::where('role', 'Client')
    // ->whereNotIn('user_id', function ($query) {
    //     $query->select('client_id','employee_id')
    //         ->from('assignments');
    // })
    // ->get();
  $clients = UserInfo::where('role', 'Client')
    ->whereNotIn('user_id', function ($query) {
        $query->select('client_id')
            ->from('assignments')
            ->whereColumn('user_infos.user_id', 'assignments.employee_id');
    })
    ->orderBy('name') // Add this line to order by name
    ->get();





    



    
    // dd($clients);
    
    $assignments = DB::table('assignments')
    ->join('users as clients', 'clients.id', '=', 'assignments.client_id')
    ->join('users as employees', 'employees.id', '=', 'assignments.employee_id')
    ->select('assignments.*', 'clients.name as client_name', 'employees.name as employee_name')
    ->get();
    $announcements = Announcement::latest()->get();
        return view('admin/employee/list',compact('employees','clients','assignments','announcements'));
    }

    public function adminannouncement()
    { 
        $clientsannouncements = Announcement::where('role','Client')->latest()->get();
        // dd($clientsannouncements);
        $employeesannouncements = Announcement::where('role','Employee')->latest()->get();
        $announcements = Announcement::latest()->get();;
        return view('admin/announcement/index',compact('clientsannouncements','employeesannouncements','announcements'));
    }

    public function storeannouncementofemployees(request $request)
    {
        $data = $request->all();
        Validator::make($data, [
            
            'role' => ['required', 'string', 'max:255'],
            'announcements_for_employee' => ['required', 'string', 'max:255'],
           
        ]);
        Announcement::create([
            'role' => $data['role'],
            'announcements_for_employee' => $data['announcements_for_employee'],
            
        ]);
        if ($request->ajax()) {
            return response()->json(['message' => 'Annoucement created successfully']);
        }
    
        // Redirect with a success message
        return redirect('/admin/announcement')->with('success', 'Annoucement created successfully');
    }

    public function storeannouncementofclients(request $request)
    {
        $data = $request->all();
        Validator::make($data, [
            
            'role' => ['required', 'string', 'max:255'],
            'announcements_for_clients' => ['required', 'string', 'max:255'],
           
        ]);
        Announcement::create([
            'role' => $data['role'],
            'announcements_for_clients' => $data['announcements_for_clients'],
            
        ]);
        if ($request->ajax()) {
            return response()->json(['message' => 'Annoucement created successfully']);
        }
    
        // Redirect with a success message
        return redirect('/admin/announcement')->with('success', 'Annoucement created successfully');
    }
   
    
    public function storeclients(request $request)
    {
        // dd($request);
        $data = $request->all();
        $validator = Validator::make($data, [
            'phone' => ['required', 'string', 'min:10', 'max:10'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
            'role' => ['required', 'string', 'max:255'],
            'name' => ['required', 'string', 'max:255'],
            'plan_type' => ['required', 'string', 'max:255'],
            // 'tenure_start_date' => ['required', 'string', 'max:255'],
            // 'tenure_end_date' => ['required', 'string', 'max:255'],
            'brand_name' => ['required', 'string', 'max:255'],
            'client_correspondence_address' => ['required', 'string', 'max:255'],
            'client_registered_office_address' => ['required', 'string', 'max:255'],
            'authorised_signatory_name' => ['required', 'string', 'max:255'],
            // 'authorised_signatory_contact_no' => ['required', 'string', 'max:255'],
            // 'authorised_signatory_email_id' => ['required', 'string', 'email', 'max:255', 'unique:users'],
        ]);
        $existingUser = User::where('email', $data['email'])->first();

        if ($existingUser) {
            // User with the same email already exists, return an error message for AJAX requests
            if ($request->ajax()) {
                return response()->json(['error' => 'User with this email already exists.'], 422);
            } else {
                // Redirect with an error message for regular form submissions
                return redirect()->back()->with('error', 'User with this email already exists.')->withInput();
            }
        }
        try {
            $user = User::create([
            'phone' => $data['phone'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
            'role' => $data['role'],
            'name' => $data['name'],
            'plan_type' => $data['plan_type'],
            // 'tenure_start_date' => $data['tenure_start_date'],
            // 'tenure_end_date' => $data['tenure_end_date'],

            'brand_name' => $data['brand_name'],
            'client_correspondence_address' => $data['client_correspondence_address'],
            'client_registered_office_address' => $data['client_registered_office_address'],
            'authorised_signatory_name' => $data['authorised_signatory_name'],
            // 'authorised_signatory_contact_no' => $data['authorised_signatory_contact_no'],
            // 'authorised_signatory_email_id' => $data['authorised_signatory_email_id'],
        ]);
        UserInfo::create([
            'user_id' => $user->id,
            
            'phone' => $data['phone'],
            'email' => $data['email'],
            'password' => $data['password'],
            'role' => $data['role'],
            'name' => $data['name'],
            'plan_type' => $data['plan_type'],
            // 'tenure_start_date' => $data['tenure_start_date'],
            // 'tenure_end_date' => $data['tenure_end_date'],

            'brand_name' => $data['brand_name'],
            'client_correspondence_address' => $data['client_correspondence_address'],
            'client_registered_office_address' => $data['client_registered_office_address'],
            'authorised_signatory_name' => $data['authorised_signatory_name'],
            // 'authorised_signatory_contact_no' => $data['authorised_signatory_contact_no'],
            // 'authorised_signatory_email_id' => $data['authorised_signatory_email_id'],
            
            
        ]);
        if ($request->ajax()) {
            return response()->json(['message' => 'User created successfully']);
        }
    
        // Redirect with a success message
        return redirect('/admin/clients')->with('success', 'User created successfully');
    }
    catch (\Illuminate\Database\QueryException $e) {
        $errorMessage = 'An error occurred while creating the employee.';
        if ($request->ajax()) {
            return response()->json(['error' => $errorMessage], 422);
        } else {
            return redirect()->back()->with('error', $errorMessage)->withInput();
        }
    }
}


public function payrollmaster()
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $user = Auth::user();
        $emplife = StoreEmployeeprofile::where('user_id', $user->id)->get();
        
       return view('user.HRM.payroll-master',compact('cli_announcements','emplife','user'));
    }
    
    public function payrolldetails($id)
    {
        $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
        $emplife = StoreEmployeeprofile::where('id', $id)->get();
        
        $employees = StoreEmployeePayroll::join('store_employee_profile', 'store_employee_payroll.employee_id', '=', 'store_employee_profile.id')
    ->where('store_employee_payroll.employee_id', $id)
    ->select('store_employee_payroll.id as detail_id','store_employee_payroll.startdate as sd','store_employee_payroll.file_size as sz', 'store_employee_payroll.*', 'store_employee_profile.*')
    ->get();
    // dd($employees);
       return view('user.HRM.payroll-details',compact('cli_announcements','emplife','employees'));
    }



public function founderregister(Request $request)
{
    // Check if the email OTP is set in the session and matches $request->email_otp
    if (Session::has('email_otp') && Session::get('email_otp') == $request->email_otp) {
        // Clear the email OTP from the session
        Session::forget('email_otp');

        // Check if a user with the provided email already exists
        $existingUser = User::where('email', $request->email)->first();

        // If the user does not exist, create a new account and log in the user
        if (!$existingUser) {
            // Create the user account
            $user = User::create([
                'phone' => $request->phone,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'role' => 'founder',
                'designation' => $request->designation,
                'name_of_the_business' => $request->name_of_the_business,
                'industry' => $request->industry,
                'employees' => $request->employees,
                'name' => $request->first_name.$request->last_name,
            ]);

            // Check if the user was successfully created
            if ($user) {
                // Retrieve the user ID
                $userId = $user->id;

                // Store additional user information in the user_info table
                UserInfo::create([
                    'user_id' => $userId,
                    'phone' => $request->phone,
                    'email' => $request->email,
                    'password' => $request->password,
                    'role' => 'founder',
                    'designation' => $request->designation,
                    'name_of_the_business' => $request->name_of_the_business,
                    'industry' => $request->industry,
                    'employees' => $request->employees,
                    'name' => $request->first_name.$request->last_name,
                ]);

                // Log in the newly created user
                Auth::login($user);

                return redirect()->route('userclientsview'); // Redirect to the user dashboard view
            }
        } else {
            // User with the provided email already exists, handle accordingly (e.g., show an error message)
            // For example:
            return redirect()->back()->with('error', 'User with this email already exists.');
        }
    }

    return null; // Return null if user creation failed or OTP mismatch
}


public function deleteAnnouncement($id)
{
    // Find the announcement by ID
    $announcement = Announcement::find($id);

    if (!$announcement) {
        // Handle the case where the announcement does not exist
        return redirect()->route('home')->with('error', 'Announcement not found.');
    }

    // Delete the announcement
    $announcement->delete();

    // Redirect back to the home page with a success message
    return redirect()->back()->with('success', 'Announcement deleted successfully.');
}
public function deleteAnnouncementd($id)
{
    // Find the announcement by ID
    $announcement = Announcement::find($id);

    if (!$announcement) {
        // Handle the case where the announcement does not exist
        return redirect()->route('home')->with('error', 'Announcement not found.');
    }

    // Delete the announcement
    $announcement->delete();

    // Redirect back to the home page with a success message
    return redirect()->back()->with('success', 'Announcement deleted successfully.');
}
public function clientdel($id)
{
    // dd($id);
   $user = User::with('userInfo')->find($id);

if ($user) {
    // Delete the user_info record
    $user->userInfo->delete();
    
    // Delete the user record
    $user->delete();
    
    
}

    // Redirect back to the home page with a success message
    return redirect()->back()->with('success', 'Announcement deleted successfully.');
}
public function storeemployee(request $request)
{ 
    // dd($request);
    $email = $request->email;
    $passwordd = $request->password;
//     $validator = Validator::make($request->all(), [
//         'phone' => ['string', 'min:10', 'max:10'],
//         'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
//         'password' => ['required', 'string', 'min:8', 'confirmed'],
//         'role' => ['required', 'string', 'max:255'],
//         'name' => ['string', 'max:255'],
//         'personal_email_id' => ['string', 'max:255'],
//         'designation' => ['string', 'max:255'],
//         'department' => ['string', 'max:255'],
//         'joining_date' => ['string', 'max:255'],
//         'immediate_reporting_manager' => ['string', 'max:255'],
//         'correspondence_address_employee' => ['string'],
//         'permanent_address_employee' => ['string'],
//         'aadhar_number_employee' => ['string'],
//     ]);
// dd($validator);
//     // Check for validation errors
//     if ($validator->fails()) {
//         // Validation failed, return validation errors to the front end
//         if ($request->ajax()) {
//             return response()->json(['errors' => $validator->errors()], 422);
//         }
//         return redirect()->back()->withErrors($validator)->withInput();
//     }

//     // Check if a user with the same email already exists
//     $existingUser = User::where('email', $request->email)->first();

//     if ($existingUser) {
//         // User with the same email already exists, return an error message for AJAX requests
//         if ($request->ajax()) {
//             return response()->json(['error' => 'User with this email already exists.'], 422);
//         } else {
//             // Redirect with an error message for regular form submissions
//             return redirect()->back()->with('error', 'User with this email already exists.')->withInput();
//         }
//     }

    // Create a new user record
    $user = User::create([
        'phone' => $request->phone,
        'email' => $request->email,
        'password' => Hash::make($request->password),
        'role' => $request->role,
        'name' => $request->name,
        'personal_email_id' => $request->personal_email_id,
        'designation' => $request->designation,
        'department' => $request->department,
        'joining_date' => $request->joining_date,
        'immediate_reporting_manager' => $request->immediate_reporting_manager,
        'correspondence_address_employee' => $request->correspondence_address_employee,
        'permanent_address_employee' => $request->permanent_address_employee,
        'aadhar_number_employee' => $request->aadhar_number_employee,
    ]);

    // Create a corresponding user_info record (assuming there's a relationship set up)
    $userInfo = new UserInfo([
        'phone' => $request->phone,
        'email' => $request->email,
        'password' => $request->password,
        'role' => $request->role,
        'name' => $request->name,
        'personal_email_id' => $request->personal_email_id,
        'designation' => $request->designation,
        'department' => $request->department,
        'joining_date' => $request->joining_date,
        'immediate_reporting_manager' => $request->immediate_reporting_manager,
        'correspondence_address_employee' => $request->correspondence_address_employee,
        'permanent_address_employee' => $request->permanent_address_employee,
        'aadhar_number_employee' => $request->aadhar_number_employee,
    ]);

    // Save the user_info record
    $user->userInfo()->save($userInfo);

    // You can send an email notification here if needed

    if ($request->ajax()) {
        return response()->json(['message' => 'Employee created successfully']);
    }

    // Retrieve announcements (assuming there's an Announcement model)
    $announcements = Announcement::latest()->get();

    // Redirect with a success message
    return redirect('/admin/employees')->with([
        'success' => 'Employee created successfully',
        'announcements' => $announcements,
    ]);


}








// public function deleteUser($id)
// {
    
//     try {
//         // Find the user by ID
//         $user = User::find($id);

//         if (!$user) {
//             return response()->json(['success' => false, 'message' => 'User not found.']);
//         }

//         // Delete related records in other tables
//         $user->assignments()->delete();
//         $user->clientProfile()->delete();
//         $user->employeeProfile()->delete();
//         $user->timesheets()->delete();
//         $user->issues()->delete();
//         $user->userInfo()->delete();

//         // Delete the user record itself
//         $user->delete();

//         return response()->json(['success' => true, 'message' => 'User and related records deleted successfully.']);
//     } catch (\Exception $e) {
//         return response()->json(['success' => false, 'message' => 'An error occurred while deleting the user.']);
//     }
// }
public function deleteemp($id)
{
    // Find the user by ID
    $user = User::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Employee not found.');
    }

    // Delete the user record
    $user->delete();

    // Also delete the related user_info record
    UserInfo::where('user_id', $id)->delete();

    return redirect()->back()->with('success', 'Employee deleted successfully.');
}
public function deletecli($id)
{
    // Find the user by ID
    $user = User::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Client not found.');
    }

    // Delete the user record
    $user->delete();

    // Also delete the related user_info record
    UserInfo::where('user_id', $id)->delete();

    return redirect()->back()->with('success', 'Client deleted successfully.');
}

public function deletedsc($id)
{
    // Find the user by ID
    $user = DataModel::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Record not found.');
    }

    // Delete the user record
    $user->delete();

    

    return redirect()->back()->with('success', 'Record deleted successfully.');
}
public function deleteope($id)
{
    // Find the user by ID
    $user = OutOfExpense::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Record not found.');
    }

    // Delete the user record
    $user->delete();

    

    return redirect()->back()->with('success', 'Record deleted successfully.');
}
public function deletetime($id)
{
    // Find the user by ID
    $user = TimeSheet::find($id);

    if (!$user) {
        return redirect()->back()->with('error', 'Record not found.');
    }

    // Delete the user record
    $user->delete();

    

    return redirect()->back()->with('success', 'Record deleted successfully.');
}
public function sendNotification(Request $request)
{
    // Retrieve the user ID from the AJAX request
    $userId = $request->input('userId');
    $mess = $request->input('mess');
    $notification = new Notification();
    $notification->user_id = $userId;
    $notification->notification = $mess;
    

    $notification->save();
    
    return redirect()->back()->with('success', 'notification send successfully');
}

    public function userclientsview()
    {
        return view('user/dashboard/index');
    }

   

    public function updateemployeeprofile(Request $request)
{
    $employeeId = $request->input('employee_id');
    $user = User::find($employeeId);

    if (!$user) {
        return redirect()->back()->with('error', 'Employee not found.');
    }

    // Clear previous files and handle new file uploads
    $this->handleFileUploads($request, $user);

    // Update the User model
    $user->fill($request->except('profile_picture', 'appointment_letter', 'increment_letter', 'kra_docs', 'policy_manuals'));
    $user->password = Hash::make($request->input('password'));
    $user->save();

    // Update the UserInfo model
    
    $userInfo = UserInfo::where('user_id', $user->id)->first();
    if (!$userInfo) {
        $userInfo = new UserInfo();
        $userInfo->user_id = $user->id;
    }
    $this->handleFileUploads($request, $userInfo);
    $userInfo->fill($request->all());
    $userInfo->password = $request->input('password');
    $userInfo->save();

    return redirect()->back()->with('success', 'Employee profile updated successfully');
}

    public function updatesingleemployeeprofile(Request $request)
{
    // dd($request);
    $employeeId = $request->input('employee_id');
    $user = User::find($employeeId);

    if (!$user) {
        return redirect()->back()->with('error', 'Employee not found.');
    }

    // Clear previous files and handle new file uploads
    $this->handleFileUploadsnew($request, $user);

    // Update the User model
    $user->fill($request->except('profile_picture', 'appointment_letter', 'increment_letter', 'kra_docs', 'policy_manuals'));
    $user->password = Hash::make($request->input('password'));
    $user->save();

    // Update the UserInfo model
    
    $userInfo = UserInfo::where('user_id', $user->id)->first();
    if (!$userInfo) {
        $userInfo = new UserInfo();
        $userInfo->user_id = $user->id;
    }
    $this->handleFileUploadsnew($request, $userInfo);
    $userInfo->fill($request->all());
    $userInfo->password = $request->input('password');
    $userInfo->save();

    return redirect()->back()->with('success', 'Employee profile updated successfully');
}
private function handleFileUploadsnew(Request $request, $model)
{
    // List of file input names
    $fileInputs = [
        'profile_picture',
        'appointment_letter',
        'increment_letter',
        'kra_docs',
        'policy_manuals',
    ];

    foreach ($fileInputs as $fileInput) {
        if ($request->hasFile($fileInput)) {
            // Check if there is a previous file to delete
            if ($model->$fileInput) {
                Storage::disk('public')->delete($model->$fileInput);
            }

            // Handle the new file upload
            $file = $request->file($fileInput);
            $fileName = time() . '_' . $fileInput . '.' . $file->extension();
            Storage::disk('public')->put($fileName, File::get($file));
            $model->$fileInput = $fileName;
        }
    }
}
private function handleFileUploads(Request $request, $model)
{
    // List of file input names
    $fileInputs = [
        'profile_picture',
        'appointment_letter',
        'increment_letter',
        'kra_docs',
        'policy_manuals',
    ];

    foreach ($fileInputs as $fileInput) {
        if ($request->hasFile($fileInput)) {
            // Check if there is a previous file to delete
            if ($model->$fileInput) {
                Storage::disk('public')->delete($model->$fileInput);
            }

            // Handle the new file upload
            $file = $request->file($fileInput);
            $fileName = time() . '_' . $fileInput . '.' . $file->extension();
            Storage::disk('public')->put($fileName, File::get($file));
            $model->$fileInput = $fileName;
        }
    }
}


    public function updateclientprofiles(Request $request)
    {
    
        $clientid = $request->input('client_id');
        $clientProfile = User::where('id', $clientid)->first();
       
      
        
        
        
        $users=  User::updateOrCreate(
            ['id' => $clientid],
            ['name' => $request->input('name'),
                'phone' => $request->input('phone'),
                
                // 'password' => Hash::make($request->input('password')),
                'brand_name' => $request->input('brand_name'),
               
              
                'client_correspondence_address' => $request->input('client_correspondence_address'),
                'client_registered_office_address' => $request->input('client_registered_office_address'),
                'plan_type' => $request->input('plan_type'),
                
                'authorised_signatory_name' => $request->input('authorised_signatory_name'),
                
               
            
        ]);
        
         UserInfo::updateOrCreate(
           ['user_id' => $clientid],
            ['name' => $request->input('name'),
                'phone' => $request->input('phone'),
                
                // 'password' => $request->input('password'),
                'brand_name' => $request->input('brand_name'),
               
              
                'client_correspondence_address' => $request->input('client_correspondence_address'),
                'client_registered_office_address' => $request->input('client_registered_office_address'),
                'plan_type' => $request->input('plan_type'),
                
                'authorised_signatory_name' => $request->input('authorised_signatory_name'),
                
               
            
        ]);
   
        if ($request->hasFile('profile_picture')) {
            $image = $request->file('profile_picture');
            $imageName = time() . '.' . $image->extension();
            Storage::disk('public')->put($imageName, File::get($image));
    
           
            $users->profile_picture = $imageName;
            $users->save();
            
            UserInfo::updateOrCreate(
        ['user_id' => $clientid],
        ['profile_picture' => $imageName]
    );
        }
        
        return redirect()->back()->with('success', 'Client profile updated/created successfully');
    }
    public function updatedsc(Request $request)
    {
  $validatedData = $request->validate([
        // Add validation rules for other fields if needed
        'dsc_id' => 'required',
    ]);

    $data = [
        'Nonclient' => $request->input('Nonclient'),
        'directorname' => $request->input('directorname'),
        'din_number' => $request->input('din_number'),
        'valid_from' => $request->input('valid_from'),
        'valid_till' => $request->input('valid_till'),
        'expiry_status' => $request->input('expiry_status'),
        'renewal' => $request->input('renewal'),
        'mobile_no' => $request->input('mobile_no'),
        'email' => $request->input('email'),
        'father_name' => $request->input('father_name'),
        'dsc_location' => $request->input('dsc_location'),
    ];

    // Check if a file was uploaded and update the corresponding DataModel record
    if ($request->hasFile('pan_file')) {
        $panFilePath = $request->file('pan_file')->store('uploads');
        $data['pan_file_path'] = $panFilePath;
    }

    if ($request->hasFile('aadhar_file')) {
        $aadharFilePath = $request->file('aadhar_file')->store('uploads');
        $data['aadhar_file_path'] = $aadharFilePath;
    }

    if ($request->hasFile('profile_file')) {
        $profileFilePath = $request->file('profile_file')->store('uploads');
        $data['profile_file_path'] = $profileFilePath;
    }

    // Use updateOrInsert to update or insert the record based on the 'dsc_id'
    $dataModel = DataModel::updateOrInsert(
        ['id' => $request->input('dsc_id')],
        $data
    );

     
   
        
        return redirect()->back()->with('success', 'DSC updated/created successfully');
    }
    public function issueClient(Request $request)
{
    $validatedData = $request->validate([
        'client_id' => 'required',
        'issue_date' => 'required|date',
        'responsibility' => 'required|string',
        'area' => 'required|string',
        'particulars' => 'required|string',
        'status' => 'required|string',
        'remarks' => 'nullable|string',
        'employee_id' => 'required',
        'employee_name' => 'required',
        'client_name' => 'required',
    ]);

    Issue::create($validatedData);

    return redirect()->back()->with('success', 'Issue updated/created successfully');
}


public function eventsstore(Request $request)
{

    // dd($request->event_description);
    
    $data = $request->validate([
        'client_id' => 'required',
        'employee_id' => 'required',
        'compliances' => 'required',
        'event_start' => 'required|date',
        
        'event_description' => 'nullable',
       
        // Add validation rules for other fields
    ]);

    Event::create([
        'title' => $request->compliances,
        'start' => $request->event_start,
       
        'description' => $request->event_description,
        'client_id' => $request->client_id,
        'employee_id' => $request->employee_id,
        // Add other fields as needed
    ]);
    return redirect()->back()->with('success', 'Event updated/created successfully');
}
public function ticktingdetails()
{
    $cli_announcements = Announcement::where('role', 'Client')->latest()->get();
    $user = Auth::user();
   return view('user.ticket.tickting',compact('cli_announcements', 'user'));
}

// public function event(Request $request)
// {
//     $clientId = $request->input('client_id');
//     $events = Event::select('events.*')
//         ->join('users as u', 'u.id', '=', 'events.employee_id')
//         ->where('u.client_id', $clientId) // Assuming there's a client_id column in your users table
//         ->get();

//     return response()->json($events);
// }

public function sendOtp(Request $request)
    {
        // Validate the phone number
        $request->validate([
            'phone' => 'required',
        ]);
// dd($request);
        $phoneNumber = $request->input('phone');
        $phoneNumber = preg_replace('/\s+/', '', $phoneNumber); // Remove spaces
       
        
        // Add country code if not present
        if (substr($phoneNumber, 0, 2) !== '91' && substr($phoneNumber, 0, 1) !== '+') {
            $phoneNumber = '+91' . $phoneNumber; // Prepend +91 for Indian numbers
        }
        
        // Validate the phone number format
        if (!preg_match('/^\+91\d{10}$/', $phoneNumber)) {
            return response()->json(['error' => 'Invalid phone number format.'], 400);
        }



        // Initialize MailerSend with the API key
        $mailersend = new MailerSend(['api_key' => 'mlsn.6f53e35987ae3b1eda59fb972692d11b6a6169abf5fe123df15969ba2298e7e2']);
        

        // Generate OTP (example: 6-digit random number)
        $otp = rand(100000, 999999);

        // Store OTP in session or database if required (for verification)
        session(['otp' => $otp]);
        // dd($phoneNumber);
        // Build SMS params
    

       // Build SMS params
$smsParams = (new SmsParams())
->setFrom('+18332552485') // Ensure this is a valid sender number
// ->setTo($phoneNumber) // Use setTo for all recipients
->addRecipient($phoneNumber)
->setText('Text'); // Include the OTP in the message text
// dd($smsParams);
// Send SMS
try {
$sms = $mailersend->sms->send($smsParams);
// Handle success (e.g., log the response, show a success message)
} catch (\MailerSend\Exceptions\MailerSendValidationException $e) {
// Handle validation error (log the error message)
dd($e->getMessage());
} catch (\Exception $e) {
// Handle general errors
dd($e->getMessage());
}
    }


    // customer creation code start from here 

    public function customerstore(Request $request)
{
    // Validate incoming data
    $validated = $request->validate([
        'profile_picture' => 'nullable|image|max:2048',
        'lename' => 'required|string|max:255',
        'dname' => 'required|array',
        'dname.*' => 'required|string|max:255',
        'roa' => 'required|string',
        'state' => 'required|string|max:255',
        'city' => 'required|string|max:255',
        'pincode' => 'required|string|max:6',
        'CinNo' => 'required|string|max:21', // CIN length is fixed at 21 characters
        'cin_file' => 'required|file|max:2048',
        'GSTINNo' => 'required|string|max:15|min:15', // GSTIN length is exactly 15 characters
        'gstin_file' => 'required|file|max:2048',
        'type_of_entity' => 'required|string|max:255',
        'brandname' => 'nullable|string|max:255',
    ]);

    // Check if CIN number already exists
    if (Customer::where('CinNo', $validated['CinNo'])->exists()) {
        return response()->json([
            'message' => 'The provided CIN number already exists.',
        ], 422);
    }

    // Check if GSTIN number already exists
    if (Customer::where('GSTINNo', $validated['GSTINNo'])->exists()) {
        return response()->json([
            'message' => 'The provided GSTIN number already exists.',
        ], 422);
    }

    // Handle file uploads
    $validated['profile_picture'] = $request->file('profile_picture') 
        ? $request->file('profile_picture')->store('profile_pictures', 'public') 
        : null;

    $validated['cin_file'] = $request->file('cin_file') 
        ? $request->file('cin_file')->store('cin_files', 'public') 
        : null;

    $validated['gstin_file'] = $request->file('gstin_file') 
        ? $request->file('gstin_file')->store('gstin_files', 'public') 
        : null;

    // Include the authenticated user ID
    $validated['customer_created_by'] = auth()->id();

    // Save customer data
    Customer::create($validated);

    return response()->json(['message' => 'Customer details saved successfully!']);
}

    

    // customer creation code end here from here 
}
